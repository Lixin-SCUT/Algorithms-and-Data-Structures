> 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
> 
> 示例 1:
> 输入: 123
> 输出: 321
>  示例 2:
> 输入: -123
> 输出: -321
> 示例 3:
> 输入: 120
> 输出: 21
> 注意:
> 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 `[−2^31,  2^31 − 1]`。请根据这个假设，如果反转后整数溢出那么就返回 0。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/reverse-integer
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
> 

这道题的难处在于
1.负数的处理，并且负数能表示的位置比正数多一位
2.末尾0的处理，反转后需要去除多余的0

其实主要就两种方法，一种是整数的整十除法，另一种就是转化为字符串进行操作。我偷懒就使用了字符串的方法，反转、判断溢出和对末尾0的处理方便很多，但是对于负数的处理比较麻烦，需要将-2^31单独判断一次。
代码如下：
```
class Solution {
public:
    int reverse(int x) {
        bool neg=false;
        if(x==-2147483648)
            return 0;
        if(x<0){
            neg=true;
            x=-x;
        }
        string num_s=to_string(x);
        auto left=num_s.begin();
        auto right=num_s.end()-1;
        while(left<right)
            iter_swap(left++,right--);
        if(num_s.size()==10){
            if(neg){
                 if(num_s>"2147483648")
                    return 0;
            }     
            else{
                if(num_s>"2147483647")
                    return 0;
            }           
        }        
        x=stoi(num_s);
        if(neg)
            x=-x;
        return x;
    }
};
```
可以看到代码不够优雅啊，而且其实字符串和整数的转换是需要比较多的库函数的。
接下来看看官方题解：
> 方法：弹出和推入数字 & 溢出前进行检查
> 思路
> 我们可以一次构建反转整数的一位数字。在这样做的时候，我们可以预先检查向原整数附加另一位数字是否会导致溢出。
> 
> 算法
> 反转整数的方法可以与反转字符串进行类比。
> 我们想重复“弹出” x 的最后一位数字，并将它“推入”到 rev 的后面。最后，rev 将与 x 相反。
> 要在没有辅助堆栈 / 数组的帮助下 “弹出” 和 “推入” 数字，我们可以使用数学方法。
```
//pop operation:
pop = x % 10;
x /= 10;

//push operation:
temp = rev * 10 + pop;
rev = temp;
```
> 但是，这种方法很危险，因为当 temp=rev⋅10+pop 时会导致溢出。
> 幸运的是，事先检查这个语句是否会导致溢出很容易。
> 为了便于解释，我们假设 rev 是正数。
> 如果 temp=rev⋅10+pop 导致溢出，那么一定有rev≥ INTMAX/10
> 如果 rev> INTMAX/10，那么temp=rev⋅10+pop 一定会溢出。
> 如果 rev== INTMAX/10，那么只要 pop>7，temp=rev⋅10+pop 就会溢出。
> 当 rev 为负时可以应用类似的逻辑。
```
class Solution {
public:
    int reverse(int x) {
        int rev = 0;
        while (x != 0) {
            int pop = x % 10;
            x /= 10;
            if (rev > INT_MAX/10 || (rev == INT_MAX / 10 && pop > 7)) return 0;
            if (rev < INT_MIN/10 || (rev == INT_MIN / 10 && pop < -8)) return 0;
            rev = rev * 10 + pop;
        }
        return rev;
    }
};
```
> 复杂度分析
> 时间复杂度：O(log(x))，x 中大约有log_10(x) 位数字。
> 空间复杂度：O(1)
> 
