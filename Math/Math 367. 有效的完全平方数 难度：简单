> 给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回 False。
> 说明：不要使用任何内置的库函数，如  sqrt。
> 
> 示例 1：
> 输入：16
> 输出：True
> 示例 2：
> 输入：14
> 输出：False
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/valid-perfect-square
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
> 

思路：
其实这道题和之前的求开方值非常像，所以我直接用了牛顿迭代法来做了（二分法也是可以的）只是最后需要加上判断条件。
```
class Solution {
public:
    bool isPerfectSquare(int num) {
        if(num==0||num==1)
            return true;
        int res=sqrts(double(num),num);
        if(res*res==num)
            return true;
        return false;
        
    }
    
    double sqrts(double x,int num){
        double res=(x+num/x)/2;
        if(res==x)
            return x;
        else
            return sqrts(res,num);
    }
};
```
对于判断条件，一开始我是想利用res平方是否等于原值来判断的，但是注意！就算double有精度限制，但是就好像计算器一样，如果将其平方是会等于原值的！所以最后我直接讲res强制转换为int，只取整数部分再相乘判断。

下面是网友题解：
> 解法：二分法
```
class Solution {
public:
    bool isPerfectSquare(int num) {
        int start=1;
        int end=num;
        int mid=start+(end-start)/2;
        while(start<=end)
        {
            if(pow(mid,2)>num)
            {
                end=mid-1;
            }
            else if(pow(mid,2)<num)
            {
                start=mid+1;
            }
            else return true;
            mid=(end-start)/2+start;
        }
        return false;
    }
};
```
> 解法：公式法
> 利用 1+3+5+7+9+…+(2n-1)=n^2，即完全平方数肯定是前n个连续奇数的和
```
class Solution {
public:
    bool isPerfectSquare(int num) {
        int i=1;
        while(num>0)
        {
            num-=i;
            i+=2;
        }
        return num==0;
    }
};
```

解法：牛顿迭代法
```
if(1 == num) return true;
        int i = num / 2;
        while((double)i * i > num){
            i = (i + num / i) / 2;
        }
        return i * i == num;
```


