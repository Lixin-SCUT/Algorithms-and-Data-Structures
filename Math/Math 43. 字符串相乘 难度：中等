Math 43. 字符串相乘 难度：中等
> 给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。
> 
> 示例 1:
> 输入: num1 = "2", num2 = "3"
> 输出: "6"
> 示例 2:
> 输入: num1 = "123", num2 = "456"
> 输出: "56088"
> 说明：
> 
> num1 和 num2 的长度小于110。
> num1 和 num2 只包含数字 0-9。
> num1 和 num2 均不以零开头，除非是数字 0 本身。
> 不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/multiply-strings
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
> 

昨天在医院看了一下没什么思路
主要的难点在于
1.溢出问题，110位，单纯地转化为整数肯定不行的
2.以一个数为标准，对另一个数进行逐位计算的话比较麻烦，也容易有溢出的风险

然后来看一下网友题解
> 转载借鉴自 https://leetcode.com/problems/multiply-strings/discuss/17605/Easiest-JAVA-Solution-with-Graph-Explanation
![](file://C:/Users/lab509/Documents/Gridea/post-images/1571540288082.png)

这个思路应该是最好的解答了，将两个数都进行逐位计算，然后将影响到的两位进行处理（一开始我想不明白为什么不用考虑res[i+j]的进位，后来才发现主要是后一位有进位，前一位是不用担心进位问题的。）
按照思路实现如下:
```
class Solution {
public:
    string multiply(string num1, string num2) {
        int len1=num1.size();
        int len2=num2.size();
        string res(len1+len2,'0');
        for(int i=len1-1;i>=0;--i)
            for(int j=len2-1;j>=0;--j){
                int temp=(res[i+j+1]-'0')+(num1[i]-'0')*(num2[j]-'0');
                res[i+j+1]=temp%10+'0';
                res[i+j]+=temp/10;
            }
        int i=0;
        while(i!=len1+len2-1&&res[i]=='0')
            ++i;
        res=res.substr(i,len1+len2-i);
        return res;
    }
};
```

剩下的就来看一下普通竖式版的题解吧
方法：普通竖式
![](file://C:/Users/lab509/Documents/Gridea/post-images/1571540602407.png)
遍历 num2 每一位与 num1 进行相乘，将每一步的结果进行累加。

注意：
num2 除了第一位的其他位与 num1 运算的结果需要补0
计算字符串数字累加其实就是415. 字符串相加
```
class Solution {
    /**
    * 计算形式
    *    num1
    *  x num2
    *  ------
    *  result
    */
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        // 保存计算结果
        String res = "0";
        
        // num2 逐位与 num1 相乘
        for (int i = num2.length() - 1; i >= 0; i--) {
            int carry = 0;
            // 保存 num2 第i位数字与 num1 相乘的结果
            StringBuilder temp = new StringBuilder();
            // 补 0 
            for (int j = 0; j < num2.length() - 1 - i; j++) {
                temp.append(0);
            }
            int n2 = num2.charAt(i) - '0';
            
            // num2 的第 i 位数字 n2 与 num1 相乘
            for (int j = num1.length() - 1; j >= 0 || carry != 0; j--) {
                int n1 = j < 0 ? 0 : num1.charAt(j) - '0';
                int product = (n1 * n2 + carry) % 10;
                temp.append(product);
                carry = (n1 * n2 + carry) / 10;
            }
            // 将当前结果与新计算的结果求和作为新的结果
            res = addStrings(res, temp.reverse().toString());
        }
        return res;
    }

    /**
     * 对两个字符串数字进行相加，返回字符串形式的和
     */
    public String addStrings(String num1, String num2) {
        StringBuilder builder = new StringBuilder();
        int carry = 0;
        for (int i = num1.length() - 1, j = num2.length() - 1;
             i >= 0 || j >= 0 || carry != 0;
             i--, j--) {
            int x = i < 0 ? 0 : num1.charAt(i) - '0';
            int y = j < 0 ? 0 : num2.charAt(j) - '0';
            int sum = (x + y + carry) % 10;
            builder.append(sum);
            carry = (x + y + carry) / 10;
        }
        return builder.reverse().toString();
    }
}
```
复杂度分析
时间复杂度：O(M N)。 M,N分别为 num1 和 num2的长度
空间复杂度：O(M+N)。用于存储计算结果。
