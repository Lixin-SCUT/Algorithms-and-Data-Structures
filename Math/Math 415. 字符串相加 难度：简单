> 给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。
> 
> 注意：
> num1 和num2 的长度都小于 5100.
> num1 和num2 都只包含数字 0-9.
> num1 和num2 都不包含任何前导零。
> 你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/add-strings
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
> 

要点难点：
1.进位问题，因为不可以直接转化为整数，所以必须使用变量保存一个进位标志
2.两数不等位
3.需要在最前面补位
我的思路
因为这道题其实和前面的二进制相加非常像，不过这一次不能用异或代替相加，必须用ASCII的可加性来做，所以主要思路如下
1.使用int值而不是bool值来表示进位（其实bool值也可以的，但是int值更加直观吧）
2.补位，简单粗暴hhh（但是在后面的网友题解中可以看到更加优雅的解决方法）
3.判断进位变量从而直接在前面补位

最终代码如下：
```
class Solution {
public:
    string addStrings(string num1, string num2) {
       int len1=num1.size(),len2=num2.size();
        int len=len1-len2;
        if(len>0)
            while(len)
                num2="0"+num2,--len;
        else
            while(len)
                num1="0"+num1,++len;
        len=num1.size();
        string res(len,'0');
        int flag=0;
        int temp=0;
        for(int i=len-1;i>=0;--i){
            temp=(num1[i]-'0')+(num2[i]-'0')+flag;
            if(temp/10)
                flag=1;
            else
                flag=0;
            res[i]+=temp%10;
}
        if(flag)
            res="1"+res;
        return res;
            
    }
};
```

然后来看一下网友题解：
> 解题思路：
> 算法流程： 设定 i，j 两指针分别指向 num1，num2 尾部，模拟人工加法；
> 计算进位： 计算 carry = tmp // 10，代表当前位相加是否产生进位；
> 添加当前位： 计算 tmp = n1 + n2 + carry，并将当前位 tmp % 10 添加至 res 头部；
> 索引溢出处理： 当指针 i或j 走过数字首部后，给 n1，n2 赋值为 00，相当于给 num1，num2 中长度较短的数字前面填 00，以便后续计算。
> 当遍历完 num1，num2 后跳出循环，并根据 carry 值决定是否在头部添加进位 11，最终返回 res 即可。
> 
> 复杂度分析：
> 时间复杂度 O(max(M,N))：其中 M，N 为 2 数字长度，按位遍历一遍数字（以较长的数字为准）；
> 空间复杂度 O(1)：指针与变量使用常数大小空间。
> 
```
class Solution {
    public String addStrings(String num1, String num2) {
        StringBuilder res = new StringBuilder("");
        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;
        while(i >= 0 || j >= 0){
            int n1 = i >= 0 ? num1.charAt(i) - '0' : 0;
            int n2 = j >= 0 ? num2.charAt(j) - '0' : 0;
            int tmp = n1 + n2 + carry;
            carry = tmp / 10;
            res.append(tmp % 10);
            i--; j--;
        }
        if(carry == 1) res.append(1);
        return res.reverse().toString();
    }
}
```
其中比较优雅的就是对于补位的处理，不像我需要直接进行补位，可以在循环过程中就进行补位（通过将值设为0），注意最后有一个reverse的翻转操作。
