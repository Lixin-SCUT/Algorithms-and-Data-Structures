> 请你来实现一个 atoi 函数，使其能将字符串转换成整数。
> 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
> 当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
> 该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。
> 注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
> 在任何情况下，若函数不能进行有效的转换时，请返回 0。
> 
> 说明：
> 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
> 
> 示例 1:
> 输入: "42"
> 输出: 42
> 示例 2:
> 输入: "   -42"
> 输出: -42
> 解释: 第一个非空白字符为 '-', 它是一个负号。
>      我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
> 示例 3:
> 输入: "4193 with words"
> 输出: 4193
> 解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
> 示例 4:
> 输入: "words and 987"
> 输出: 0
> 解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
>      因此无法执行有效的转换。
> 示例 5:
> 输入: "-91283472332"
> 输出: -2147483648
> 解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
>      因此返回 INT_MIN (−2^31) 。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/string-to-integer-atoi
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
> 

这道题其实也蛮奇葩的，主要的要点或者说难点在于
1.去除前面的所有空格
2.判断第一个非空格字符，如果是加号或者符号的话视为符号，如果是数字的话就开始读入，如果是其他字符的话直接全部木大
3.读取数字进行判断，主要是两个判断 一个是溢出判断 一个是非数字字符的判断
我的思路如下：
1.利用string的find搜索语句，先用.find_fisrt_of，再用.find_fisrt_not_of，但是这种方法耗时比较厉害，而且判断条件特别多，需要对返回值进行判断。
2.使用范围for语句，这个比较理想，但是最后发现会导致for内部的判断条件特别多
3.普通for循环语句，使用一个变量i记录，把空格检测-正负号检测-数字检测分离开来。
最终代码
```
class Solution {
public:
    int myAtoi(string str) {
        int res=0;
        bool neg=false;
        int i=0;
        for(;i<str.size();++i)
            if(str[i]!=' ')
                break;    
        if(str[i]!='-'&&str[i]!='+'&&((str[i]-'0'>9)||('0'-str[i]>0)))
            return 0;
        if(str[i]=='-'){
            neg=true;
            ++i;
        }else if(str[i]=='+')
            ++i;
        for(;i<str.size();++i){
            if((str[i]-'0'>9)||('0'-str[i]>0))
                break;
            if(neg){
                if(res>INT_MAX/10||(res==INT_MAX/10&&(str[i]-'0')>=8))
                    return -2147483648;
            }else if(res>INT_MAX/10||(res==INT_MAX/10&&(str[i]-'0')>=7))
                  return 2147483647;
            res=res*10+(str[i]-'0');
        }
        if(neg)
            return -res;
        return res;
    }
};
```
然后想疯狂吐槽leetcode的用例，比如 +-2 这种情况是不能通过的，所以必须修改一下判断条件
然后看一下题解
正则表达式就没啥好说的了，意义不大
然后就是stringstream，说实话虽然很巧妙，但是其实背后是很多库函数的结果，我觉得有点背离题目的原意了，不过还是贴上来吧
```
class Solution {
public:
    int myAtoi(string str) {
        while(*str.begin() == ' ') str.erase(str.begin());
        if(str == "") return 0;
        stringstream ss;
        ss<<str;
        int n;
        ss>>n;
        return n;
    }
};
```
