> 给定一个整数，编写一个函数来判断它是否是 2 的幂次方。
示例 1:
输入: 1
输出: true
解释: 20 = 1
示例 2:
输入: 16
输出: true
解释: 24 = 16
示例 3:
输入: 218
输出: false
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/power-of-two
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题让我想起了除法 把除数不断递增就好 主要难点就是在于除数和商的控制
突然发现一个问题，如果不是2的幂的话肯定最后会变成奇数
第一版代码里面，n%2、n/2和n==1的位置很重要，一开始我把n/=2;放在了n%2前面，导致3就错误了；
然后希望改进一下看看能不能递增2，判断条件很重要
艹艹艹，忘了位这个东西啦！！！很明显按位处理更方便 只需要判断是否大于0和(n&(n-1))是否==0了
因为如果n是二次幂，一定只有最高位是1，也就是1000...，则n-1是0111...如果不是二次幂，这两者的交集一定不等于0
注意注意！！！！一开始写成了n&(n-1)==0; 注意外括号必不可少，否则就等同于 n & ((n-1)==0) ==的优先级可是高于&的 可以类比 n&&n==0

然后就是网友题解：
> 解题思路：
若 n = 2^x
  且 x 为自然数（即 n 为 2 的幂），则一定满足以下条件：
恒有 n & (n - 1) == 0，这是因为：
n 二进制最高位为 1，其余所有位为 0；
n - 1 二进制最高位为 0，其余所有位为 1；
一定满足 n > 0。
因此，通过 n > 0 且 n & (n - 1) == 0 即可判定是否满足 n = 2^x
```
class Solution {
    public boolean isPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }
}
```
