难度：简单
> 给定两个二进制字符串，返回他们的和（用二进制表示）。
> 输入为非空字符串且只包含数字 1 和 0。
> 
> 示例 1:
> 输入: a = "11", b = "1"
> 输出: "100"
> 示例 2:
> 输入: a = "1010", b = "1011"
> 输出: "10101"
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/add-binary
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
> 

本题的难点在于
1.字符串不等长
2.进位问题，可能会导致两次进位和头部进位
我的解题思路
1.对于难点1我没啥好的思路，只能是判断位数差异在前面补0（后来发现网友题解也没有比较好的解决方法）
2.对于进位问题我本来是想用istringstream来解决的，但是stringstream只能从左到右处理，所以并不适合本次题目的要求。所以最后用了bool变量来标记进位问题
3.对于计算问题有两种，一种是利用ASCII码可加特性，另外一种就是异或了，为了可读性我用判断条件完成伪异或。
最终代码：
```
class Solution {
public:
    string addBinary(string a, string b) {
        bool flag=false;
        int lendiff=a.size()-b.size();
        if(lendiff>0)
            while(lendiff)
                b="0"+b,--lendiff;
        else
            while(lendiff)
                a="0"+a,++lendiff;
        for(int i=a.size()-1;i>=0;--i){
            if(a[i]!=b[i])
                a[i]='1';
            else
                a[i]='0';
            if(flag){
                a[i]=('1'-a[i])+'0';
                if(b[i]=='0'&&a[i]=='1')
                    flag=false;
            }else if(b[i]=='1'&&a[i]=='0')
                    flag=true;     
        }
        if(flag)
            a="1"+a;
        return a;
    }
};
```
比较值得注意的主要是进位判断这一段
```
            if(flag){
                a[i]=('1'-a[i])+'0';
                if(b[i]=='0'&&a[i]=='1')
                    flag=false;
            }else if(b[i]=='1'&&a[i]=='0')
                    flag=true;     
        }
```
首先判断上一次的进位
1.如果上一次有进位，那么a就必须先翻转，然后此时只有一种情况不需要继续进位，那就是一开始两者都为0（注意此时a已经变为1了）
2.如果上一次没有进位，此时只有一种情况需要进位，两者同时为1（同样地此时a已经变为0了）

最后看看网友题解：

解题思路：
二进制求和，满二进一

> 首先让两个字符串等长，若不等长，在短的字符串前补零，否则之后的操作会超出索引。
> 然后从后到前遍历所有的位数，同位相加，这里有一个点，用的是字符相加，利用 ASCII 码，字符在内部都用数字表示，我们不需要知道具体数值，但可知 ‘0’-‘0’ = 0， ‘0’+1=‘1’，以此类推 。字符的加减，大小比较，实际上都是内部数字的加减，大小比较
> 判断相加后的字符，若大于等于字符 ‘2’，下一位需要进一
> 第 0 位数的相加在这里是单独处理的，因为它可能涉及到字符的插入（即是否需要在最前面加一位数 ‘1’

```
class Solution {
public:
    string addBinary(string a, string b) {
        int al = a.size();
        int bl = b.size();
        while(al < bl) //让两个字符串等长，若不等长，在短的字符串前补零，否则之后的操作会超出索引
        {
            a = '0' + a;
            ++ al;
        }
        while(al > bl)
        {
            b = '0' + b;
            ++ bl;
        }
        for(int j = a.size() - 1; j > 0; -- j) //从后到前遍历所有的位数，同位相加
        {
            a[j] = a[j] - '0' + b[j];
            if(a[j] >=  '2') //若大于等于字符‘2’，需要进一
            {
                a[j] = (a[j] - '0') % 2 + '0';
                a[j-1] = a[j-1] + 1;
            }
        }
        a[0] = a[0] - '0' + b[0]; //将ab的第0位相加
        if(a[0] >= '2') //若大于等于2，需要进一
        {
            a[0] = (a[0] - '0') % 2 + '0';
            a = '1' + a;
        }
        return a;
    }
};

```

比较巧妙的是利用了ascii码的加法特性，然后将进位融入到判断中，需要注意的是必须把第一位提取出来进行处理。

