```
给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。
示例:
输入: 3
输出:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
```


先寻找一下规律吧
我一开始的想法是通过x和y循环递增来完成这个目的
1.循环结束的标志位添加的值是n^2
2.需要标注好循环的尽头，比如一开始是i=0,j从0到n-1 接着j=n-1，i从0到n-1，所以i和j循环递增，并且需要保存i和j的信息 可以用一个bool指示谁来循环
3.注意循环的尽头是在不断地缩小的，比如n=3的循环尽头分别为y=3 x=3 y=3 x=2 y=2 （注意这里不是下标，正常来说应该是下标）
4.也就是说有n个n n-1个n-1直到最后
5.编程中发现还得考虑++还是-- 那么情况就太复杂了
我觉得还是看题解吧，自己写得太复杂了
题解很巧妙，设置四个独立的边界，这四个边界各自四个循环，循环结束后就各自--，而不是像我那样用n来作循环的尽头
我的问题在于老是希望找到规律，老是想用最少的现有元素解决，但是这样并不一定是最优解，有时候独立的变量更方便。

在循环内是不需要再判断value是否超出了值或者位置不正确，因为四个边界一定最后会缩到某个相交值，最后根本不会进入循环
然后不需要用x和y，只用一个i就好，因为四个边界并非全是n

然后还有很多题解，值得细看一下

题解复现代码
```
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        int value=1,ret=n*n;
        vector<vector<int>> res(n,vector<int>(n,0));
        int left=0,right=n-1,top=0,buttom=n-1;
        while(value<=ret){
            for(int i=left;i<=right;++i) res[top][i]=value++;
                ++top;
            for(int i=top;i<=buttom;++i) res[i][right]=value++;
                --right;
            for(int i=right;i>=left;--i) res[buttom][i]=value++;
                --buttom;
            for(int i=buttom;i>=top;--i) res[i][left]=value++;
                ++left;
        }
        return res;
    }
};
```

然后来看看网友题解
思路：
生成一个 n×n 空矩阵 mat，随后模拟整个向内环绕的填入过程：
定义当前左右上下边界 l,r,t,b，初始值 num = 1，迭代终止值 tar = n * n；
当 num <= tar 时，始终按照 从左到右 从上到下 从右到左 从下到上 填入顺序循环，每次填入后：
执行 num += 1：得到下一个需要填入的数字；
更新边界：例如从左到右填完后，上边界 t += 1，相当于上边界向内缩 1。
使用num <= tar而不是l < r || t < b作为迭代条件，是为了解决当n为奇数时，矩阵中心数字无法在迭代过程中被填充的问题。
最终返回 mat 即可。
```
class Solution {
    public int[][] generateMatrix(int n) {
        int l = 0, r = n - 1, t = 0, b = n - 1;
        int[][] mat = new int[n][n];
        int num = 1, tar = n * n;
        while(num <= tar){
            for(int i = l; i <= r; i++) mat[t][i] = num++; // left to right.
            t++;
            for(int i = t; i <= b; i++) mat[i][r] = num++; // top to bottom.
            r--;
            for(int i = r; i >= l; i--) mat[b][i] = num++; // right to left.
            b--;
            for(int i = b; i >= t; i--) mat[i][l] = num++; // bottom to top.
            l++;
        }
        return mat;
    }
}
```
这里的变量名可以改进一下，然后注意其实是0和n-1，而不是1和n 同时每个变量所处的维度位置和需要递增递减的变量都需要注意一下

另外一种思路
![](file://C:/Users/lab509/Documents/Gridea/post-images/1578195226700.png)
```
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        r, n = [[n**2]], n**2
        while n > 1: n, r = n - len(r), [[*range(n - len(r), n)]] + [*zip(*r[::-1])]
        return r
```
这个就有点抽象了。。。

剩下的方法就和第一个题解大同小异了，而且第一个题解改变更加清晰
