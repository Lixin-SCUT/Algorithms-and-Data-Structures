> 题目描述
地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？

第一想法还是用bool二位矩阵记录是否计算了某个点
然后突然想着说不能直接循环行和列吗？
然后突然发现一个问题，就是不是所有符合条件的格子都能到达的，
比如（100，100）看起来只有1+1=2，但是不可能从（99，99）到达这个点

其实我这个方法只能算递归，而且使用引用的递归，可以看看书中返回非引用的方法
其中对于范围的判断可以交给不同的地方，我这里是借用了visited的size来进行判断，所以无法像书中在check中进行判断
然后利用关系运算符的判断顺序很重要，一定要先判断范围是否越界了，否则下标运算符会报错

```
class Solution {
public:
    int movingCount(int threshold, int rows, int cols)
    {
        int count=0;
        vector<vector<bool>> visited(rows,vector<bool>(cols,false));
        visitCount(threshold,0,0,count,visited);
        return count;
    }
    
    void visitCount(int threshold,int rows,int cols,int &count,vector<vector<bool>> &visited){
        if(rows>=visited.size()
           ||cols>=visited[0].size()
           ||visited[rows][cols]
           ||!CheckThre(threshold,rows,cols))
            return;
        ++count;
        visited[rows][cols]=true;
        visitCount(threshold,rows-1,cols,count,visited);
        visitCount(threshold,rows,cols-1,count,visited);
        visitCount(threshold,rows+1,cols,count,visited);
        visitCount(threshold,rows,cols+1,count,visited);
        return;
    }
    
    bool CheckThre(int threshold,int rows,int cols){
        int res=0;
        while(rows)
            res+=rows%10,rows/=10;
        while(cols)
            res+=cols%10,cols/=10;
        return res<=threshold;
    }
};
```

书本题解：
> 机器人从坐标(0.0)开始移动。当它准备进入坐标为(i,j)的格子时，通过 检查坐标的数位和来判断机器人是否能够进入。如果机器人能够进入坐标 为(i,j)的格子,则再判断它能否进入4个相邻的格子(i-1,j)、(i,j-1)、(i,j+1) 和(i+1,j),因此，我们可以用如下的代码来实现回溯算法：
```
int movingCount(int threshold, int rows, int cols)
{
    if(threshold < 0 || rows <= 0 || cols <= 0)
        return 0;

    bool *visited = new bool[rows * cols];
    for(int i = 0; i < rows * cols; ++i)
        visited[i] = false;

    int count = movingCountCore(threshold, rows, cols,
        0, 0, visited);

    delete[] visited;

    return count;
}

int movingCountCore(int threshold, int rows, int cols, int row,
    int col, bool* visited)
{
    int count = 0;
    if(check(threshold, rows, cols, row, col, visited))
    {
        visited[row * cols + col] = true;

        count = 1 + movingCountCore(threshold, rows, cols,
            row - 1, col, visited)
            + movingCountCore(threshold, rows, cols,
                row, col - 1, visited)
            + movingCountCore(threshold, rows, cols,
                row + 1, col, visited)
            + movingCountCore(threshold, rows, cols,
                row, col + 1, visited);
    }

    return count;
}

bool check(int threshold, int rows, int cols, int row, int col,
    bool* visited)
{
    if(row >= 0 && row < rows && col >= 0 && col < cols
        && getDigitSum(row) + getDigitSum(col) <= threshold
        && !visited[row* cols + col])
        return true;

    return false;
}

int getDigitSum(int number)
{
    int sum = 0;
    while(number > 0)
    {
        sum += number % 10;
        number /= 10;
    }

    return sum;
}
```
