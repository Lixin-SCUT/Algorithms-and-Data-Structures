> 给定一个未经排序的整数数组，找到最长且连续的的递增序列。
> 
> 示例 1:
> 输入: [1,3,5,4,7]
> 输出: 3
> 解释: 最长连续递增序列是 [1,3,5], 长度为3。
> 尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 
> 示例 2:
> 输入: [2,2,2,2,2]
> 输出: 1
> 解释: 最长连续递增序列是 [2], 长度为1。
> 注意：数组长度不会超过10000。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


哈哈哈好久没遇到这么简单的题了，嗯主要就是中间变量的设置吧，比如max和cout的递增时机和赋值时机，这个没什么难度，一次过了，时间复杂度o（n），空间复杂度o（1）
```
class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
        int len=nums.size();
        if(len==0)
            return 0;
        int max=1;
        int cout=1;
        for(int i=1;i<len;++i){
            if(nums[i]>nums[i-1])
                ++cout;
            else 
                cout=1;
            max=max>cout?max:cout;
        }
        return max;
    }
};
```
官方题解：
> 解决方法：滑动窗口
> 算法：
> 每个（连续）增加的子序列是不相交的，并且每当 nums[i-1]>=nums[i] 时，每个此类子序列的边界都会出现。当它这样做时，它标志着在 nums[i] 处开始一个新的递增子序列，我们将这样的 i 存储在变量 anchor 中。
> 例如，如果 nums=[7，8，9，1，2，3]，那么 anchor 从 0 开始（nums[anchor]=7），并再次设置为 anchor=3（nums[anchor]=1）。无论 anchor 的值如何，我们都会记录 i-anchor+1 的候选答案、子数组 nums[anchor]、nums[anchor+1]、…、nums[i] 的长度，并且我们的答案会得到适当的更新。
```
Java
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        int ans = 0, anchor = 0;
        for (int i = 0; i < nums.length; ++i) {
            if (i > 0 && nums[i-1] >= nums[i]) anchor = i;
            ans = Math.max(ans, i - anchor + 1);
        }
        return ans;
    }
}
```
> 复杂度分析
> 时间复杂度：O(N)，其中 N 是 nums 的长度。我们通过 nums 执行一个循环。
> 空间复杂度：O(1)，anchor 和 ans 使用了常数级空间。

其实官方题解是更加简洁的，直接判定每一个存在的转折点anchor，然后将当前位置减去anchor再进行判断存进ans里面。
