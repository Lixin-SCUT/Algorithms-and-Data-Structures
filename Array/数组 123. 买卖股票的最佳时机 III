原题如下：
> 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
> 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
> 注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
> 
> 示例 1:
> 输入: [3,3,5,0,0,3,1,4]
> 输出: 6
> 解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
>      随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
> 示例 2:
> 输入: [1,2,3,4,5]
> 输出: 4
> 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
>      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
>      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
> 示例 3:
> 输入: [7,6,4,3,1] 
> 输出: 0 
> 解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
> 

这道题的难度远远大于前面两道的难度，我尝试了从前面累加和后面累加都无效，主要是受到最大交易次数2的影响，以及存在着特殊例子如{ 1,2,4,2,5,7,2,4,9,0 }这种需要把两次购买合并成一次购买的情况，很明显感觉到自己的思路有缺陷，一开始给出的未能通过的代码如下：
```
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len=prices.size();
        if(len==0||len==1){
            return 0;
        }
        int profit=0 ;
        int profit1=0,profit2=0;
        for(int i=0;i<len-1;++i){
            if(prices[i+1]-prices[i]>=0)
                profit +=prices[i+1]-prices[i];
            if(prices[i+1]-prices[i]<0||i==len-2){
                if(profit>profit1)
                    profit2=profit1,profit1=profit;
                else if(profit>profit2)
                    profit2=profit;
                profit=0;
            }
        }
        return profit1+profit2;
    }
};
```

这一次没有官方题解，不过有一个比较精彩的个人题解，关于动态规划的，总结了所有的股票买卖问题的统一解题思路，我感觉还不错，不过篇幅过长，而且涉及后面多道题目，所以单独给出一篇文章吧
符合动态规划的代码如下（注意，非最终代码，仍有很大的优化空间）：
```
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        const int n = prices.size();
        if(n==0||n==1)
            return 0;
	const int max_k = 2;
	vector<vector<vector<int>>> dp(n, vector<vector<int>>(max_k+1, vector<int>(2,0)));
	for (int i = 0; i < n; i++) {
		for (int k = 1; k <=2 ; k++) {
			if (i - 1 == -1) { 
				dp[0][k][0] = 0 ;
				dp[0][k][1] = - prices[0];
			}
			else {
				dp[i][k][0] = dp[i - 1][k][0]>dp[i - 1][k][1] + prices[i] ? dp[i - 1][k][0] : dp[i - 1][k][1] + prices[i];
				dp[i][k][1] = dp[i - 1][k][1]>dp[i - 1][k - 1][0] - prices[i] ? dp[i - 1][k][1] : dp[i - 1][k - 1][0] - prices[i];
			}
		}
	}
	return dp[n - 1][max_k][0];
    }
};
```
优化版本，因为k比较小，完全可以直接穷举出来
```
	vector<int> prices{ 1,2,4,2,5,7,2,4,9,0 };
	const int n = prices.size();
	const int max_k = 2;
	int dp_i10 = 0, dp_i11 = -9999999;
	int dp_i20 = 0, dp_i21 = -9999999;

	for (int i = 0; i < n; i++) {
		
			dp_i20 = dp_i20>dp_i21 + prices[i] ? dp_i20:dp_i21 + prices[i];
			dp_i21 = dp_i21>dp_i10 - prices[i] ? dp_i21:dp_i10 - prices[i];
			dp_i10 = dp_i10>dp_i11 + prices[i] ? dp_i10:dp_i11 + prices[i];
			dp_i11 = dp_i11>-prices[i] ? dp_i11:-prices[i];
			
		}
	

	return  dp_i20;
```

感想：这道题可是足足搞了我两天，期间也算是有不少的事吧，特别是被原题解中有些不太恰当的地方误导了，足足花了一个上午的手写仿真和代码验证才纠正过来，同时这个误导也使得我中途好几次怀疑自我，没有坚持看下来，但是所幸最后还是坚持了下来了，还是继续加油吧。
