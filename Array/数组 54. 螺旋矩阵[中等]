> 给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。
示例 1:
输入:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
输出: [1,2,3,6,9,8,7,4,5]
示例 2:
输入:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
输出: [1,2,3,4,8,12,11,10,9,5,6,7]
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/spiral-matrix
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

可以参考螺旋矩阵II
设置四个边界 left right top bottom 

实现中需要注意的点：
1.不小心把bottom和right的赋值搞反了。。。
2.和n*n的矩阵不同，这里必须每个循环都判断&&res.size()<len，否则[[1,2,3,4],[5,6,7,8],[9,10,11,12]]最后会出现[1,2,3,4,8,12,11,10,9,5,6,7,6]那个6的情况（是正确的）

```
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> res;
        if(matrix.empty()) return res;
        int top=0,bottom=matrix.size()-1,left=0,right=matrix[0].size()-1; 
        int len=(bottom+1)*(right+1);
        while(res.size()<len){
            for(int i=left;i<=right&&res.size()<len;++i)
                res.push_back(matrix[top][i]);
            ++top;
            for(int i=top;i<=bottom&&res.size()<len;++i)
                res.push_back(matrix[i][right]);
            --right;
            for(int i=right;i>=left&&res.size()<len;--i)
                res.push_back(matrix[bottom][i]);
            --bottom;
            for(int i=bottom;i>=top&&res.size()<len;--i)
                res.push_back(matrix[i][left]);
            ++left;
        }
        return res;
    }
};
```

网友题解：
> 这里的方法不需要记录已经走过的路径，所以执行用时和内存消耗都相对较小
首先设定上下左右边界
其次向右移动到最右，此时第一行因为已经使用过了，可以将其从图中删去，体现在代码中就是重新定义上边界
判断若重新定义后，上下边界交错，表明螺旋矩阵遍历结束，跳出循环，返回答案
若上下边界不交错，则遍历还未结束，接着向下向左向上移动，操作过程与第一，二步同理
不断循环以上步骤，直到某两条边界交错，跳出循环，返回答案
```
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector <int> ans;
        if(matrix.empty()) return ans; //若数组为空，直接返回答案
        int u = 0; //赋值上下左右边界
        int d = matrix.size() - 1;
        int l = 0;
        int r = matrix[0].size() - 1;
        while(true)
        {
            for(int i = l; i <= r; ++i) ans.push_back(matrix[u][i]); //向右移动直到最右
            if(++ u > d) break; //重新设定上边界，若上边界大于下边界，则遍历遍历完成，下同
            for(int i = u; i <= d; ++i) ans.push_back(matrix[i][r]); //向下
            if(-- r < l) break; //重新设定有边界
            for(int i = r; i >= l; --i) ans.push_back(matrix[d][i]); //向左
            if(-- d < u) break; //重新设定下边界
            for(int i = d; i >= u; --i) ans.push_back(matrix[i][l]); //向上
            if(++ l > r) break; //重新设定左边界
        }
        return ans;
    }
};
```
> 时间复杂度： O(N)，其中 N 是输入矩阵所有元素的个数。因为我们将矩阵中的每个元素都添加进答案里。
空间复杂度： O(N)，需要矩阵 ans 存储信息。

这个就是我那种的变种，不过我使用了size来判断，他使用了边界条件了判断

