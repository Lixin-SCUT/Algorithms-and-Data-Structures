> 给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。
注意：答案中不可以包含重复的三元组。
示例：
给定数组 nums = [-1, 0, 1, 2, -1, -4]，
满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/3sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

【未做出】
可以利用16.最接近的三数之和 来做，不过这次target是0，而且必须等于target
1.先排序 2.指定固定值 3.遍历 4.可作针对性优化

实现过程中遇到的问题：
1.不能重复。。。所以想改用unordered_set,但是很离奇地不能用它的迭代器去初始化vector，然后改用set，结果超时了
2.于是查看题解，发现是重复元素的问题
3.添加条件i>0&&nums[i]==nums[i-1])，因为我们排好序了，所以再添加nums[i]>0的情况，大于0的话他后面数也铁定大于0，不可能和为0

```
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int len=nums.size();
        quicksort(nums,0,len-1);
        set<vector<int>> res;
        for(int i=0;i<len;++i){
            if((i>0&&nums[i]==nums[i-1])||nums[i]>0)
                continue;
            
            for(int j=i+1,k=len-1;j<k;){
                int sum=nums[i]+nums[j]+nums[k];
                if(sum==0)
                    res.insert(vector<int>({nums[i],nums[j],nums[k]}));   
                if(sum>0)
                    --k;
                else
                    ++j;
            }
        }
        return vector<vector<int>>(res.begin(),res.end());      
    }
    
    void quicksort(vector<int> &nums,int beg,int end){
        if(beg<end){
            int mid=partition(nums,beg,end);
            quicksort(nums,beg,mid-1);
            quicksort(nums,mid+1,end);
        }
    }
    
    int partition(vector<int> &nums,int beg,int end){
        int pivotkey=nums[beg];
        while(beg<end){
            while(beg<end&&pivotkey<=nums[end])
                --end;
            nums[beg]=nums[end];
            while(beg<end&&pivotkey>=nums[beg])
                ++beg;
            nums[end]=nums[beg];
        }
        nums[beg]=pivotkey;
        return beg;
    }
};
```

然后来看看网友题解：
> 解题方案
思路
标签：数组遍历
首先对数组进行排序，排序后固定一个数 nums[i]，再使用左右指针指向 nums[i]后面的两端，数字分别为 nums[L] 和 nums[R]，计算三个数的和sum 判断是否满足为 00，满足则添加进结果集
如果 nums[i]大于 0，则三数之和必然无法等于 0，结束循环
如果 nums[i] == nums[i−1]，则说明该数字重复，会导致结果重复，所以应该跳过
当 sum == 0 时，nums[L] == nums[L+1] 则会导致结果重复，应该跳过，L++
当 sum== 0 时，nums[R] == nums[R−1] 则会导致结果重复，应该跳过，R--
时间复杂度：O(n^2)，n 为数组长度
代码
```
class Solution {
    public static List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList();
        int len = nums.length;
        if(nums == null || len < 3) return ans;
        Arrays.sort(nums); // 排序
        for (int i = 0; i < len ; i++) {
            if(nums[i] > 0) break; // 如果当前数字大于0，则三数之和一定大于0，所以结束循环
            if(i > 0 && nums[i] == nums[i-1]) continue; // 去重
            int L = i+1;
            int R = len-1;
            while(L < R){
                int sum = nums[i] + nums[L] + nums[R];
                if(sum == 0){
                    ans.add(Arrays.asList(nums[i],nums[L],nums[R]));
                    while (L<R && nums[L] == nums[L+1]) L++; // 去重
                    while (L<R && nums[R] == nums[R-1]) R--; // 去重
                    L++;
                    R--;
                }
                else if (sum < 0) L++;
                else if (sum > 0) R--;
            }
        }        
        return ans;
    }
}
```
