> 题目如下：
> 你正在和你的朋友玩 猜数字（Bulls and Cows）游戏：你写下一个数字让你的朋友猜。每次他猜测后，你给他一个提示，告诉他有多少位数字和确切位置都猜对了（称为“Bulls”, 公牛），有多少位数字猜对了但是位置不对（称为“Cows”, 奶牛）。你的朋友将会根据提示继续猜，直到猜出秘密数字。
> 请写出一个根据秘密数字和朋友的猜测数返回提示的函数，用 A 表示公牛，用 B 表示奶牛。
> 请注意秘密数字和朋友的猜测数都可能含有重复数字。
> 
> 示例 1:
> 输入: secret = "1807", guess = "7810"
> 输出: "1A3B"
> 解释: 1 公牛和 3 奶牛。公牛是 8，奶牛是 0, 1 和 7。
> 示例 2:
> 输入: secret = "1123", guess = "0111"
> 输出: "1A1B"
> 解释: 朋友猜测数中的第一个 1 是公牛，第二个或第三个 1 可被视为奶牛。
> 说明: 你可以假设秘密数字和朋友的猜测数都只包含数字，并且它们的长度永远相等。

题目非常拗口....完全就是美式风格，一种为了出题而强行出题的感觉，而且本土化做得不够，公牛奶牛bullscows完全和题目对应不上，这是要扣钱的啊！
还是先说一下思路吧
我一开始其实并没有太好的想法，然后遍历对比相等的数量，最后再遍历对比，时间复杂度为o(n^2),空间复杂度为o(1),比较笨的方法，先把时间复杂度降下来，又发现空间复杂度上去了，所以还是老老实实看题解吧

这一次没有官方题解，依旧是网友题解：
> 方法一：我的思路很简单，先遍历一次字符串，如果两个字符串当前索引字符相同，则将"公牛数"加一；否则，将秘密字符串的字符放入HashMap中，进行次数统计，将猜的字符放入一个Array中。
> 第一次遍历完毕后进行第二次遍历，此时的array中是猜的字符串中没有对上号的字符，依次获取array中的字符，看HashMap中是否有该字符，如果有，则让"母牛数"加一，然后将该字符的次数减一，如果该字符在Map中的次数为零则清除。
> 方法一代码如下：
> 
>     /*
>         Time complexity: O(n)
>         Space complexity: O(n)
>      */
>     public String getHint(String secret, String guess) {
>         int aCount = 0;
>         int bCount = 0;
>         ArrayList<Character> list = new ArrayList<>();
>         HashMap<Character, Integer> map = new HashMap<>();
>         for (int i = 0; i < secret.length(); i++) {
>             char temp = secret.charAt(i);
>             if (temp == guess.charAt(i))
>                 aCount++;
>             else {
>                 list.add(guess.charAt(i));
>                 if (map.containsKey(temp))
>                     map.put(temp, map.get(temp) + 1);
>                 else
>                     map.put(temp, 1);
>             }
>         }
>         for (Character c : list) {
>             if (map.containsKey(c)) {
>                 bCount++;
>                 map.put(c, map.get(c) - 1);
>                 if (map.get(c) == 0)
>                     map.remove(c);
>             }
>         }
>         return aCount + "A" + bCount + "B";
>     }
> 方法二：由于猜的数字只包括0~9这九位数字，因此我们可以定义两个10位数组来存储某个数出现的次数，索引代表数值，索引处的值代表次数。
> 思路如下：先遍历一次字符串，如果字符相等，公牛数加一，否则，将它们对应的数组中的次数加一。
> 第一次遍历完毕后可以得到两个数组，分别对应了两个字符串中某一个数出现的次数(匹配的字符不算)，然后我们可以再进行一次遍历，两个数组每一个索引处的最小值相加即可得到母牛数。
> 代码如下：
> 
>     /*
>         Time complexity: O(n)
>         Space complexity: O(n)
>      */
>     public String getHint(String secret, String guess) {
>         int aCount = 0;     // 公牛数
>         int bCount = 0;     // 母牛数
>         //int mapS[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
>         //int mapG[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
>         int[] mapS[] = new int[10];
>         int[] mapG[] = new int[10];
> 
>         for (int i = 0; i < secret.length(); i++) {
>             char temp = secret.charAt(i);
>             if (temp == guess.charAt(i))
>                 aCount++;
>             else {
>                 mapS[temp - '0']++;
>                 mapG[guess.charAt(i) - '0']++;
>             }
>         }
>         for (int i = 0; i < 10; i++) {
>             bCount += Math.min(mapG[i], mapS[i]);
>         }
>         return aCount + "A" + bCount + "B";
>     }
> 
> 作者：janvysun
> 链接：https://leetcode-cn.com/problems/bulls-and-cows/solution/javaliang-chong-fang-fa-by-janvysun/
> 来源：力扣（LeetCode）
> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
> 	
> 	"Bulls"：遍历两个字符串，相同位置相同字符的个数
> 
> "Cows"：排出完全猜对的数字，统计secret中剩余数字和出现的次数，再比对guess中出现相同数的次数
> 
> public String getHint(String secret, String guess) {
>     int bulls = 0, cows = 0;
>     int[] dict = new int[10];
>     //计数
>     for (int i = 0; i < secret.length(); i++) {
>         dict[secret.charAt(i) - '0']++;
>     }
> 
>     for (int i = 0; i < guess.length(); i++) {
>         if (guess.charAt(i) == secret.charAt(i)) {
>             bulls++;
>             dict[secret.charAt(i) - '0']--;
>             if (dict[secret.charAt(i) - '0'] < 0) cows--;
>         } else if (dict[guess.charAt(i) - '0'] > 0) {
>             cows++;
>             dict[guess.charAt(i) - '0']--;
>         }
>     }
> 
>     return bulls + "A" + cows + "B";
> }
> 
> 作者：zxy0917
> 链接：https://leetcode-cn.com/problems/bulls-and-cows/solution/java-shi-yong-zi-dian-shu-zu-by-zxy0917/
> 来源：力扣（LeetCode）
> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
	
	
	
上面两种方法其实我都不是特别满意，首先是不太希望用hash-map，用了确实方便很多，但是还是希望用基础的数组知识解决。上面的方法还是给我很多启发的，首先是空间复杂度可以压低到长度为10的数组，反正就是个数字（0-9），然后是string的数字转化为阿拉伯数字（secret.charAt(i) - '0'），对bulls和cows的处理：

下面是最终代码：
```
class Solution {
public:
    string getHint(string secret, string guess) {
	int Bulls = 0, Cows = 0;
	vector<int> v(10, 0);
	for (auto i : secret)
			++v[i - '0'];
	for (int i = 0; i<guess.size(); ++i)
		if (guess[i] == secret[i]) {
			++Bulls;
			--v[guess[i] - '0'];
			guess[i] = 'a';
		}
	for (int i = 0; i<guess.size(); ++i)
		if (guess[i] != 'a')
			if(v[guess[i] - '0'] > 0) {
			--v[guess[i] - '0'];
			++Cows;
		}
        string b = to_string(Bulls)+'A'+to_string(Cows)+'B';
        return b;
    }
};
```
中间遇到一些坑：
1.string的数字（实际上是ASCII编码）怎么转化为阿拉伯数字呢？上面的题解给我的思路就是guess[i] - '0'，挺不错的，查了很多方法都比较复杂，这个挺好的。
2.相等值的干扰，本来以为相等值最好处理，结果是最难处理的干扰因素，前面的提交错误都是Bulls造成Cows值错误，题解中的处理比较复杂，我是直接暴力地把它变成'a'然后再加判断条件，最后通过了。

