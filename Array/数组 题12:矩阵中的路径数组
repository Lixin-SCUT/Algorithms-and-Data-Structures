> 题目描述
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。

这道题在牛客网上挺恶心的，char \*是一位数组，它把矩阵首尾相连了。。。我强行化为了二维vector

```
class Solution {
public:
    bool hasPath(char* matrix, int rows, int cols, char* str){
        vector<vector<char>> matrixv(rows,vector<char>(cols,' '));
        for(int i=0;i<rows;++i)
            for(int j=0;j<cols;++j)
                matrixv[i][j]=matrix[i*cols+j];
        vector<vector<bool>> bool_matrix(rows,vector<bool>(cols,true));
        for(int i=0;i<rows;++i)
            for(int j=0;j<cols;++j)
                if(FindPath(matrixv,i,j,str,0,bool_matrix))
                   return true;
        return false;
    }

    bool FindPath(vector<vector<char>> &matrix,int rows,int cols,char *str,int count,vector<vector<bool>> &bool_matrix){
        if(matrix[rows][cols]!=str[count])
            return false;
        if(count==strlen(str)-1)
            return true;
        bool_matrix[rows][cols]=false;
        if(rows>0&&bool_matrix[rows-1][cols]&&FindPath(matrix,rows-1,cols,str,count+1,bool_matrix))
           return true;
        if(cols>0&&bool_matrix[rows][cols-1]&&FindPath(matrix,rows,cols-1,str,count+1,bool_matrix))
           return true;
        if(rows<matrix.size()-1&&bool_matrix[rows+1][cols]&&FindPath(matrix,rows+1,cols,str,count+1,bool_matrix))
           return true;
        if(cols<matrix[0].size()-1&&bool_matrix[rows][cols+1]&&FindPath(matrix,rows,cols+1,str,count+1,bool_matrix))
           return true;
        bool_matrix[rows][cols]=true;
        return false;
    }
};
```

书本题解：
> 由于回溯法的递归特性，路径可以被看成一个栈。当在矩阵中定位了路径中前n个字符的位置之后，在与第n个字符对应的格子的周围都没有 找到第n+1个字符，这时候只好在路径上回到第n-1个字符，重新定位第n个字符。
由于路径不能重复进入矩阵的格子，所以还需要定义和字符矩阵大小一样的布尔值矩阵，用来标识路径是否己经进入了每个格子。
```
bool hasPathCore(const char* matrix, int rows, int cols, int row, int col, const char* str, int& pathLength, bool* visited);

bool hasPath(const char* matrix, int rows, int cols, const char* str)
{
    if(matrix == nullptr || rows < 1 || cols < 1 || str == nullptr)
        return false;

    bool *visited = new bool[rows * cols];
    memset(visited, 0, rows * cols);

    int pathLength = 0;
    for(int row = 0; row < rows; ++row)
    {
        for(int col = 0; col < cols; ++col)
        {
            if(hasPathCore(matrix, rows, cols, row, col, str,
                pathLength, visited))
            {
                return true;
            }
        }
    }

    delete[] visited;

    return false;
}

bool hasPathCore(const char* matrix, int rows, int cols, int row,
    int col, const char* str, int& pathLength, bool* visited)
{
    if(str[pathLength] == '\0')
        return true;

    bool hasPath = false;
    if(row >= 0 && row < rows && col >= 0 && col < cols
        && matrix[row * cols + col] == str[pathLength]
        && !visited[row * cols + col])
    {
        ++pathLength;
        visited[row * cols + col] = true;

        hasPath = hasPathCore(matrix, rows, cols, row, col - 1,
            str, pathLength, visited)
            || hasPathCore(matrix, rows, cols, row - 1, col,
                str, pathLength, visited)
            || hasPathCore(matrix, rows, cols, row, col + 1,
                str, pathLength, visited)
            || hasPathCore(matrix, rows, cols, row + 1, col,
                str, pathLength, visited);

        if(!hasPath)
        {
            --pathLength;
            visited[row * cols + col] = false;
        }
    }

    return hasPath;
}
```
> 当矩阵中坐标为(row, col)的格子和路径字符串中下标为pathLength的 字符一样时，从 4 个相邻的格子(row, col-1)、(row-1, col)、 (row, col+1)和 (row+1, col)中去定位路径字符串中下标为pathLength+1的字符。
如果4个相邻的格子都没有匹配字符串中下标为pathLength+1的字符， 则表明当前路径字符串中下标为pathLength的字符在矩阵中的定位不正确， 我们需要回到前一个字符(pathLength-1),然后重新定位。
一直重复这个过程，直到路径字符串上的所有字符都在矩阵中找到合 适的位置(此时 str[pathLength]=='\0')。

书中的代码比我简介很多，特别是把递归结果利用或逻辑运算符||来组合，不像我分成了很多判断语句，但是相应地就必须把判断条件放在前面了
