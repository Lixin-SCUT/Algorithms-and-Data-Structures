文 章
菜 单
标 签
主 题
配 置
系 统
v 0.8.2
搜索文章

标题
状态
创建时间

 数组 274. H指数	已发布	2019-09-10 11:28:18

 C++ primer 第四章 笔记+习题 4.6-4.11	已发布	2019-09-10 07:51:59

 数组 134.加油站	已发布	2019-09-09 22:50:55

 C++ primer 第四章 笔记+习题 4.1-4.5	已发布	2019-09-09 19:50:55

 数组 299 猜数字游戏	已发布	2019-09-09 11:17:52

 数组 41. 缺失的第一个正数[困难]	已发布	2019-09-08 21:24:52

 数组 189.旋转数组	已发布	2019-09-06 21:27:51

 C++ primer 第三章 笔记+习题 3.5-3.6	已发布	2019-09-06 15:17:15

 关于leetcode的小感想	已发布	2019-09-05 20:25:03

 数组 80. 删除排序数组中的重复项 II	已发布	2019-09-05 19:42:44
你可以插入单独行的 <!-- more --> 为摘要分隔标识（此行之前内容为摘要）
数组 274. H指数
> 题目如下：
> 给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 h 指数。
> h 指数的定义: “h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （N 篇论文中）至多有 h 篇论文分别被引用了至少 h 次。（其余的 N - h 篇论文每篇被引用次数不多于 h 次。）”
> 
> 示例:
> 输入: citations = [3,0,6,1,5]
> 输出: 3 
> 解释: 给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。
>      由于研究者有 3 篇论文每篇至少被引用了 3 次，其余两篇论文每篇被引用不多于 3 次，所以她的 h 指数是 3。
> 说明: 如果 h 有多种可能的值，h 指数是其中最大的那个
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/h-index
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
​
题目还是很拗口啊，评论里很多人吐槽，但是这个看了例子还是比较好理解的，就是有两个数，一个是被引用数reference，一个是符合被引用数的文章数量number，两者是此消彼长的，而且最后只会有一个解。
一开始的想法是没一个reference都遍历一次数组，根据reference的值和number的值的差异来判断是否达到了临界值或者超过了临界值，这个临界值就是所求。
最后的代码如下：
```
class Solution {
public:
    int hIndex(vector<int>& citations) {
        
        if(!citations.size())
            return 0;
        int h=0;
        int h_refer=0,h_num=0;
        do{
            h_refer++;
            h_num=0;
            for(auto i:citations)
                 if (i>=h_refer)
                    h_num++;
            if(h_refer<=h_num)
                ++h;
        }while(h_refer<h_num);
            return h;
    }
};
```
一次通过啦！！！愉快的一天！！！
但是其实中途还是有点波折的，因为感觉do while语句比较适合这个情况（很难一开始就判断循环条件），然后就是h递增的判断，因为很容易越过临界点，但是经过一定的考虑和修改后顺利地一次过了。
然后还有一些缺陷就是运行时间太长，时间复杂度为o（h\*n）
然后看一下官方题解：
> 方法一：排序
> 分析
> 我们想象一个直方图，其中 xx 轴表示文章，yy 轴表示每篇文章的引用次数。如果将这些文章按照引用次数降序排序并在直方图上进行表示，那么直方图上的最大的正方形的边长 hh 就是我们所要求的 hh。
> 算法
> 首先我们将引用次数降序排序，在排完序的数组citations 中，如果icitations[i]>i，那么说明第 0 到 i 篇论文都有至少 i+1 次引用。因此我们只要找到最大的 ii满足citations[i]>i，那么 h 指数即为i+1。
> 找到最大的 ii的方法有很多，可以对数组进行线性扫描，也可以使用二分查找。由于排序的时间复杂度已经为 O(nlogn)，因此无论是线性扫描O(n) 还是二分查找O(logn)，都不会改变算法的总复杂度。
> 复杂度分析
> 时间复杂度：O(nlogn)，即为排序的时间复杂度。
> 空间复杂度：O(1)O(1)。大部分语言的内置 sort 函数使用堆排序，它只需要 O(1)O(1) 的额外空间。
​
方法一是比较简单暴力的排序，时间复杂度下限O(nlogn)，所以来看一下方法二：
> 方法二：计数
> 分析
> 基于比较的排序算法存在时间复杂度下界 O(n\log n)O(nlogn)，如果要得到时间复杂度更低的算法，就必须考虑不基于比较的排序。
> 算法 
> 方法一中，我们通过降序排序得到了 h 指数，然而，所有基于比较的排序算法，例如堆排序，合并排序和快速排序，都存在时间复杂度下界O(nlogn)。要得到时间复杂度更低的算法. 可以考虑最常用的不基于比较的排序，计数排序。
> 然而，论文的引用次数可能会非常多，这个数值很可能会超过论文的总数 n，因此使用计数排序是非常不合算的（会超出空间限制）。在这道题中，我们可以通过一个不难发现的结论来让计数排序变得有用，即：
> 如果一篇文章的引用次数超过论文的总数 nn，那么将它的引用次数降低为 n 也不会改变 h 指数的值。
> 由于 h指数一定小于等于 n，因此这样做是正确的。在直方图中，将所有超过 y 轴值大于 n 的变为n  等价于去掉 y>n 的整个区域。
> 从直方图中可以更明显地看出结论的正确性，将 y>n 的区域去除，并不会影响到最大的正方形，也就不会影响到 h 指数。
> 我们用一个例子来说明如何使用计数排序得到 h 指数。首先，引用次数如下所示：
> citations=[1,3,2,3,100]
> 将所有大于 n=5n=5 的引用次数变为 nn，得到：
> citations=[1,3,2,3,5]
> 计数排序得到的结果如下：
> k        0  1 2 3 4 5
> count 0 1 1 2 0 1
> sk    5 5 4 3 1 1
> 其中 s_k  表示至少有 k 次引用的论文数量，在表中即为在它之后的列（包括本身）的 count 一行的和。根据定义，最大的满足k≤s 的 k 即为所求的 h。在表中，这个 k 为 3，因此 h 指数为 3。
```
Java
public class Solution {
    public int hIndex(int[] citations) {
        int n = citations.length;
        int[] papers = new int[n + 1];
        // 计数
        for (int c: citations)
            papers[Math.min(n, c)]++;
        // 找出最大的 k
        int k = n;
        for (int s = papers[n]; k > s; s += papers[k])
            k--;
        return k;
    }
}
```
> 复杂度分析
> 时间复杂度：O(n)。在计数时，我们仅需要遍历citations 数组一次，因此时间复杂度为 O(n)。在找出最大的 k 时，我们最多需要遍历计数的数组一次，而计数的数组的长度为O(n)，因此这一步的时间复杂度为O(n)，即总的时间复杂度为 O(n)。
> 空间复杂度：O(n)。我们需要使用 O(n) 的空间来存放计数的结果。
​
方法而是利用空间换取时间，主要是（1）把大于数组范围的值置为和数组一致（2）记录大于某个引用次数的文章数（3）从大到小搜索临界值
最后的代码
```
class Solution {
public:
    int hIndex(vector<int>& citations) {
        if(!citations.size())
            return 0;
        int len = citations.size();
        vector<int> num(len,0);
        for(auto i:citations)
            if(i)
                if(i>len)
                    ++num[len-1];
                else
                    ++num[i-1];
        for(int i=num.size()-1,sum=0;i>=0;--i){
            sum+=num[i];
            if(i<=sum-1)
                return i+1;
        }
        return 0;
    }
};
```
​
​
120177394:5
写作于 Gridea
保存于 20:09:23
文章设置

URL
shu-zu-274-h-zhi-shu
标 签
创建时间
封面图
列表中隐藏
