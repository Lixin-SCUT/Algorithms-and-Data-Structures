> 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
> 
> 示例 1:
> 
> 输入: [1,2,3,4,5,6,7] 和 k = 3
> 输出: [5,6,7,1,2,3,4]
> 解释:
> 向右旋转 1 步: [7,1,2,3,4,5,6]
> 向右旋转 2 步: [6,7,1,2,3,4,5]
> 向右旋转 3 步: [5,6,7,1,2,3,4]
> 
> 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的 原地 算法。

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/rotate-array
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

按照昨天学习到的思想，对题目进行分解：
首先是特殊情况：k == 0 || nums.size() == 0 || nums.size() == 1 || nums.size() == k，直接白给return
然后是两种情况
第一种 k大于size 第二种k小于size
其实第一种可以通过k%size转化为第二种（发现自己居然忘了c++的取余数为%）
但是最后被旋转原地移动难住了，最后只能暴力出奇迹，一位一位地移动了：

```
class Solution {
	public:
		void rotate(vector<int>& nums, int k) {
			if (k == 0 || nums.size() == 0 || nums.size() == 1 || nums.size() == k)
				return;
			else if (nums.size()<k)
				k = k%nums.size();
			while (k>0) {
				int temp = nums[nums.size() - 1];
				for (int j = nums.size() - 1; j>0; --j)
					nums[j] = nums[j - 1];
				nums[0] = temp;
				--k;
			}
			return;
		}
	};
```
最后提交居然超过了时间限制？
一看题解，what？第一个就是暴力解啊？？？我的还是做了情况优化的，把Java代码转化为C++，还是白给了。。。C++无人权啊！！！
9.8补充：
官方题解
第一个就是暴力题解了，只是c++铁定会超时，就算进行情况优化和把官方java题解照搬过来也是全部木大，后来才发现leetcode会对c++严格很多

题解二：
方法 2：使用额外的数组
算法
我们可以用一个额外的数组来将每个元素放到正确的位置上，也就是原本数组里下标为 ii 的我们把它放到 (i+k)%数组长度(i+k)%数组长度 的位置。然后把新的数组拷贝到原数组中。
Java
public class Solution {
public void rotate(int[] nums, int k) {
int[] a = new int[nums.length];
for (int i = 0; i < nums.length; i++) {
a[(i + k) % nums.length] = nums[i];
}
for (int i = 0; i < nums.length; i++) {
nums[i] = a[i];
}
}
}
复杂度分析
时间复杂度： O(n) 。将数字放到新的数组中需要一遍遍历，另一边来把新数组的元素拷贝回原数组。
空间复杂度： O(n)。另一个数组需要原数组长度的空间。

题解二比较简单，但是空间复杂度比较高，在常数空间复杂度的情况下并不适用

题解三：
方法 3：使用环状替换
算法
如果我们直接把每一个数字放到它最后的位置，但这样的后果是遗失原来的元素。因此，我们需要把被替换的数字保存在变量 temp 里面。然后，我们将被替换数字（temp）放到它正确的位置，并继续这个过程 n 次， n 是数组的长度。这是因为我们需要将数组里所有的元素都移动。但是，这种方法可能会有个问题，如果 n%k==0，其中 k=k%n （因为如果 k 大于 n ，移动 k 次实际上相当于移动 k%n 次）。这种情况下，我们会发现在没有遍历所有数字的情况下回到出发数字。此时，我们应该从下一个数字开始再重复相同的过程。

现在，我们看看上面方法的证明。假设，数组里我们有 n 个元素并且 k 是要求移动的次数。更进一步，假设 n%k=0 。第一轮中，所有移动数字的下标 i满足 i%k0。这是因为我们每跳 k 步，我们只会到达相距为 k 个位置下标的数。每一轮，我们都会移动n/k个元素。下一轮中，我们会移动满足 i%k1的位置的数。这样的轮次会一直持续到我们再次遇到i%k==0 的地方为止，此时 i=k 。此时在正确位置上的数字共有k*n/k =n 个。因此所有数字都在正确位置上。
让我们看一下接下来的例子，以更好地说明这个过程：
nums: [1, 2, 3, 4, 5, 6]
k: 2
Java
public class Solution {
public void rotate(int[] nums, int k) {
k = k % nums.length;
int count = 0;
for (int start = 0; count < nums.length; start++) {
int current = start;
int prev = nums[start];
do {
int next = (current + k) % nums.length;
int temp = nums[next];
nums[next] = prev;
prev = temp;
current = next;
count++;
} while (start != current);
}
}
}
复杂度分析

时间复杂度：O(n) 。只遍历了每个元素一次。
空间复杂度：O(1) 。使用了常数个额外空间。

第三个就是我一开始想到的操作了，但是还是算是比较复杂，我更喜欢第四个：

方法 4：使用反转
算法
这个方法基于这个事实：当我们旋转数组 k 次， k%n 个尾部元素会被移动到头部，剩下的元素会被向后移动。
在这个方法中，我们首先将所有元素反转。然后反转前 k 个元素，再反转后面 n-k 个元素，就能得到想要的结果。
假设 n=7 且k=3 。

原始数组 : 1 2 3 4 5 6 7
反转所有数字后 : 7 6 5 4 3 2 1
反转前 k 个数字后 : 5 6 7 4 3 2 1
反转后 n-k 个数字后 : 5 6 7 1 2 3 4 --> 结果
Java
public class Solution {
public void rotate(int[] nums, int k) {
k %= nums.length;
reverse(nums, 0, nums.length - 1);
reverse(nums, 0, k - 1);
reverse(nums, k, nums.length - 1);
}
public void reverse(int[] nums, int start, int end) {
while (start < end) {
int temp = nums[start];
nums[start] = nums[end];
nums[end] = temp;
start++;
end--;
}
}
}
复杂度分析

时间复杂度：O(n)。 nn 个元素被反转了总共 3 次。
空间复杂度：O(1) 。 没有使用额外的空间。

哈哈哈可以说是非常优雅了，一开始我也想到翻转，但是却没想到可以翻转两次！666！
后面是我的代码：

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        if (k == 0 || nums.size() == 0 || nums.size() == 1 || nums.size() == k)
			return;
		else if (nums.size()<k)
			k = k%nums.size();
        swap_num(nums,0,nums.size()-1);
        swap_num(nums,0,k-1);
        swap_num(nums,k,nums.size()-1);
        
    }
    void swap_num(vector<int>& nums,int first,int last){
        while(first<last){
            int temp = nums[first];
            nums[first] = nums[last];
            nums[last] = temp;
            ++first;--last;
        }
    }
};
总体来说这一次还是有不小的进步的，开始学会思考情况了，但是解决问题的能力还是有待提高啊！
