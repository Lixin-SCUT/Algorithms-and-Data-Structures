> 给定一个未排序的整数数组，找出其中没有出现的最小的正整数。
> 示例 1:
> 输入: [1,2,0]
> 输出: 3
> 示例 2:
> 输入: [3,4,-1,1]
> 输出: 2
> 示例 3:
> 输入: [7,8,9,11,12]
> 输出: 1
> 说明:
> 你的算法的时间复杂度应为O(n)，并且只能使用常数级别的空间。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/first-missing-positive
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

第一次做困难的题，还是比较紧张的
下意识想到的办法是建立另外一个数组，利用这个数组的下标来存储已经有的数值（此时其实已经犯了一个错误，常数级别的空间就意味着必须原地操作）
然后考虑需要处理的情况有
1.把负值全部变为0；
2.取最大值作为另外一个数组的大小值；
因为昨天回家了，所以是在平板上做题的，没有保存好代码，只保存了最后的代码

最后提交还是毫无疑问地出错了。。。系统给我安排一个过亿的数值能不出错嘛。。。
这个时候不小心瞄到一眼答案，发现必须把大于数组长度的值置为0，hhh修改后就通过啦！（当然此时已经不符合常数级别空间的要求）

官方题解如下（图比较多，比较麻烦）
> 方法 1：索引作为哈希表。
> 数据预处理
> 
> 首先我们可以不考虑负数和零，因为不需要考虑。同样可以不考虑大于 n 的数字，
> 因为首次缺失的正数一定小于或等于 n + 1 。
> 缺失的正数为 n + 1 的情况会单独考虑。
> 为了不考虑这些数，又要保证时间复杂度为O(N) ，因此
> 不能将这些元素弹出。我们可以将这些数用 1 替换。
> 为了确保缺失的第一个正数不是 1，先要在这步操作前确定 1 是否存在。
> 
> 如何实现就地算法
> 现在我们有一个只包含正数的数组，范围为 1 到 n，
> 现在的问题是在 \mathcal{O}(N)O(N) 的时间和常数空间内找出首次缺失的正数。
> 如果可以使用哈希表，且哈希表的映射是 正数 -> 是否存在 的话，这其实很简单。
> "脏工作环境" 的解决方法是将一个字符串 hash_str 分配 n 个 0，并且用类似于哈希表的方法，如果在数组中出现数字 i 则将字符串中 hash_str[i] 修改为 1 。
> 
> 我们不使用这种方法，但是借鉴这种 使用索引作为哈希键值 的想法。
> 最终的想法是 使用索引作为哈希键 以及 元素的符号作为哈希值 来实现是否存在的检测。
> 例如，nums[2] 元素的负号意味着数字 2 出现在 nums 中。nums[3]元素的正号表示 3 没有出现在 nums 中。
> 为了完成此操作，我们遍历一遍数组（该操作在数据预处理使得数组中只有正数的操作后），检查每个元素值 elem 以及将nums[elem] 元素的符号变为符号来表示数字 elem 出现在 nums 中。注意，当数字出现多次时需要保证符号只会变化 1 次。
> 算法
> 
> 现在可以开始写算法了。
> 
> 检查 1 是否存在于数组中。如果没有，则已经完成，1 即为答案。
> 如果 nums = [1]，答案即为 2 。
> 将负数，零，和大于 n 的数替换为 1 。
> 遍历数组。当读到数字 a 时，替换第 a 个元素的符号。
> 注意重复元素：只能改变一次符号。由于没有下标 n ，使用下标 0 的元素保存是否存在数字 n。
> 再次遍历数组。返回第一个正数元素的下标。
> 如果 nums[0] > 0，则返回 n 。
> 如果之前的步骤中没有发现 nums 中有正数元素，则返回n + 1。
> 代码
> 
> JavaPython
> class Solution {
>   public int firstMissingPositive(int[] nums) {
>     int n = nums.length;
> 
>     // 基本情况
>     int contains = 0;
>     for (int i = 0; i < n; i++)
>       if (nums[i] == 1) {
>         contains++;
>         break;
>       }
> 
>     if (contains == 0)
>       return 1;
> 
>     // nums = [1]
>     if (n == 1)
>       return 2;
> 
>     // 用 1 替换负数，0，
>     // 和大于 n 的数
>     // 在转换以后，nums 只会包含
>     // 正数
>     for (int i = 0; i < n; i++)
>       if ((nums[i] <= 0) || (nums[i] > n))
>         nums[i] = 1;
> 
>     // 使用索引和数字符号作为检查器
>     // 例如，如果 nums[1] 是负数表示在数组中出现了数字 `1`
>     // 如果 nums[2] 是正数 表示数字 2 没有出现
>     for (int i = 0; i < n; i++) {
>       int a = Math.abs(nums[i]);
>       // 如果发现了一个数字 a - 改变第 a 个元素的符号
>       // 注意重复元素只需操作一次
>       if (a == n)
>         nums[0] = - Math.abs(nums[0]);
>       else
>         nums[a] = - Math.abs(nums[a]);
>     }
> 
>     // 现在第一个正数的下标
>     // 就是第一个缺失的数
>     for (int i = 1; i < n; i++) {
>       if (nums[i] > 0)
>         return i;
>     }
> 
>     if (nums[0] > 0)
>       return n;
> 
>     return n + 1;
>   }
> }
> 复杂性分析
> 时间复杂度： O(N) 由于所有的操作一共只会遍历长度为 N 的数组 4 次。
> 空间复杂度： O(1) 由于只使用了常数的空间。
> 

最后还是很精妙的，当然前期处理非常重要，然后还有一点很重要，只有当当前下标的值处理好后，才会进行下标递增！（可以参考题解中的桶排序，其中精妙的思想还有如下：

> 补充内容：
> 交换两个整数，有两种比较 tricky 的做法。下面给出结论。
> “基于异或运算”是因为利用了“异或运算”是不进位的二进制加法。它有如下性质：
> 如果 a ^ b = c ，那么 a ^ c = b 与 b ^ c = a 同时成立，利用这一条，可以用于交换两个变量的值。
> 于是，交换两个变量的值，例如 a 和 b，不使用第三个变量，有两种不同的方法：
> 基于异或运算	
> a = a ^ b
> b = a ^ b
> a = a ^ b
> 基于加减法
> a = a + b
> b = a - b
> a = a - b
> 我理解的方式就是自己在纸上写几个例子，并且记住这个结论。个人觉得“基于异或运算”交换两个变量的值好记一些，因为右边都一样，左边依次是 a、b、a。
> 
> 在这里特别感谢用户 @davidlaid 给出的意见：
> 对于异或运算实现的交换方法，如果调用 swap(nums, i, i)，那么最终的结果会变为 0。
> 对于加减法实现的交换方法，有可能发生溢出。
> 调用 swap(nums, i, i)，那么最终的结果会变为 0 这是因为，如果是在数组中，自己和自己交换，只有 1 个空间，这个数会在异或运算的过程中变为 0，因此单独判断一下就好了。我个人还是比价少用这个技巧的，如果题目中限制了不能使用额外的存储空间，才用“基于异或运算实现的交换方法”。
> 
> 参考代码 2：基于异或运算交换两个变量的值。
> PythonPythonJava
> from typing import List
> class Solution:
>     def firstMissingPositive(self, nums: List[int]) -> int:
>         size = len(nums)
>         for i in range(size):
>             while 1 <= nums[i] <= size and nums[i] != nums[nums[i] - 1]:
>                 self.__swap(nums, i, nums[i] - 1)
>         for i in range(size):
>             if i + 1 != nums[i]:
>                 return i + 1
>         return size + 1
> 
>     def __swap(self, nums, index1, index2):
>         if index1 == index2:
>             return
>         nums[index1] = nums[index1] ^ nums[index2]
>         nums[index2] = nums[index1] ^ nums[index2]
>         nums[index1] = nums[index1] ^ nums[index2]
> 
> 作者：liweiwei1419
> 链接：https://leetcode-cn.com/problems/first-missing-positive/solution/tong-pai-xu-python-dai-ma-by-liweiwei1419/
> 来源：力扣（LeetCode）
> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
> 

异或互换和加法互换都很神奇，实现了两个对象之间的互换而不需要额外的参数！所以从别人身上学到了很多有趣的东西啊，也同时验证了我之前的随心感想，在leetcode还是可以学到很多知识的。
