题目如下：
> 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。
> 
> 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
> 
> 示例 1:
> 
> 给定 nums = [1,1,1,2,2,3],
> 
> 函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。
> 
> 你不需要考虑数组中超出新长度后面的元素。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

老样子，还是想用快慢指针（知道迭代器本身其实就是个指针后，还是改名了。。。），但是这一次比较麻烦，需要对重复的次数进行计算，还好是有序数组，省去很多麻烦，但是码代码的过程可不轻松，还是对暂时量和快指针的变化掌握得很差，中途多次错误都是因为没有掌握好快指针的位置变化，但是可喜可贺的是，这一次专门针对特殊情况作了考虑（包括万恶的空数组！！！）所以第二次提交就通过了，但是执行用时不理想啊，用了28ms（不知道是不是leetcode的问题呢）
我的代码如下：
```
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int i = 0;
        if(nums.size()!=0)
         for(int j=0;j<nums.size();){
            int temp = nums[j];
            nums[i++]=nums[j];
            int cal = 1;
            ++j;
            while(j<nums.size()&&nums[j]==temp){
                ++cal;
                if (cal<3)
                    nums[i++]=nums[j];
                    ++j;
            }
          }              
         else
          return i;
        return i;
    }
};
```

然后看一下官方题解：

你以为我要贴官方题解吗？其实没有哒！
好吧这次quo实没有官方题解，只有网友讨论，不过幸运的是有个非常好的高赞题解：
> 原地删除肯定是双指针，一个指向遍历的元素，一个指向可以写入的位置，后者的大小是小于等于前者的，关键在于题目条件的转化，如何实现限制最多两次的重复出现。
> 我们先不考虑边界情况，只考虑中间的情况，假设当前遍历位置为i，写指针的可写入位置为current+1，对于i处的值，其写入的条件是重复小于等于2次，我们考虑已经写入的最后两位current和current-1，这两个位置的情况有两个，相等和不相等，首先考虑相等的情况，此时若i处的值和current-1或者说current处的值相同，那么，i处的值肯定不能加入；然后考虑不相等的情况，即current-1和current处值不相等，那么i处的值无论为什么，都满足题意的，即可以加入，综上所述，当i处的值与current-1处的值不相等时，i处的值可以加入，其他情况均不能加入。
> 接着考虑边界情况，我们只需要考虑开始即可，开始时，前两个值无论等还是不等，都要原封不动的挪到新数组里，由于新数组就是在原数组上进行修改的，因此前两位直接不动即可，只需要修改遍历指针和写入指针就行。
> 以上算法只需要进行一次遍历即可，时间复杂度O(n)，空间复杂度O(1)。

```
int removeDuplicates(vector<int>& nums) 
{
	if (nums.size() <= 1)
		return nums.size();
	int current = 1;           //新数组中有效位置的最后一位，新加入的数据应当写到current+1
	for (int i = 2; i < nums.size();i++) //从第三位开始循环，前两位无论如何都是要加入新数组的
	{
		if (nums[i] != nums[current - 1])  //符合条件，加入新数组
		{
			current += 1;
			nums[current] = nums[i];
		}
	}
	return current+1;
}
```

> 作者：luo-ben-zhu-xiao-man-tou
> 链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/solution/zhi-jie-bian-li-yi-ci-ji-ke-by-luo-ben-zhu-xiao-ma/
> 来源：力扣（LeetCode）
> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

好强哒！！！最让我佩服的不是代码，而是这清晰的思路，我就是缺乏这种对全局的考虑，老是想到哪写到哪，总是觉得写算法是冒出一个问题处理一个，其实正应该像他这样，把问题细化为大分类，再把特殊的情况慢慢细化为小分类，这样才能概括到尽可能多（甚至是全部）的答案啊！
我提交的代码（先只看他的思想不看代码的好习惯下码出来的！！！）：
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size()<3)
            return nums.size();
        else{
            int i=2;
            for(int j=2;j<nums.size();j++)
                if(nums[j]!=nums[i-2])
                    nums[i++]=nums[j];       
            
            return i;
        }    
    }
};
	然后和他的代码对比一下，还是很多地方值得改进的，比如变量名，可以大大提高可读性的嘛！
