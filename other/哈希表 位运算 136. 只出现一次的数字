> 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
说明：
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
示例 1:
输入: [2,2,1]
输出: 1
示例 2:
输入: [4,1,2,1,2]
输出: 4
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/single-number
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

最简单的肯定就是无序哈希表的增删了 注意无序是unordered而不是unorder
然后就是思考如何不使用额外的空间
想过双指针的解答，但是似乎不是很行
艹，题解就是数学法

```
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_set<int> res;
        for(auto i:nums){
            if(res.count(i))
                res.erase(i);
            else
                res.insert(i);
        }
        return *res.begin();
    }
};
```

然后来看看官方题解
> 方法 1：列表操作
算法
遍历 nums 中的每一个元素
如果某个nums 中的数字是新出现的，则将它添加到列表中
如果某个数字已经在列表中，删除它
```
Python
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        no_duplicate_list = []
        for i in nums:
            if i not in no_duplicate_list:
                no_duplicate_list.append(i)
            else:
                no_duplicate_list.remove(i)
        return no_duplicate_list.pop()
```
> 复杂度分析
时间复杂度：O(n^2) 。我们遍历nums 花费 O(n) 的时间。我们还要在列表中遍历判断是否存在这个数字，花费 O(n) 的时间，所以总循环时间为 O(n^2) 。
空间复杂度：O(n) 。我们需要一个大小为 n 的列表保存所有的 nums 中元素。

> 方法 2：哈希表
算法
我们用哈希表避免每次查找元素是否存在需要的 O(n) 时间。
遍历 nums 中的每一个元素
查找 hash_table 中是否有当前元素的键
如果没有，将当前元素作为键插入 hash_table
最后， hash_table 中仅有一个元素，用 popitem 获得它
```
Python
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        hash_table = {}
        for i in nums:
            try:
                hash_table.pop(i)
            except:
                hash_table[i] = 1
        return hash_table.popitem()[0]
```
> 复杂度分析
时间复杂度： =O(n) 。for 循环的时间复杂度是 O(n) 的。Python 中哈希表的 pop 操作时间复杂度为O(1) 。
空间复杂度： O(n) 。hash_table 需要的空间与nums 中元素个数相等。

方法 3：数学
概念
2 * (a + b + c) - (a + a + b + b + c) = c2∗(a+b+c)−(a+a+b+b+c)=c
```
Python
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return 2 * sum(set(nums)) - sum(nums)
```
> 复杂度分析
时间复杂度：O(n+n)=O(n) 。sum 会调用 next 将nums 中的元素遍历一遍。我们可以把上述代码看成 sum(list(i, for i in nums)) ，这意味着时间复杂度为 O(n) ，因为nums 中的元素个数是 nn 个。
空间复杂度：O(n+n)=O(n) 。 set 需要的空间跟 nums 中元素个数相等。

> 方法 4：位操作
概念
如果我们对 0 和二进制位做 XOR 运算，得到的仍然是这个二进制位
a⊕0=a
如果我们对相同的二进制位做 XOR 运算，返回的结果是 0
a⊕a=0
XOR 满足交换律和结合律
a⊕b⊕a=(a⊕a)⊕b=0⊕b=b
所以我们只需要将所有的数进行 XOR 操作，得到那个唯一的数字。
```
Python
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        a = 0
        for i in nums:
            a ^= i
        return a
```
> 复杂度分析
时间复杂度： O(n) 。我们只需要将nums 中的元素遍历一遍，所以时间复杂度就是nums 中的元素个数。
空间复杂度：O(1) 。

我对异或的复现
```
    int singleNumber(vector<int>& nums){
        int res=0;
        for(auto i:nums)
            res^=i;
        return res;
    }      
```
对比方法三，异或还是很6的，都不需要考虑溢出的问题
