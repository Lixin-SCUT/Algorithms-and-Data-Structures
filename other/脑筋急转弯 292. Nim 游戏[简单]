> 你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。
你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。
示例:
输入: 4
输出: false 
解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；
     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/nim-game
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

通过一波穷举我发现问题所在就是4这个数，如果谁能使得自己拿走石头后剩下的数量为4那对方必输无疑
那么剩下的问题就很简单了，如果我当前的数不为4的倍数，我就拿走1-3个，使得对方成为4的倍数，如此往复最后对方肯定要面对4的情况。
所以这道题之所以简单就是因为直接看是不是4的倍数就完事了。。。

```
class Solution {
public:
    bool canWinNim(int n) {
     if(n<=0)
         return false;
     if(n%4==0)
         return false;
        else
            return true;
    }
};
```

然后来看看网友题解吧，这道题最重要的还是如何推导出这个规律而不是简单地得出结果
> 把4看成一个整体，我们都知道4的情况下，后手拿的会赢。那么就是以下这个样子：
1～3--a肯定会拿走，a赢
4--无论a怎么拿，顺序都是ab，都是b赢
5--看作1+[4]，那么拿的顺序就是aba，a赢
6--看作2+[4]，那么拿的顺序就是aba，a赢
7--看作3+[4]，那么拿的顺序就是aba，a赢
8--看作[4]+[4]，无论a怎么拿顺序都是abab，b赢
以此类推
由此我们可以看出，当n被4整除时，后手赢（b），不被整除时，先手赢（a）

> 最开始从递归入手，写出下面代码
```
class Solution {
public:
    bool canWinNim(int n) {
        if(n <= 0) {
            return false;
        }
        if(n <= 3) {
            return true;
        }
        return !canWinNim(n-1) || !canWinNim(n-2) || !canWinNim(n-3);
    }
};
```
> 遇到大n堆栈就溢出了。
然后考虑dp，写出下面代码
```
class Solution {
public:
    bool canWinNim(int n) {
        vector<bool> dp(n, true);
        for(int i = 4; i <= n; ++i) {
            dp[i-1] = !dp[i-2] || !dp[i-3] || !dp[i-4];
        }
        return dp[n-1];
    }
};
```
> 遇到大n时间太长，还是过不了。
观察了以下dp数组里的值的变化规律，发现只要n不是4的倍数，就是true，反之false。原来就是一行代码的事：
```
class Solution {
public:
    bool canWinNim(int n) {
        return n%4 != 0;
    }
};
```
> 提交上去结果居然是速度只打败50%，内存打败30%。
于是，再改进：
```
class Solution {
public:
    bool canWinNim(int n) {
        return n & 3;
    }
};
```
