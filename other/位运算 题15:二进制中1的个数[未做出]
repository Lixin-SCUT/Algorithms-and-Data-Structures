> 题目描述
输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。

重点就在于不要把n直接右移，因为负数的右移会自动补1，同时把1往左移其实也是固定循环次数的，用4字节的int只会循环32次。
然后就是书本题解中的减1相与法很值得学习。
```
class Solution {
public:
     int  NumberOf1(int n) {
         //【未做出】
         int count=0;
         
         while(n){
             ++count;
             n=(n-1)&n;
         }
         return count;
         /*
         //注意位运算符返回右值，必须再赋值。。。和算术符号一样的
         //然后判断条件比较有趣，如果将数字视为二进制的话那么位数一定是固定的（int的位数）
         //而不是说数字越大位数越大，所以不需要将判断条件改为i和n的大小判断，直接等i左移到变为0即可
         int count=0;
         int i=1;
         while(i){
             if(n&i)
                 ++count;
             i=i<<1;
         }
         return count;
         */
     }
};
```

书本题解：
> 只要把整数和1做位与运算看结果是不是0就知道了
如果直接将目标数字n进行右移，当输入一个负数，比如0x80000000,则运行的时候当把负数 0x80000000右移一位的时候，并不是简单地把最高位的1移到第二位变成 0x40000000,而是0xC0000000。这是因为移位前是一个负数，仍然要保证 移位后是一个负数，因此移位后的最高位会设为1。如果一直做右移运算， 那么最终这个数字就会变成0xFFFFFFFF而陷入死循环。
为了避免死循环，我们可以不右移输入的数字n。首先把n和1做与运算，判断n的最低位是不是为1。接着把1左移一位得到2,再和n做与运算，就能判断n的次低位是不是1……这样反复左移，每次都能判断n的其中一位是不是1。
```
int NumberOf1_Solution1(int n)
{
    int count = 0;
    unsigned int flag = 1;
    while (flag)
    {
        if (n & flag)
            count++;

        flag = flag << 1;
    }

    return count;
}
```

> 同时我们发现把一个整数减去1，都是把最右边的1变成0。如果它的右边还有0,则所有的0都变成1，而它左边的所有位都保 持不变。接下来我们把一个整数和它减去1的结果做位与运算，相当于把它最右边的1变成0。
把上面的分析总结起来就是：把一个整数减去1,再和原整数做与运 算，会把该整数最右边的1变成0。那么一个整数的二进制表示中有多少个1， 就可以进行多少次这样的操作。
```
int NumberOf1_Solution2(int n)
{
    int count = 0;

    while (n)
    {
        ++count;
        n = (n - 1) & n;
    }

    return count;
}
```
