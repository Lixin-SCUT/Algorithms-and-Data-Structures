> 对于一个具有树特征的无向图，我们可选择任何一个节点作为根。图因此可以成为树，在所有可能的树中，具有最小高度的树被称为最小高度树。给出这样的一个图，写出一个函数找到所有的最小高度树并返回他们的根节点。
> 
> 格式
> 该图包含 n 个节点，标记为 0 到 n - 1。给定数字 n 和一个无向边 edges 列表（每一个边都是一对标签）。
> 你可以假设没有重复的边会出现在 edges 中。由于所有的边都是无向边， [0, 1]和 [1, 0] 是相同的，因此不会同时出现在 edges 里。
> 
> 示例 1:
> 输入: n = 4, edges = [[1, 0], [1, 2], [1, 3]]
>         0
>         |
> 				1
>        / \
>       2   3 
> 输出: [1]
> 示例 2:
> 
> 输入: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]
>      0  1  2
>       \ | /
>         3
>         |
>         4
>         |
>         5 
> 输出: [3, 4]
> 
> 说明:
>  根据树的定义，树是一个无向图，其中任何两个顶点只通过一条路径连接。 换句话说，一个任何没有简单环路的连通图都是一棵树。
> 树的高度是指根节点和叶子节点之间最长向下路径上边的数量。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/minimum-height-trees
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

本来想着说建立一个图的邻接矩阵，然后通过判断矩阵每一行的最大值来得到结果
但是比较麻烦的是如何去判断非邻接节点的距离
发现完全可以化为最短路径的问题去完成 使用floyd构建邻接矩阵来完成
结果floyd超时了？？？

然后来看一下网友题解吧
> 广度优先搜索
> 解题思路 :题目给定的是一个无向简单图，要求找出最高树的节点，首先通过分析可以知道，最后的根节点只可能为1个或者2个。
> 要求最小高度的根节点，我们反过来想，怎样才能求得最小高度呢，很容易想到从叶子节点开始往根找，
> 于是就是采用分层剥削的方法，每次去除一层叶子节点，这样保证最后的节点就是我们所要的。
```
class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) 
    {
        vector<int> ans;[[[]()]()]()
        vector<int> degree; //各个节点的度
        vector< vector<int> > Graph(n,vector<int>());  //重新定义图的结构
        queue<int> Q; //叶子节点队列
        
        //初始化度队列
        for(int i=0;i<n;i++)
            degree.push_back(0); 
        
        //把边里面的数组转化为邻接表
        for(auto e : edges)
        {
            Graph[e[0]].push_back(e[1]);
            Graph[e[1]].push_back(e[0]);
            degree[e[0]]++;
            degree[e[1]]++;
        }
        
        //一度节点入队列
        for(int i=0;i<n;i++)
            if(degree[i] == 1)
                Q.push(i);
        
        int rst = n;
        //一个节点时要单独拿出来考虑
        if(rst == 1)
            ans.push_back(0);
```

另外一个比较厉害的网友的题解，思路是一致的，就是越靠近中间的1~2个节点才是我们需要的节点，也可以转化为计算出入度（这里不是有向图，所以节点的度不需要区分出度入度）
> 贪心法：根据拓扑排序的思路（Java 代码）
思路分析：
这道题一开始给我的感觉特别像拓扑排序，做下来，感觉它们的本质是一样的，更深层次的思想是贪心算法。
直觉上，一棵树越靠“外面”的结点，我们越不可能把它作为根结点，如果这样做的话，可能树的高度是很高的
因此，我们使用“剔除边缘结点”的策略，这里的边缘结点就是指连接其它结点最少的结点，用专业的名词来说，就是指向它的结点最少的结点，“入度”最少的结点
我们能归纳出，结点最后只会剩下 1 个或者 2 个。
综上所述，总结一下我们的算法：每次总是删除“入度”个数最少的结点，因为树是无向无环图，删除了它们以后，与之相连的结点的入度也相应地减少 1，直到最后剩下 1 个结点或者 2 个结点。
在编码的时候，我借鉴了“拓扑排序”的代码，使用了“邻接表”表示图，使用了“入度数组”，还使用了队列保存了下一轮要“剔除”的结点编号。关于拓扑排序的知识和代码实现，可以参考「力扣」第 207 题：课程表 和「力扣」第 210 题：课程表 II。
```
public class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> res = new ArrayList<>();
        // 特判
        if (n <= 2) {
            for (int i = 0; i < n; i++) {
                res.add(i);
            }
            return res;
        }

        // 入度数组，每一次要把入度为 1 的结点剔除
        int[] inDegrees = new int[n];

        // 默认为 False，如果剔除，设置为 True
        boolean[] result = new boolean[n];

        // 因为是无向图，所以邻接表拿出一条边，两个结点都要存一下
        // 注意：右边就不要写具体的实现类了，等到实例化的时候再写具体的实现类
        Set<Integer>[] adjs = new Set[n];
        // 初始化
        for (int i = 0; i < n; i++) {
            adjs[i] = new HashSet<>();
        }

        for (int[] edge : edges) {
            int start = edge[0];
            int end = edge[1];
            adjs[start].add(end);
            adjs[end].add(start);
            inDegrees[start] += 1;
            inDegrees[end] += 1;
        }
        LinkedList<Integer> queue = new LinkedList<>();

        // 入度为 1 的结点入队
        for (int i = 0; i < n; i++) {
            if (inDegrees[i] == 1) {
                queue.addLast(i);
            }
        }

        // 注意边界条件 n == 2 和 n == 1 是如何分析出来的
        while (n > 2) {
            int size = queue.size();
            System.out.println(queue);
            // 一次减去这么多
            n -= size;
            for (int i = 0; i < size; i++) {
                int top = queue.removeFirst();
                result[top] = true;
                inDegrees[top] -= 1;
                // 把它和它的邻接结点的入度全部减 1
                Set<Integer> successors = adjs[top];
                for (Integer successor : successors) {
                    inDegrees[successor] -= 1;
                    if (inDegrees[successor] == 1) {
                        queue.addLast(successor);
                    }
                }
            }
        }
        n = result.length;
        for (int i = 0; i < n; i++) {
            if (!result[i]) {
                res.add(i);
            }
        }
        return res;
    }
		
    public static void main(String[] args) {
        int[][] edges = new int[][]{{1, 0}, {1, 2}, {1, 3}};
        int n = 4;
        Solution solution = new Solution();
        List<Integer> res = solution.findMinHeightTrees(n, edges);
        System.out.println(res);
    }
}
```

看完题解发现其实我是知道BFS和DFS或者最小生成树的，只是没有想深一步去到刨除叶子节点这一步，最近做题经常是面向测试用例编程，很少去挖掘通用规律了，这一点还是有待改进的。
