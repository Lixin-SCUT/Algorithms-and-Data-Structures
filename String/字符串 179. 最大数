> 给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。
> 
> 示例 1:
> 输入: [10,2]
> 输出: 210
> 示例 2:
> 输入: [3,30,34,5,9]
> 输出: 9534330
> 
> 说明: 输出结果可能非常大，所以你需要返回一个字符串而不是整数。
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/largest-number
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
> 

这道题刚好是在面经里面见过的题目
一开始没什么想法，因为如果是int元素的话，其排序是按位数的排序的。
然后分析了一下最大数的组成，首先对于个位数，不用想了肯定是单个9是最好的数，无脑放在前面就行了。然后对于多位数，重点就是其第一位的值，其次从左到右看它的值而确定它的结果中的位置。
然后受到题目说明的影响，诶！字符串不就是按从左到右的位数来排序的吗？！比如30和9相比，9是比30大的！
然而开心了不到一分钟就凉了，因为字符串的排序也是有缺陷的，在位数不相等的情况下，默认位数多的比较大，比如902和99，会认为902比99大，但是99902明显比90299大嘛，所以还需要攻克这最后一个问题
然后白天没啥思路就先回学校了，傍晚打开题目时突然想到一个stl源码剖析中反复提到的点：泛型算法的条件是可以自己设定的！然后我就想到在排序比较时，将位数不同的字符串的位数补齐，然后再进行比较
然后在中途遇到了一些问题，直接在sort后面插入自定义比较函数的时候发生了错误，后来查阅后发现是因为leetcode默认把解答放在类里面，类里面的成员函数在类成员构造出来之前是无法直接调用的，所以必须声明称static函数在编译阶段就初始化，我会在后面单独写一篇博文进行简介
然后在寻找解决方法的过程中发现了更加绝妙的比较方法
```
  string ab = s1 + s2;
        string ba = s2 + s1;
        return ab > ba; 
```
哈哈妙啊，刚好不就是题目的核心思路嘛
于是最后代码如下
```
class Solution {
public:
    string largestNumber(vector<int>& nums) {
        vector<string> str_nums;
        for(auto i:nums)
            str_nums.push_back(to_string(i));
        sort(str_nums.begin(),str_nums.end(),compare_str);
        string s;
        if(str_nums[0]=="0")
            return "0";
        for(auto str:str_nums)
            s+=str;
        return s;
        
    }
    
    static bool compare_str(const string &s1,const string &s2){
        string ab = s1 + s2;
        string ba = s2 + s1;
        return ab > ba;  
    }
};
```
最后官方题解和我的思路一致，本来以为没法解决这个棘手的问题了，结果还蛮顺利的嘛！（不要停下来啊！hhhh）
