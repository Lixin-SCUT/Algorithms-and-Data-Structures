> 题目描述
请实现一个函数用来匹配包括'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但是与"aa.a"和"ab*a"均不匹配

【未做出】
 本来我的想法是从pattern入手，然后分别判断'.'和'\*'
 可惜在盘点'\*'的时候发现一个问题，b\*b和bbbbb怎么匹配呢。。。因为必须留下一个b和最后一个b匹配，所以不能直接使用while直接判断

直接看书中题解
注意第二个判断条件中if(\*str!='\0'&&\*pattern=='\0')不可以改为if(\*str=='\0'||\*pattern=='\0')
因为测试用例 “”和 “.\*” 这两者中明显str可以到尾后位置，而pattern肯定不会先到尾后位置
书中答案相当于递归调用所有的三种可能性（甚至把“.\*”都揉合在一起进行判断了）
总之三种判断就是对应了状态机中的状态转移，非常巧妙
最好就是注意和string不同，字符串变量有'\0'兜尾，不用担心if( \*(pattern+1)=='\*')溢出

```
class Solution {
public:
    bool match(char* str, char* pattern)
    {
        if(str==nullptr||pattern==nullptr)
                return false;
        return matchCore(str,pattern);
    }
    
    bool matchCore(char *str,char *pattern)
    {
        if(*str=='\0'&&*pattern=='\0')
            return true;
        if(*str!='\0'&&*pattern=='\0')
            return false;
        if(*(pattern+1)=='*')
        {
            if(*(pattern)==*str||(*pattern=='.'&&*str!='\0'))
                return matchCore(str+1,pattern+2)
                ||matchCore(str+1,pattern)
                ||matchCore(str,pattern+2);
            else
                return matchCore(str,pattern+2);
        }
        if(*str==*pattern||(*pattern=='.'&&*str!='\0'))
            return matchCore(str+1,pattern+1);
        
        return false;
    }
};
```

书本题解：
每次从字符串里拿出一个字符和模式中的字符去匹配。先来分析如何匹配一个字符。如果模式中的字符ch是'.'，那么它可以匹配字符串中的任意字符。如果模式中的字符ch不是而且字符串中的字符也是ch,那么它们相互匹配。当字符串中的字符和模式中的字符相匹配时，接着匹配后面的字符。
相对而言，当模式中的第二个字符不是'\*'时，问题要简单很多。如果字符串中的第一个字符和模式中的第一个字符相匹配，那么在字符串和模式上都向后移动一个字符，然后匹配剩余的字符串和模式。如果字符串中的第一个字符和模式中的第一个字符不相匹配，则直接返回false。
当模式中的第二个字符是'\*'时，问题要复杂一些，因为可能有多种不同的匹配方式。一种选择是在模式上向后移动两个字符。这相当于'\*'和它前面的字符被忽略了，因为'\*'可以匹配字符串中的0个字符。如果模式中的第一个字符和字符串中的第一个字符相匹配，则在字符串上向后移动一个字符, 而在模式上有两种选择：可以在模式上向后移动两个字符，也可以保持模式不变。
```
bool match(const char* str, const char* pattern)
{
    if(str == nullptr || pattern == nullptr)
        return false;

    return matchCore(str, pattern);
}

bool matchCore(const char* str, const char* pattern)
{
    if(*str == '\0' && *pattern == '\0')
        return true;

    if(*str != '\0' && *pattern == '\0')
        return false;

    if(*(pattern + 1) == '*')
    {
        if(*pattern == *str || (*pattern == '.' && *str != '\0'))
            // 进入有限状态机的下一个状态
            return matchCore(str + 1, pattern + 2)
            // 继续留在有限状态机的当前状态 
            || matchCore(str + 1, pattern)
            // 略过一个'*' 
            || matchCore(str, pattern + 2);
        else
            // 略过一个'*'
            return matchCore(str, pattern + 2);
    }

    if(*str == *pattern || (*pattern == '.' && *str != '\0'))
        return matchCore(str + 1, pattern + 1);

    return false;
}
```
