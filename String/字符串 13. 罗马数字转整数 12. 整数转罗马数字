> 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
> 字符          数值
> I             1
> V             5
> X             10
> L             50
> C             100
> D             500
> M             1000
> 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。
> 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
> I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
> X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
> C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
> 给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。
> 
> 示例 1:
> 输入: "III"
> 输出: 3
> 示例 2:
> 输入: "IV"
> 输出: 4
> 示例 3:
> 输入: "IX"
> 输出: 9
> 示例 4:
> 输入: "LVIII"
> 输出: 58
> 解释: L = 50, V= 5, III = 3.
> 示例 5:
> 输入: "MCMXCIV"
> 输出: 1994
> 解释: M = 1000, CM = 900, XC = 90, IV = 4.
> 

这道题一开始还有蛮波折的，我一开始的想法是使用switch，然后两位两位地检测，但是每次只递增一位
然后实现的时候发现会略麻烦，因为第一位和最后一位会比较难处理。
然后突然想到一个问题，如果出现“IXL”这种情况怎么破？，既是IX又是XL？
果断去评论区看看，结果被强行剧透了，可以直接使用map记录相应值，然后检测前一个值是否小于后一个值，如果是的话就需要减去。然后关于IXL这种情况的话，在罗马数字里面是不会出现这种情况的，然后测试用例中也都是正确的罗马数字案例。。。leetcode的题的质量还是有待提高啊。
最后给出的代码如下：
```
class Solution {
public:
    int romanToInt(string s) {
        int res=0;
        map<char,int> roman {{'I',1},{'V',5},{'X',10},{'L',50},{'C',100},{'D',500},{'M',1000}};
        int temp=0;
        for(int i=0;i<s.size();++i){
            res+=roman[s[i]];
            if(roman[s[i]]>temp)
                res-=2*temp;
            temp=roman[s[i]];
        }
        return res;     
    }
};
```
然后看一下网友代码，基本是和我前一种想法相符，使用switch或者map来进行两位字符的匹配，但是最简单还是上述的方法。

12.整数转罗马数字
> 罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
> 字符          数值
> I             1
> V             5
> X             10
> L             50
> C             100
> D             500
> M             1000
> 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。
> 
> 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
> 
> I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
> X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
> C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
> 给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。
> 
> 示例 1:
> 输入: 3
> 输出: "III"
> 示例 2:
> 输入: 4
> 输出: "IV"
> 示例 3:
> 输入: 9
> 输出: "IX"
> 示例 4:
> 输入: 58
> 输出: "LVIII"
> 解释: L = 50, V = 5, III = 3.
> 示例 5:
> 输入: 1994
> 输出: "MCMXCIV"
> 解释: M = 1000, CM = 900, XC = 90, IV = 4.
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/integer-to-roman
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题相对简单一点，我的思路就是除以每个值，然后利用switch的case的特性，先把num转化为string得到位数，再根据相应的位数开始跳转到相应的case，并且case之间不需要break，从而从上至下执行一个完整的流程。
```
class Solution {
public:
    string intToRoman(int num) {
        string s(to_string(num));
        int time=0;
        string res;
        switch(s.size()){
            case 4:
                time=num/1000;
                num=num%1000;
                while(time)
                    res+="M",--time;
            case 3:
                time=num/900;
                num=num%900;
                while(time)
                    res+="CM",--time;
                time=num/500;
                num=num%500;
                while(time)
                    res+="D",--time;
                time=num/400;
                num=num%400;
                while(time)
                    res+="CD",--time;
                time=num/100;
                num=num%100;
                while(time)
                    res+="C",--time;
            case 2:
                time=num/90;
                num=num%90;
                while(time)
                    res+="XC",--time;
                time=num/50;
                num=num%50;
                while(time)
                    res+="L",--time;
                time=num/40;
                num=num%40;
                while(time)
                    res+="XL",--time;
                time=num/10;
                num=num%10;
                while(time)
                    res+="X",--time;
            case 1:
                time=num/9;
                num=num%9;
                while(time)
                    res+="IX",--time;
                time=num/5;
                num=num%5;
                while(time)
                    res+="V",--time;
                time=num/4;
                num=num%4;
                while(time)
                    res+="IV",--time;
                while(num)
                    res+="I",--num;
                break;
            default:
                break;
        }
        return res;
    }
};
```

然后是网友题解，用到了贪心算法，代码量没那么大
```
class Solution:
    def intToRoman(self, num: int) -> str:
        # 把阿拉伯数字与罗马数字可能出现的所有情况和对应关系，放在两个数组中
        # 并且按照阿拉伯数字的大小降序排列，这是贪心选择思想
        nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
        romans = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]

        index = 0
        res = ''
        while index < 13:
            # 注意：这里是等于号，表示尽量使用大的"面值"
            while num >= nums[index]:
                res += romans[index]
                num -= nums[index]
            index += 1
        return res
复杂度分析：
```

时间复杂度：O(1)，虽然看起来是两层循环，但是外层循环的次数最多 12，内层循环的此时其实也是有限次的，综合一下，时间复杂度是 O(1)。
空间复杂度：O(1)，这里使用了两个辅助数字，空间都为 13，还有常数个变量，故空间复杂度是 O(1)。

