将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。
> 比如输入字符串为 "LEETCODEISHIRING" 行数为 3 时，排列如下：
> L   C   I   R
> E T O E S I I G
> E   D   H   N
> 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："LCIRETOESIIGEDHN"。
> 请你实现这个将字符串进行指定行数变换的函数：
> string convert(string s, int numRows);
> 示例 1:
> 输入: s = "LEETCODEISHIRING", numRows = 3
> 输出: "LCIRETOESIIGEDHN"
> 示例 2:
> 输入: s = "LEETCODEISHIRING", numRows = 4
> 输出: "LDREOEIIECIHNTSG"
> 解释:
> L     D     R
> E   O E   I I
> E C   I H   N
> T     S     G
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/zigzag-conversion
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


这道题一开始还是被我吐槽了hhh，因为很奇葩，不像汉语的描述风格，同时好像“实用性”不大啊，但是就像谢扬同学所说，还是蛮有趣的。
我一开始的想法是找它们的下标的对应关系，但是写着写着自己都晕了，因为这两天要做报告，没有太多时间给我思考了，所以还是直接看题解吧！
首先是网友们的暴力解法，设立一个二维数组在相应的位置存储相应的元素，这个应该是最简单的了吧，只是空间复杂度比较高。
然后是官方题解。
> 方法一：按行排序
> 思路
> 通过从左向右迭代字符串，我们可以轻松地确定字符位于 Z 字形图案中的哪一行。
> 
> 算法
> 我们可以使用min(numRows,len(s)) 个列表来表示 Z 字形图案中的非空行。
> 从左到右迭代 s，将每个字符添加到合适的行。可以使用当前行和当前方向这两个变量对合适的行进行跟踪。
> 只有当我们向上移动到最上面的行或向下移动到最下面的行时，当前方向才会发生改变。
```
class Solution {
public:
    string convert(string s, int numRows) {
        int len=s.size();
        if(numRows==1||numRows==0)
            return s;
        bool godown=false;
        int r_size=len<numRows?len:numRows;
        vector<string> rows(r_size);
        int r=0;
        for(auto c:s){
            rows[r]+=c;
            if(r==0||r==r_size-1) godown=!godown;
            if(godown)
                ++r;
            else
                --r;
        }
        string s_res;
        for(auto c:rows)
            s_res+=c;
        return s_res;
        
    }
};
```
> 复杂度分析
> 时间复杂度：O(n)，其中n==len(s)
> 空间复杂度：O(n)
> 
> 方法二：按行访问
> 思路
> 按照与逐行读取 Z 字形图案相同的顺序访问字符串。
> 
> 算法
> 首先访问 行 0 中的所有字符，接着访问 行 1，然后 行 2，依此类推...
> 对于所有整数 k，
> 行 0 中的字符位于索引k(2⋅numRows−2) 处;
> 行 numRows−1 中的字符位于索引 k(2⋅numRows−2)+numRows−1 处;
> 内部的 行 i 中的字符位于索引k(2⋅numRows−2)+i 以及(k+1)(2⋅numRows−2)−i 处;
```
class Solution {
public:
    string convert(string s, int numRows) {

        if (numRows == 1) return s;

        string ret;
        int n = s.size();
        int cycleLen = 2 * numRows - 2;

        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j + i < n; j += cycleLen) {
                ret += s[j + i];
                if (i != 0 && i != numRows - 1 && j + cycleLen - i < n)
                    ret += s[j + cycleLen - i];
            }
        }
        return ret;
    }
};
```
复杂度分析

时间复杂度：O(n)，其中 n==len(s)。每个索引被访问一次。
空间复杂度：O(n)。对于 C++ 实现，如果返回字符串不被视为额外空间，则复杂度为 O(1)。
