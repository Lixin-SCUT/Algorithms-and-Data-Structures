> 题目描述
请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串"+100","5e2","-123","3.1416"和"-1E-16"都表示数值。 但是"12e","1a3.14","1.2.3","+-5"和"12e+4.3"都不是。

主要的点是了解规则和分割任务，哪些数字可以没有哪些可以有
```
class Solution {
public:
    bool isNumeric(char* string)
    {
        char *str=string;
        if(str==nullptr)
            return false;
        bool numeric=scanInterger(&str);
        
        if(*str=='.')
        {
            ++str;
            numeric=scanUnsignedInterger(&str)||numeric;
        }
        if(*str=='e'||*str=='E'){
            ++str;
            numeric=numeric&&scanInterger(&str);
        }
        return numeric&&*str=='\0';
    }


bool scanInterger(char **str){
    if(**str=='+'||**str=='-')
        ++(*str);
    return scanUnsignedInterger(str);
}

bool scanUnsignedInterger(char **str){
    char *before=*str;
    while(**str!='\0')
        if(**str>='0'&&**str<='9')
            ++*str;
        else
            break;
    return *str>before;
}
};
```

书本题解：
>  表示数值的字符串遵循模式`A[.[B]][e|EC]`或者`.B[e|EC]`,其中A为数值的整数部分，B紧跟着小数点为数值的小数部分，C紧跟着'e'或者'E'为数值的指数部分。在小数里可能没有数值的整数部分。例如，小数.123等于0.123。 因此A部分不是必需的。如果一个数没有整数部分，那么它的小数部分不能为空
上述A和C都是可能以'+'或者'-'开头的0〜9的数位串；B也是0〜9 的数位串，但是前面不能有正负号
判断一个字符串是否符合上述模式时，首先尽可能多地扫描0〜9的数位(有可能在起始处有'+'或者'-'，也就是前面模式中表示数值整数的A部分。如果遇到小数点'.'则开始扫描表示数值小数部分的B部分。如果遇到'e'或者'E',则开始扫描表示数值指数的C部分。
函数scanUnsignedlnteger用来扫描字符串中0〜9的数位(类似于一个 无符号整数)，可以用来匹配前面数值模式中的B部分。
函数scaninteger扫描可能以表示正负的'+'或者'-'为起始的0~9的数位 (类似于一个可能带正负符号的整数)，用来匹配前面数值模式中的A和C 部分。
```
// 数字的格式可以用A[.[B]][e|EC]或者.B[e|EC]表示，其中A和C都是
// 整数（可以有正负号，也可以没有），而B是一个无符号整数
bool isNumeric(const char* str)
{
    if(str == nullptr)
        return false;

    bool numeric = scanInteger(&str);

    // 如果出现'.'，接下来是数字的小数部分
    if(*str == '.')
    {
        ++str;

        // 下面一行代码用||的原因：
        // 1. 小数可以没有整数部分，例如.123等于0.123；
        // 2. 小数点后面可以没有数字，例如233.等于233.0；
        // 3. 当然小数点前面和后面可以有数字，例如233.666
        numeric = scanUnsignedInteger(&str) || numeric;
    }

    // 如果出现'e'或者'E'，接下来跟着的是数字的指数部分
    if(*str == 'e' || *str == 'E')
    {
        ++str;

        // 下面一行代码用&&的原因：
        // 1. 当e或E前面没有数字时，整个字符串不能表示数字，例如.e1、e1；
        // 2. 当e或E后面没有整数时，整个字符串不能表示数字，例如12e、12e+5.4
        numeric = numeric && scanInteger(&str);
    }

    return numeric && *str == '\0';
}

bool scanUnsignedInteger(const char** str)
{
    const char* before = *str;
    while(**str != '\0' && **str >= '0' && **str <= '9')
        ++(*str);

    // 当str中存在若干0-9的数字时，返回true
    return *str > before;
}

// 整数的格式可以用[+|-]B表示, 其中B为无符号整数
bool scanInteger(const char** str)
{
    if(**str == '+' || **str == '-')
        ++(*str);
    return scanUnsignedInteger(str);
}
```
