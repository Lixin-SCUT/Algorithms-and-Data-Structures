> 给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。
> 
> 案例:
> s = "leetcode"
> 返回 0.
> s = "loveleetcode",
> 返回 2.
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/first-unique-character-in-a-string
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

面对重复元素的问题，一方面如果必须是常数空间复杂度的话，可以用暴力法或者排序法进行解决，另一方面如果对空间复杂度没要求或者要求线性时间复杂度的话，那最好就是用关联容器map或者set了。
首先我用暴力法解决一下，主要就是对每个元素进行一次遍历，如果没有重复的话就返回其位置。需要注意的是j的取值也是从0开始，而且必须跳过i，否则会只对身后的元素进行判断。
```
class Solution {
public:
    int firstUniqChar(string s) {
        int len = s.size();
        if(!len)
            return -1;
        if(len==1)
            return 0;
        for(int i=0;i<len;++i)
            for(int j=0;j<len;++j)
                if(s[i]==s[j]&&i!=j)
                    break;
                else if(j==len-1)
                    return i;
        return -1;
        
    }
};
```
暴力法实现完了，第二个自然就是关联容器了，因为需要返回值的位置，所以需要的位置来保存值的位置，所以使用map或者multi，然后我首先想到的是map，map的实现如下，主要需要注意的1.我一开始的想法是如果插入失败就等于有重复的值在map里面了，就使用erase去除，但是这样会导致一个问题就是只能检测偶数的重复，如果遇到奇数的重复反而变不重复了（因为我们最后是检测不重复，而不是重复）所以后面改成如果插入失败就把下标搜索将second改为n+1。3.map的下标是直接返回second值的，不需要再调用second 3. 需要再遍历一遍map，因为map不会按照插入顺序进行保存的，而是根据关键字的有序来保存的，比如例子中的leetcode，`(*map.begin()).second` 返回的反而是c的位置（同时注意调用的括号所在，调用运算符的优先级高于解引用运算符）。
代码如下：
```
class Solution {
public:
    int firstUniqChar(string s) {
        int len = s.size();
        if(!len)
            return -1;
        if(len==1)
            return 0;
        map<char,int> maps;
        int i=0;
        for(auto c:s){
            if(!maps.insert(make_pair(c,i)).second)
                maps[c]=len+1;
            ++i;          
        }
        
        if(maps.empty())
            return -1;
        int min=len+1;
        for(auto m:maps)
            if(m.second!=-1)
            min=min<m.second?min:m.second;
        if(min==len+1)
            return -1;
        return min;
    }
};
```
然后我突然觉得可能multimap更加适合这种情况，第二次的时候不需要遍历map，而是直接遍历字符串，用count来计算字符在multimap的数量（注意不可以使用下标运算符了，只能使用find），但是很遗憾，在面对超长字符串的时候会导致超时。
```
class Solution {
public:
    int firstUniqChar(string s) {
        int len = s.size();
        if(!len)
            return -1;
        if(len==1)
            return 0;
        multimap<char,int> maps;
        int i=0;
        for(auto c:s){
            maps.insert(make_pair(c,i));
            ++i;          
        }
        for(auto c:s){
            int j=maps.count(c);   
            if(j==1)
                return maps.find(c)->second;
        }
        return -1;
       
    }
};
```
看一下官方题解：

> 方法一： 线性时间复杂度解法
> 这道题最优的解法就是线性复杂度了，为了保证每个元素是唯一的，至少得把每个字符都遍历一遍。
> 
> 算法的思路就是遍历一遍字符串，然后把字符串中每个字符出现的次数保存在一个散列表中。这个过程的时间复杂度为 O(N)，其中 N 为字符串的长度。
> 
> 接下来需要再遍历一次字符串，这一次利用散列表来检查遍历的每个字符是不是唯一的。如果当前字符唯一，直接返回当前下标就可以了。第二次遍历的时间复杂度也是 O(N)。
> 
```
class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> count = new HashMap<Character, Integer>();
        int n = s.length();
        // build hash map : character and how often it appears
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            count.put(c, count.getOrDefault(c, 0) + 1);
        }
        
        // find the index
        for (int i = 0; i < n; i++) {
            if (count.get(s.charAt(i)) == 1) 
                return i;
        }
        return -1;
    }
}
```
> 复杂度分析
> 时间复杂度： O(N)
> 只遍历了两遍字符串，同时散列表中查找操作是常数时间复杂度的。
> 空间复杂度： O(N)
> 用到了散列表来存储字符串中每个元素出现的次数。


其实和我的想法一致，就是map的键值和第二次搜索的处理不同，值得向官方题解学习一下
