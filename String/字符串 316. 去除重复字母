> 给定一个仅包含小写字母的字符串，去除字符串中重复的字母，使得每个字母只出现一次。需保证返回结果的字典序最小（要求不能打乱其他字符的相对位置）。
> 
> 示例 1:
> 输入: "bcabc"
> 输出: "abc"
> 示例 2:
> 输入: "cbacdcbc"
> 输出: "acdb"
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/remove-duplicate-letters
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
> 

一开始我弄错题意了，以为是提取某个字母第一次出现的位置或者第二次出现的位置：
```
class Solution {
public:
    string removeDuplicateLetters(string s) {
        map<char,int> s_map;
        for(auto c:s){
            if(!s_map.insert(make_pair(c,1)).second)
                ++s_map.at(c);
        }
        string res;
        for(auto i=s.rbegin();i<s.rend();++i){
            if(s_map.at(*i)==1||s_map.at(*i)==2){
                res=*i+res;
                s_map.at(*i)=-1;
            }
            else if(s_map.at(*i)>2)
                --s_map.at(*i);                
        }
        return res;
    }
};
```
其实是寻找一个区域，使得字典序（也就是字符串排序）最小，并且其中不能用重复的字母，比如dabccd，结果就是abcd，第一个d要去掉，第二个c也得去掉。
然后这两天发生了蛮多的事情的，心情不太好，题目也没什么思路，就直接先看一下网友题解吧
```
维护一个Stack<char>，对字符串进行正序遍历。对每个字符ch，首先判断stack内是否存在该字符，若stack顶端值比ch大且后续遍历中还能访问到同样的值则将该顶端值去除，最后将stack转化为Array，逆序后转化为字符串输出。

public class Solution {
    public string RemoveDuplicateLetters(string s)
    {
        Stack<char> stack = new Stack<char>();
        for (int i = 0; i < s.Length; ++i)
        {
            char ch = s[i];
            if (stack.Contains(ch))
            {
                continue;
            }
            while (stack.Count > 0 && stack.Peek() > ch && s.LastIndexOf(stack.Peek()) > i)
            {
                stack.Pop();
            }
            stack.Push(ch);
        }
        char[] res = stack.ToArray();
        Array.Reverse(res);
        return new string(res);
    }
}
```
```
* 这道题呢，就是要想办法把最小的字母放在最前面
 * 例如：bcabc
 * 
 * 如果当前只有一个字母b，b就是升序的，没问题
 * 此时加入一个c，变成bc，OK，是升序的，没问题，继续
 * 再加入一个a，变成了bca，那么此时我要将a放在最前面，那么就需要a后面有b,和c能替换前面的bc。
 * 
 * 所以我这里遍历到a时，先判断后面有没有c，有的话，我将前面的c去掉，变成ba，
 * 然后我再判断后面有没有b，有的话，我将前面的b去掉，
 * 
 * 我们用stack来记录这种移位后的结果
 * 那么stack的变化顺序：
 * stack=[b]
 * stack=[b,c]
 * stack=[b,a]
 * stack=[a]
 * stack=[a,b]
 * stack=[a,b,c]
 */
```
描述比较简单，整体思路也算比较暴力了，但是操作起来可不简单，首先必须对栈进行遍历操作，其次需要对数组字母出现的位置进行遍历操作。第二个还好，第一个的话c++的栈是没有遍历接口的，只能对栈顶元素进行操作，所以还得找一下针对c++的方法。
> 1.遍历字符串，用map记录字符出现的最后位置；
> 2.第二次遍历字符串时，维护一个记录结果的栈，用vector实现；
> 3.维护一个map记录当前字符是否在栈里（就不需要遍历数组，看是否存在），当在栈里时，继续遍历，不在转4；
> 4.当栈不为空且字典序比当前元素大时，并且栈顶字符在原字符串中出现的位置比当前下标i更大，说明栈顶字符会在之后出现。弹出栈顶元素，并将栈顶元素是否在栈中的记录抹除；
> 5.压栈当前字符；
> 6.结果为vector数组中的字符顺序。
```
class Solution {
public:
    string removeDuplicateLetters(string s) {
        unordered_map<char, int> mp;
        unordered_map<char, int> in_st;
        for(int i = 0; i < s.size(); ++i)
            mp[s[i]] = i;//记录某个字符出现的最后位置
        vector<char> st;//记录结果的栈
        for(int i = 0; i < s.size(); ++i){
            if(in_st[s[i]])continue;//栈中有当前遍历的字符
            while(st.size() && s[i] < st.back() && mp[st.back()] > i){
            //栈顶元素会在之后的位置出现
                --in_st[st.back()];
                st.pop_back();
            //出栈并抹除记录
            }
            st.push_back(s[i]);
            ++in_st[s[i]];
        //压栈，并记录出现过
        }
        string res;
        for(auto& i : st)res += i;    
        return res;
    }
};
```
这个方法就挺好的，利用两个map记录字符的情况，比遍历快很多，属于利用空间换时间。
然后自己实现了一遍，需要注意的点在于一个是pop的判断可是有三部分的1.判断栈是否为空2.栈顶元素是否大于当前元素3.栈顶元素是否会在字符串后面再出现
然后在pop的时候需要同时在栈的map里面删除相关元素（或者像原作者那样利用map的值进行操作）
主要注意的点还是c++的栈操作pop是无法同时删除栈顶然后返回值的，必须top和pop配合
```
class Solution {
public:
    string removeDuplicateLetters(string s) {
        map<char,int> s_map;
        for(int i=0;i<s.size();++i)
               s_map[s[i]]=i;
        map<char,int> stack_map;
        stack<char> res;
        for(int i=0;i<s.size();++i){
            if(!stack_map.insert({s[i],i}).second)
                continue;
            while(!res.empty()&&s[i]<res.top()&&s_map[res.top()]>i){
                stack_map.erase(res.top());
                res.pop();
            }
            res.push(s[i]);
        }
        string result;
        while(!res.empty()){
            result= res.top()+result;
            res.pop();
        }
        return result;
    }
};
```


