> 给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。
> 
> 例如，给出 n = 3，生成结果为：
> [
>   "((()))",
>   "(()())",
>   "(())()",
>   "()(())",
>   "()()()"
> ]
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/generate-parentheses
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题是忆君小朋友问我的，果断没啥思路hhh但是猜到七七八八得是动态规划了
下面是高赞的动态题解，还是比较好懂得，主要的要点在于理解为何是
"(" + 【i=p时所有括号的排列组合】 + ")" + 【i=q时所有括号的排列组合】
因为其实有种对称的情况，所有的可能其实是【】+"(" + 【】 + ")" + 【】，但是所有元素都是左右括号，所以第一位置+第二位置其实是和第二位置+第三位置重复的了。
下面是完整题解：
> 反思：
> 首先，面向小白：什么是动态规划？在此题中，动态规划的思想类似于数学归纳法，当知道所有 i<n 的情况时，我们可以通过某种算法算出 i=n 的情况。
> 本题最核心的思想是，考虑 i=n 时相比 n-1 组括号增加的那一组括号的位置。
> 
> 思路：
> 当我们清楚所有 i<n 时括号的可能生成排列后，对与 i=n 的情况，我们考虑整个括号排列中最左边的括号。
> 它一定是一个左括号，那么它可以和它对应的右括号组成一组完整的括号 "( )"，我们认为这一组是相比 n-1 增加进来的括号。
> 那么，剩下 n-1 组括号有可能在哪呢？
> 【这里是重点，请着重理解】
> 剩下的括号要么在这一组新增的括号内部，要么在这一组新增括号的外部（右侧）。
> 既然知道了 i<n 的情况，那我们就可以对所有情况进行遍历：
> "(" + 【i=p时所有括号的排列组合】 + ")" + 【i=q时所有括号的排列组合】
> 其中 p + q = n-1，且 p q 均为非负整数。
> 事实上，当上述 p 从 0 取到 n-1，q 从 n-1 取到 0 后，所有情况就遍历完了。
> 注：上述遍历是没有重复情况出现的，即当 (p1,q1)≠(p2,q2) 时，按上述方式取的括号组合一定不同。
> 代码：
> 具体代码如下：（时间击败百分之 95，内存击败百分之 99.65）
```
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        if n == 0:
            return []
        total_l = []
        total_l.append([None])    # 0组括号时记为None
        total_l.append(["()"])    # 1组括号只有一种情况
        for i in range(2,n+1):    # 开始计算i组括号时的括号组合
            l = []        
            for j in range(i):    # 开始遍历 p q ，其中p+q=i-1 , j 作为索引
                now_list1 = total_l[j]    # p = j 时的括号组合情况
                now_list2 = total_l[i-1-j]    # q = (i-1) - j 时的括号组合情况
                for k1 in now_list1:  
                    for k2 in now_list2:
                        if k1 == None:
                            k1 = ""
                        if k2 == None:
                            k2 = ""
                        el = "(" + k1 + ")" + k2
                        l.append(el)    # 把所有可能的情况添加到 l 中
            total_l.append(l)    # l这个list就是i组括号的所有情况，添加到total_l中，继续求解i=i+1的情况
        return total_l[n]
```
然后是我的复现，复现过程很哈批，把第二个循环的循环判断i写成n了，疯狂溢出，还是得好好思考啊
```
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<vector<string>> Paren;
        Paren.push_back({""});
        Paren.push_back({"()"});
        for(int i=2;i<n+1;++i){
            vector<string> temp;
            for(int j=0;j<i;++j){
                vector<string> left=Paren[j];
                vector<string> right=Paren[i-j-1];
                for(int x=0;x<left.size();++x)
                    for(int y=0;y<right.size();++y){
                        string s;
                        s="("+left[x] +")"+right[y];
                        temp.push_back(s);
                    } 
            }
            Paren.push_back(temp);
        } 
        return Paren[n];
    }
};
```
然后就是优化问题，看了题解的C++实现发现其实我这样非常不优雅，因为平时不常用的for范围语句在这道题中反而大放异彩，同时可以在定义时确定ve`ctor<vector<string>>`的参数数量，省去push_back
```
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<vector<string>> Paren(n+1);
        Paren.push_back({""});
        Paren.push_back({"()"});
        for(int i=2;i<n+1;++i){
            vector<string> temp;
            for(int j=0;j<i;++j)
                for(auto left:Paren[j])
                    for(auto right:Paren[i-j-1]){
                        string s="("+left +")"+right;
                        Paren[i].push_back(s);
                    } 
        } 
        return Paren[n];
    }
};
```

> 下面是官方题解，以后有空可以回头看看
> 方法一：暴力法
> 思路
> 我们可以生成所有 2^{2n}  个 '(' 和 ')' 字符构成的序列。然后，我们将检查每一个是否有效。
> 
> 算法
> 为了生成所有序列，我们使用递归。长度为 n 的序列就是 '(' 加上所有长度为 n-1 的序列，以及 ')' 加上所有长度为 n-1 的序列。
> 为了检查序列是否为有效的，我们会跟踪 平衡，也就是左括号的数量减去右括号的数量的净值。如果这个值始终小于零或者不以零结束，该序列就是无效的，否则它是有效的。
```
Java
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> combinations = new ArrayList();
        generateAll(new char[2 * n], 0, combinations);
        return combinations;
    }

    public void generateAll(char[] current, int pos, List<String> result) {
        if (pos == current.length) {
            if (valid(current))
                result.add(new String(current));
        } else {
            current[pos] = '(';
            generateAll(current, pos+1, result);
            current[pos] = ')';
            generateAll(current, pos+1, result);
        }
    }

    public boolean valid(char[] current) {
        int balance = 0;
        for (char c: current) {
            if (c == '(') balance++;
            else balance--;
            if (balance < 0) return false;
        }
        return (balance == 0);
    }
}

def generateParenthesis(self, N):
    if N == 0: return ['']
    ans = []
    for c in xrange(N):
        for left in self.generateParenthesis(c):
            for right in self.generateParenthesis(N-1-c):
                ans.append('({}){}'.format(left, right))
    return ans
```
> 复杂度分析
> 时间复杂度：O(2^{2n}n)，对于 2^{2n}个序列中的每一个，我们用于建立和验证该序列的复杂度为 O(n)。
> 
> 空间复杂度：O(2^{2n}n)，简单地，每个序列都视作是有效的。请参见 方法三 以获得更严格的渐近界限。
> 
> 方法二：回溯法
> 思路和算法
> 只有在我们知道序列仍然保持有效时才添加 '(' or ')'，而不是像 方法一 那样每次添加。我们可以通过跟踪到目前为止放置的左括号和右括号的数目来做到这一点，
> 如果我们还剩一个位置，我们可以开始放一个左括号。 如果它不超过左括号的数量，我们可以放一个右括号。
```
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList();
        backtrack(ans, "", 0, 0, n);
        return ans;
    }

    public void backtrack(List<String> ans, String cur, int open, int close, int max){
        if (cur.length() == max * 2) {
            ans.add(cur);
            return;
        }

        if (open < max)
            backtrack(ans, cur+"(", open+1, close, max);
        if (close < open)
            backtrack(ans, cur+")", open, close+1, max);
    }
}
```
![](file://C:/Users/lab509/Documents/Gridea/post-images/1571226174878.png)

方法三：闭合数
思路

为了枚举某些内容，我们通常希望将其表示为更容易计算的不相交子集的总和。

考虑有效括号序列 S 的 闭包数：至少存在 index >= 0，使得 `S[0], S[1], ..., S[2*index+1]`是有效的。 显然，每个括号序列都有一个唯一的闭包号。 我们可以尝试单独列举它们。

算法

对于每个闭合数 c，我们知道起始和结束括号必定位于索引 0 和` 2*c + 1`。然后两者间的 `2*c` 个元素一定是有效序列，其余元素一定是有效序列。
```
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList();
        if (n == 0) {
            ans.add("");
        } else {
            for (int c = 0; c < n; ++c)
                for (String left: generateParenthesis(c))
                    for (String right: generateParenthesis(n-1-c))
                        ans.add("(" + left + ")" + right);
        }
        return ans;
    }
}
```
> 时间空间复杂度与题解二相同

