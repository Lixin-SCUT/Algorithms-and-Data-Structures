> 给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。
示例 1:
输入: [1,2,3]
输出: 6
示例 2:
输入: [1,2,3,4]
输出: 24
注意:
给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[-1000, 1000]。
输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-product-of-three-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

比较棘手的就是负数了，如果负数纳入考虑的话，就必须是两个负数。。。 
比较智障的方法就是保存五个数，用贪心法来更新hhh
突然发现不太对劲，因为每次更新都要去除一个最小值，那么就得不断排序更新

我一开始还是实现比较笨的方法
另外一个问题就是如何确定有没有被初始化，如果是数组全是负数的话结果还是负数，但是我一开始返回的结果是0，因为值都初始化为0了
于是打算改成用set来管理 让set自动排序
算了直接用sort吧

看了题解后发现第一个方法还是最优解，只是赋值不能是0，必须是最大最小值，然后判断起来比较麻烦 而且不能像我那样区分开负数和正数，比如1，2，3中，1应该也付给min_1

```
class Solution {
public:
    int maximumProduct(vector<int>& nums){
        int max_1=INT_MIN,max_2=INT_MIN,max_3=INT_MIN;
        int min_1=INT_MAX,min_2=INT_MAX;
        for(auto i:nums){
            if(i>max_1)
                swap(max_3,max_2),swap(max_2,max_1),max_1=i;
            else if(i>max_2)
                swap(max_3,max_2),max_2=i;
            else if(i>max_3)
                max_3=i;
            if(i<min_1)
                swap(min_2,min_1),min_1=i;
            else if(i<min_2)
                min_2=i;
        }
        return max_1*max_2*max_3>max_1*min_1*min_2?max_1*max_2*max_3:max_1*min_1*min_2;
    }
		/*//排序法
    int maximumProduct(vector<int>& nums) {
        int len=nums.size();
        sort(nums.begin(),nums.end());
        return nums[len-1]*nums[len-2]*nums[len-3]>nums[len-1]*nums[0]*nums[1]?nums[len-1]*nums[len-2]*nums[len-3]:nums[len-1]*nums[0]*nums[1];

    }
    */
};
```

官方题解：
> 方法一：排序
我们将数组进行升序排序，如果数组中所有的元素都是非负数，那么答案即为最后三个元素的乘积。
如果数组中出现了负数，那么我们还需要考虑乘积中包含负数的情况，显然选择最小的两个负数和最大的一个正数是最优的，即为前两个元素与最后一个元素的乘积。
上述两个结果中的较大值就是答案。注意我们可以不用判断数组中到底有没有正数，0 或者负数，因为上述两个结果实际上已经包含了所有情况，最大值一定在其中。
```
Java
public class Solution {
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        return Math.max(nums[0] * nums[1] * nums[nums.length - 1], nums[nums.length - 1] * nums[nums.length - 2] * nums[nums.length - 3]);
    }
}
```
> 复杂度分析
时间复杂度：O(NlogN)，其中 N 是数组的长度。
空间复杂度：O(logN)，为排序使用的空间。

> 方法二：线性扫描
在方法一中，我们实际上只要求出数组中最大的三个数以及最小的两个数，因此我们可以不用排序，用线性扫描直接得出这五个数。
```
Java
public class Solution {
    public int maximumProduct(int[] nums) {
        int min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE;
        int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE, max3 = Integer.MIN_VALUE;
        for (int n: nums) {
            if (n <= min1) {
                min2 = min1;
                min1 = n;
            } else if (n <= min2) {     // n lies between min1 and min2
                min2 = n;
            }
            if (n >= max1) {            // n is greater than max1, max2 and max3
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (n >= max2) {     // n lies betweeen max1 and max2
                max3 = max2;
                max2 = n;
            } else if (n >= max3) {     // n lies betwen max2 and max3
                max3 = n;
            }
        }
        return Math.max(min1 * min2 * max1, max1 * max2 * max3);
    }
}
```
> 复杂度分析
时间复杂度：O(N)。
空间复杂度：O(1)。

