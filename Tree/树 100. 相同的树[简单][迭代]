> 给定两个二叉树，编写一个函数来检验它们是否相同。
> 如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。
> 示例 1:
> 输入:   1         1
>           / \       / \
>          2   3     2   3
>        [1,2,3],   [1,2,3]
> 输出: true
> 示例 2:
> 输入:   1          1
>           /           \
>          2             2
>         [1,2],     [1,null,2]
> 输出: false
> 示例 3:
> 输入:    1         1
>           / \       / \
>          2   1     1   2
>         [1,2,1],   [1,1,2]
> 输出: false
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/same-tree
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

补充迭代方法：
实现注意点：
1.整体为层次遍历
2.NULL也要push进queue里面，否则无法比较
3.将check提取出来做一个函数，实现面向对象的特点
```
    bool isSameTree(TreeNode* p, TreeNode* q){
        queue<TreeNode*> treep,treeq;
        treep.push(p);
        treeq.push(q);
        while(treep.size()||treeq.size()){
            p=treep.front(),treep.pop();
            q=treeq.front(),treeq.pop();
            if(!check(p,q))
                return false; 
            if(p){
                treep.push(p->left);
                treep.push(p->right);
            }
            if(q){
                treeq.push(q->left);
                treeq.push(q->right);
            }
        }
        return true;   
    }
    
    bool check(TreeNode* p, TreeNode* q){
        if(p==NULL&&q==NULL)
            return true;
        else if(!(p!=NULL&&q!=NULL))
            return false;
        
        if(p->val!=q->val)
            return false;
         
        return true;
    }
```
