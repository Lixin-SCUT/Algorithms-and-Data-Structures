> 给定一个二叉树，找出其最大深度。
> 二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
> 说明: 叶子节点是指没有子节点的节点。
> 示例：
> 给定二叉树 [3,9,20,null,null,15,7]，
>     3
>    / \
>   9  20
>      /  \
>    15   7
> 返回它的最大深度 3 。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/maximum-depth-of-binary-tree
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

其实那个题号顺序还是有那么一点问题，我感觉这道题理应放在111前面
寻找最小深度的时候可着实是麻烦了一把，这一次求最大深度，就没那么麻烦了，直接大力出奇迹，连叶节点的判断都不用了，反正i最大的那个肯定就是叶节点（非叶节点的深度不可能超过叶节点的）
代码也非常简洁：
```
class Solution {
public:
    int maxDepth(TreeNode* root) {
        return preorder(root,0);
    }
    
    int preorder(TreeNode* cur,int i){
        if(cur==NULL)
            return i;
        return max(preorder(cur->left,i+1),preorder(cur->right,i+1));
    }
};
```

官方题解如下：

> 方法一：递归
> 算法
> 直观的方法是通过递归来解决问题。在这里，我们演示了 DFS（深度优先搜索）策略的示例。
```
Java
class Solution {
  public int maxDepth(TreeNode root) {
    if (root == null) {
      return 0;
    } else {
      int left_height = maxDepth(root.left);
      int right_height = maxDepth(root.right);
      return java.lang.Math.max(left_height, right_height) + 1;
    }
  }
}
```
> 复杂度分析
时间复杂度：我们每个结点只访问一次，因此时间复杂度为 O(N)，
其中 N 是结点的数量。
空间复杂度：在最糟糕的情况下，树是完全不平衡的，例如每个结点只剩下左子结点，递归将会被调用 N 次（树的高度），因此保持调用栈的存储将是 O(N)。但在最好的情况下（树是完全平衡的），树的高度将是log(N)。因此，在这种情况下的空间复杂度将是O(log(N))。

> 方法二：迭代
> 我们还可以在栈的帮助下将上面的递归转换为迭代。
> 我们的想法是使用 DFS 策略访问每个结点，同时在每次访问时更新最大深度。
> 所以我们从包含根结点且相应深度为 1 的栈开始。然后我们继续迭代：将当前结点弹出栈并推入子结点。每一步都会更新深度。
```
Java
import javafx.util.Pair;
import java.lang.Math;

class Solution {
  public int maxDepth(TreeNode root) {
    Queue<Pair<TreeNode, Integer>> stack = new LinkedList<>();
    if (root != null) {
      stack.add(new Pair(root, 1));
    }

    int depth = 0;
    while (!stack.isEmpty()) {
      Pair<TreeNode, Integer> current = stack.poll();
      root = current.getKey();
      int current_depth = current.getValue();
      if (root != null) {
        depth = Math.max(depth, current_depth);
        stack.add(new Pair(root.left, current_depth + 1));
        stack.add(new Pair(root.right, current_depth + 1));
      }
    }
    return depth;
  }
};
```
> 复杂度分析
时间复杂度：O(N)。
空间复杂度：O(N)。

官方的解法一致，这道题还是比较简单的。
