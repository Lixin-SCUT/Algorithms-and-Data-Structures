> 给定一个二叉树，返回所有从根节点到叶子节点的路径。
> 说明: 叶子节点是指没有子节点的节点。
> 示例:
> 输入:
>    1
>  /   \
> 2     3
>  \
>   5
> 输出: ["1->2->5", "1->3"]
> 解释: 所有根节点到叶子节点的路径为: 1->2->5, 1->3
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/binary-tree-paths
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

迭代版实现：
```
    vector<string> binaryTreePaths(TreeNode* root){
        stack<TreeNode*> treestack;
        stack<string> stringstack;
        treestack.push(root);
        stringstack.push("");
        TreeNode *cur;
        vector<string> res;
        string temp;
        while(treestack.size()){
            cur=treestack.top();
            temp=stringstack.top();
            treestack.pop();
            stringstack.pop();
            if(cur==NULL)
                continue;
            if(cur->left==NULL&&cur->right==NULL){
                temp+=to_string(cur->val);
                res.push_back(temp);
                continue;
            }
            if(cur->right)
                treestack.push(cur->right),stringstack.push(temp+to_string(cur->val)+"->");
            if(cur->left)
                treestack.push(cur->left),stringstack.push(temp+to_string(cur->val)+"->");
            
        }
        return res;
    }
```
迭代法的难题在于怎么保存string？ 
题解中是直接用一个同步的string的stack来保存
但是注意一开始不是压入root的val，而是必须压入一个空字符，否则会出现两次root的val或者如果root为null的话直接报错
