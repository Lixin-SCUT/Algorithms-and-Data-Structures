> 翻转一棵二叉树。
> 示例：
> 输入：
>      4
>    /   \
>   2     7
>  / \   / \
> 1   3 6   9
> 输出：
>      4
>    /   \
>   7     2
>  / \   / \
> 9   6 3   1
> 备注:
> 这个问题是受到 Max Howell 的 原问题 启发的 ：
> 
> 谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/invert-binary-tree
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
（皮一下：太糟糕了==fuck off，hhh）

这道题一开始倒是让我想起了昨天的镜像题，就是同时遍历两个方向然后交换val，但是想了一下这样是不可行的，只有满二叉树的情况能这么干，比如1-2-3如果全是右子树，那就没法用val和一堆NULL互换了
然后想了一下肯定得从当前结点进行处理，因为不能直接用val的话就必须交换指针值，交换指针值必须在当前结点操作。然后顺势就想到了直接交换左右子树，然后发现可以直接使用先序遍历来交换就好。
代码如下
```
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==NULL)
            return NULL;
        swap(root->left,root->right);
        invertTree(root->left);
        invertTree(root->right);
        return root;
    }
};
```

其实就是前序遍历加了个swaphhh
> 然后来看官方题解：
> 方法一 （递归） 【通过】
> 这是一个非常经典的树的问题，这个问题很适合用递归方法来解决。
> 算法
> 反转一颗空树结果还是一颗空树。对于一颗根为 r，左子树为 left， 右子树为 right的树来说，它的反转树是一颗根为 r，左子树为 right的反转树，右子树为 left 的反转树的树。
Java
```
public TreeNode invertTree(TreeNode root) {
    if (root == null) {
        return null;
    }
    TreeNode right = invertTree(root.right);
    TreeNode left = invertTree(root.left);
    root.left = right;
    root.right = left;
    return root;
}
```
> 复杂度分析
> 既然树中的每个节点都只被访问一次，那么时间复杂度就是 O(n)，其中 n 是树中节点的个数。在反转之前，不论怎样我们至少都得访问每个节点至少一次，因此这个问题无法做地比 O(n) 更好了。
> 本方法使用了递归，在最坏情况下栈内需要存放 O(h) 个方法调用，其中 h 是树的高度。由于h∈O(n)，可得出空间复杂度为 O(n)。
> 
> 方法二 （迭代） 【通过】
> 我们也可以用迭代方法来解决这个问题，这种做法和深度优先搜索（Breadth-fist Search, BFS）很接近。
> 算法
> 这个方法的思路就是，我们需要交换树中所有节点的左孩子和右孩子。因此可以创一个队列来存储所有左孩子和右孩子还没有被交换过的节点。开始的时候，只有根节点在这个队列里面。只要这个队列不空，就一直从队列中出队节点，然后互换这个节点的左右孩子节点，接着再把孩子节点入队到队列，对于其中的空节点不需要加入队列。最终队列一定会空，这时候所有节点的孩子节点都被互换过了，直接返回最初的根节点就可以了。
Java
```
public TreeNode invertTree(TreeNode root) {
    if (root == null) return null;
    Queue<TreeNode> queue = new LinkedList<TreeNode>();
    queue.add(root);
    while (!queue.isEmpty()) {
        TreeNode current = queue.poll();
        TreeNode temp = current.left;
        current.left = current.right;
        current.right = temp;
        if (current.left != null) queue.add(current.left);
        if (current.right != null) queue.add(current.right);
    }
    return root;
}
```
> 复杂度分析
> 既然树中的每个节点都只被访问/入队一次，时间复杂度就是 O(n)，其中 n 是树中节点的个数。
> 空间复杂度是O(n)，即使在最坏的情况下，也就是队列里包含了树中所有的节点。对于一颗完整二叉树来说，叶子节点那一层拥有ceil(n/2) =O(n) 个节点。

