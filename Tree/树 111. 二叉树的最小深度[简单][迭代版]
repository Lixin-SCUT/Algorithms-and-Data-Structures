> 给定一个二叉树，找出其最小深度。
> 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。
> 说明: 叶子节点是指没有子节点的节点。
> 示例:
> 给定二叉树 [3,9,20,null,null,15,7],
>     3
>    / \
>   9  20
>     /  \
>    15   7
> 返回它的最小深度  2.
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/minimum-depth-of-binary-tree
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

迭代版实现：
```
class Solution {
public:
    int minDepth(TreeNode* root){
        queue<pair<TreeNode*,int>> node_queue;
        if(root==NULL) return 0;
        node_queue.push({root,1});
        pair<TreeNode*,int> cur;
        while(node_queue.size()){
            cur=node_queue.front();
            node_queue.pop();
            if(cur.first->left==NULL&&cur.first->right==NULL)
                return cur.second;
            if(cur.first->left)
                node_queue.push({cur.first->left,cur.second+1});
            if(cur.first->right)
                node_queue.push({cur.first->right,cur.second+1});
        }
        return -1;
    }
```
这里我把节点和层次结合成pair了，其实在循环中最好还是用变量来表示节点和层次，否则一直用cur.first和cur.second的话可读性很差
