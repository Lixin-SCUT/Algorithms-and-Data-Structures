> 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
> 示例:
> 输入: 3
> 输出: 5
> 解释:
> 给定 n = 3, 一共有 5 种不同结构的二叉搜索树:
>    1         3     3      2      1
>       \       /     /      / \      \
>      3     2     1      1   3      2
>     /     /       \                 \
>    2     1         2                 3
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/unique-binary-search-trees
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

```
 class Solution {
public:
    
    int numTrees(int n) {
        vector<int> vi(n+1,0);
        vi[0]=1;
        for(int i=1;i<=n;++i){
            int res=0;
            for(int j=1;j<=i;++j){
               res+=vi[j-1]*vi[i-j]; 
            }
            vi[i]=res;
        }
        return vi[n];
    }
};
```

//一开始想单纯地找n和树的可能性之间的关系，结果发现不靠谱，因为单纯地在n-1的可能里加上1个值的话会有重复的情况
//然后就想到以根为参考点的方法，就是 1，2，3中，分别考虑根节点为1，2，3的可能，此时就把问题化为两边子树的可能性了
//最后看了题解发现这就是动态规划嘛，从n=1的情况开始推到n=n的情况
//需要注意的是 当子树节点树为0的时候也是视为一种可能性。然后就是vi的长度是n+1，需要额外保存0的情况
//然后就是不能把根结底算进去
非常操蛋的是8ms只击败了12%，题解里面肯定是有很简单的数学方法
//果然是，其实就是把第二个循环变成了通用公式

然后来看一下网友题解：
> 思路
标签：动态规划
假设n个节点存在二叉排序树的个数是G(n)，令f(i)为以i为根的二叉搜索树的个数，则
G(n) = f(1) + f(2) + f(3) + f(4) + ... + f(n)
当i为根节点时，其左子树节点个数为i-1个，右子树节点为n-i，则
f(i) = G(i-1)*G(n-i)
综合两个公式可以得到 卡特兰数 公式
G(n) = G(0)*G(n-1)+G(1)*(n-2)+...+G(n-1)*G(0)
代码
```
Java
class Solution {
    public int numTrees(int n) {
        int[] dp = new int[n+1];
        dp[0] = 1;
        dp[1] = 1;
        
        for(int i = 2; i < n + 1; i++)
            for(int j = 1; j < i + 1; j++) 
                dp[i] += dp[j-1] * dp[i-j];
        
        return dp[n];
    }
}
```

官方题解：
![](file://C:/Users/lab509/Documents/Gridea/post-images/1575596257408.png)
复杂度分析
时间复杂度 : O(N)，只有一层循环。
空间复杂度 : O(1)，只需要一个变量来存储中间与最终结果。

