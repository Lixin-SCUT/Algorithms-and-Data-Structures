> 序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。
请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。
示例: 
你可以将以下二叉树：
    1
   / \
  2   3
     / \
    4   5
序列化为 "[1,2,3,null,null,4,5]"
提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。
说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题可以说是很曲折了 
1.一开始以为层次遍历比较好，但是看了一下题解发现还是先序遍历比较方便，因为可以按照string至今进行链接，而层次遍历需要一个队列来保存 
2.题解中的大佬用了ostringstream和istringstream，很方便，很值得学习。
3.然后我就在上述两个stream中翻了车，一开始是哈皮了，忘了string的push_back要求的是单引号的字符变量‘#’而不是直接string，所以“#”和to_string都是没法用pushback的，只能用加号或者单引号。另一个就是ostringstream是有格式的，所以必须用空格隔开将连续的数字隔开，否则会连起来stoi会输出一个超级大的数字（但是似乎允许123#123这种形式，并输出 “123” “#” “123”三者） 
4.剩下的就是stream的使用了吧，dalao的思维还是很厉害的。
5.还有的话就是理解一下先序遍历为何可以重建二叉树（等等！大话数据结构里面不是说建树和遍历只需要改一下相应的就好嘛hhh，确认了！！快回去复习大话数据结构！！！就在6.9节）

代码如下：
```
class Codec {
public:
   /*string serialize(TreeNode* root) {
        ostringstream out;
        serialize(root,out);
        return out.str();
    }*/

    /*void serialize(TreeNode* root,ostringstream& out){
        if(root){
            out<<root->val<<' ';
            serialize(root->left,out);
            serialize(root->right,out);
        }else{
            out<<"# ";
        }
        
    }*/
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string s;
        serialize(root,s);
        return s;
    }

    void serialize(TreeNode *cur,string &s){
        s.push_back(' ');
        if(cur==NULL){
            s.push_back('#');
            return;
        }
        s+=to_string(cur->val);
        serialize(cur->left,s);
        serialize(cur->right,s);
    } 

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        istringstream is(data);
        return deserialize(is);
    }

    TreeNode* deserialize(istringstream &is){
        string val;
        is>>val;
        if(val=="#")
         return NULL;
        
        TreeNode* cur=new TreeNode(stoi(val));
       cur->left=deserialize(is);
        cur->right=deserialize(is);
        return cur;
    }

    /*TreeNode* deserialize(istringstream& in){
        string val;
        in>>val;
        if(val=="#"){
            return nullptr;
        }
        TreeNode* root=new TreeNode(stoi(val));
        root->left=deserialize(in);
        root->right=deserialize(in);
        return root;
    }*/

};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
```

然后来看大佬的题解吧
> 解法一 先序遍历法
先序遍历二叉树时，将节点输出。
重点是碰到NULL时，也要将其用#标识并输出。NULL节点虽然不是数字，但是能决定二叉树的结构。没有NULL节点，单靠先序序列是无法恢复成树的。
节点与节点之间用空格隔开。
例如：
    1
   / \
  2   3
      / \
     4   5
其序列化后为， 1 2 # # 3 4 # # 5 # #
可以发现，#标识的NULL节点，紧跟在其父节点的后面。
```
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root) return string();
        stringstream ss;
        dfs(root,ss);
        return ss.str();
    }
    
    void dfs(TreeNode* rt,stringstream& ss){
        if(!rt){
            ss << "# ";
            return ;
        }
        ss << to_string(rt->val) <<" ";
        dfs(rt->left,ss);
        dfs(rt->right,ss);
    }
```
> 重建时，思路很清晰。
先重建根节点，如果是NULL节点，返回。如果是数字节点，递归重建左子树。之后，再重建右子树。
```
void rebuild(TreeNode* & rt,stringstream& ss){
		string t;
		ss >> t;
		if(t[0] == '#'){
				rt = NULL;
				return;
		}
		int v = stoi(t);
		rt = new TreeNode(v);
		rebuild(rt->left,ss);
		rebuild(rt->right,ss);
}

// Decodes your encoded data to tree.
TreeNode* deserialize(string data) {
		if(data.empty()) return NULL;
		TreeNode* rt = NULL;
		stringstream ss(data);
		rebuild(rt,ss);
		return rt;
}
```
> 解法二 层次遍历法
层次遍历也能序列化。在序列化时，遇到NULL节点时，也要输出为#。
用队列设计层次遍历。
```
	string serialize(TreeNode* root) {
			if(!root) return "";
			stringstream ss;
			queue<TreeNode*> Q;
			Q.push(root);
			while(Q.size()){
					TreeNode* p = Q.front();Q.pop();
					if(!p) ss <<"# ";
					else{
							ss << p->val <<" ";
							Q.push(p->left);
							Q.push(p->right);
					}
			}
			return ss.str();
	}
```
> 难点在于层次遍历的反序列化。不容易想清楚重建的顺序应该是怎么样的。
    1
   / \
	2   3
      / \
     4   5
序列化后， 1 2 3 # # 4 5 # # # # 。
第一个节点是1，是根节点。但是还未完成，其还有两个子节点。
此时，只能将存入队列。
接着是2，其是1的左子节点。
接着是3，其是1的右子节点。
可以看出，除了根节点，后面的节点必须成对出现，且第一个是某节点的左子节点，第二个是其右子节点。
同样，2和3的子节点也还没有出现，同样要先入队列。

```
TreeNode* deserialize(string data) {
		if(data.empty()) return NULL;
		stringstream ss(data);
		string t;
		ss >> t;
		TreeNode* rt = new TreeNode(stoi(t));
		queue<TreeNode*> Q;
		Q.push(rt);
		while(Q.size()){
				TreeNode* p = Q.front();Q.pop();
				ss >> t;
				if(t[0] == '#'){
						p->left = NULL;
				}else{
						p->left = new TreeNode(stoi(t));
						Q.push(p->left);
				}
				ss >> t;
				if(t[0] == '#'){
						p->right = NULL;
				}else{
						p->right = new TreeNode(stoi(t));
						Q.push(p->right);
				}
		}
		return rt;
}
```

另一位C++大佬的题解，没有解析
```
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        ostringstream out;
        serialize(root,out);
        return out.str();
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        istringstream in(data);
        return deserialize(in);
    }
private:
    void serialize(TreeNode* root,ostringstream& out){
        if(root){
            out<<root->val<<' ';
            serialize(root->left,out);
            serialize(root->right,out);
        }else{
            out<<"# ";
        }
        
    }
    TreeNode* deserialize(istringstream& in){
        string val;
        in>>val;
        if(val=="#"){
            return nullptr;
        }
        TreeNode* root=new TreeNode(stoi(val));
        root->left=deserialize(in);
        root->right=deserialize(in);
        return root;
    }
};
```

官方题解的解析：
![](file://C:/Users/lab509/Documents/Gridea/post-images/1575272094124.png)
其中机翻错误加泰罗尼亚语的数字==卡特兰数
