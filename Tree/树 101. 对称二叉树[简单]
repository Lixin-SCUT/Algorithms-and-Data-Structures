> 给定一个二叉树，检查它是否是镜像对称的。
> 
> 例如，二叉树 [1,2,2,3,4,4,3] 是对称的。
> 
>     1
>    / \
>   2   2
>  / \ / \
> 3  4 4  3
> 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:
> 
>     1
>    / \
>   2   2
>    \   \
>    3    3
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/symmetric-tree
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

我的思路是1.先进行层次遍历 2.对层次遍历得到的vector中的vector进行对称性检验
主要需要注意的地方是必须把null也算进去，等于强行构造一棵满二叉树，我的处理方法是null插入值-1，其实这是不严谨的，如果被知道了很容易就被攻破了
代码如下：

```
class Solution {
    vector<vector<int>> ol;
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)
            return true;
        orderlevel(root,0);
        for(auto vi:ol){
            for(auto beg=vi.begin(),end=vi.end()-1;beg<end;++beg,--end){
                if(beg==end)
                    return false;
                if(*beg!=*end)
                    return false;
            }
        }
        return true;
    }
    
    void orderlevel(TreeNode* cur,int level){
        if(ol.size()==level)
            ol.push_back(vector<int>());
        if(cur==NULL){
            ol[level].push_back(-1);
            return;
        }
        ol[level].push_back(cur->val);
        orderlevel(cur->left,level+1);
        orderlevel(cur->right,level+1);
        return;
    }   
};
```

然后来看一下官方算法吧
> 方法：递归
> 如果一个树的左子树与右子树镜像对称，那么这个树是对称的。

![](file://C:/Users/lab509/Documents/Gridea/post-images/1573402185238.png)
> 因此，该问题可以转化为：两个树在什么情况下互为镜像？
> 
> 如果同时满足下面的条件，两个树互为镜像：
> 
> 它们的两个根结点具有相同的值。
> 每个树的右子树都与另一个树的左子树镜像对称。

![](file://C:/Users/lab509/Documents/Gridea/post-images/1573402200685.png)
> 就像人站在镜子前审视自己那样。镜中的反射与现实中的人具有相同的头部，但反射的右臂对应于人的左臂，反之亦然。
> 上面的解释可以很自然地转换为一个递归函数，如下所示：
> 
```
Java
public boolean isSymmetric(TreeNode root) {
    return isMirror(root, root);
}

public boolean isMirror(TreeNode t1, TreeNode t2) {
    if (t1 == null && t2 == null) return true;
    if (t1 == null || t2 == null) return false;
    return (t1.val == t2.val)
        && isMirror(t1.right, t2.left)
        && isMirror(t1.left, t2.right);
}
```

> 复杂度分析
> 时间复杂度：O(n)，因为我们遍历整个输入树一次，所以总的运行时间为 O(n)，其中 n 是树中结点的总数。
> 空间复杂度：递归调用的次数受树的高度限制。在最糟糕情况下，树是线性的，其高度为 O(n)。因此，在最糟糕的情况下，由栈上的递归调用造成的空间复杂度为 O(n)。
> 
> 方法二：迭代
> 除了递归的方法外，我们也可以利用队列进行迭代。队列中每两个连续的结点应该是相等的，而且它们的子树互为镜像。最初，队列中包含的是 root 以及 root。该算法的工作原理类似于 BFS，但存在一些关键差异。每次提取两个结点并比较它们的值。然后，将两个结点的左右子结点按相反的顺序插入队列中。当队列为空时，或者我们检测到树不对称（即从队列中取出两个不相等的连续结点）时，该算法结束。
> 
Java
```
public boolean isSymmetric(TreeNode root) {
    Queue<TreeNode> q = new LinkedList<>();
    q.add(root);
    q.add(root);
    while (!q.isEmpty()) {
        TreeNode t1 = q.poll();
        TreeNode t2 = q.poll();
        if (t1 == null && t2 == null) continue;
        if (t1 == null || t2 == null) return false;
        if (t1.val != t2.val) return false;
        q.add(t1.left);
        q.add(t2.right);
        q.add(t1.right);
        q.add(t2.left);
    }
    return true;
}
```
> 复杂度分析
> 时间复杂度：O(n)，因为我们遍历整个输入树一次，所以总的运行时间为 O(n)，其中 n是树中结点的总数。
> 空间复杂度：搜索队列需要额外的空间。在最糟糕情况下，我们不得不向队列中插入 O(n) 个结点。因此，空间复杂度为 O(n)。
> 

第一个迭代法太秀啦，直接对同一棵树本身进行镜像方向的遍历，确实很快很强。


