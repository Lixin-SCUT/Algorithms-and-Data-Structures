> 给定一个二叉树，判断它是否是高度平衡的二叉树。
> 本题中，一棵高度平衡二叉树定义为：
> 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。
> 示例 1:
> 给定二叉树 [3,9,20,null,null,15,7]
>     3
>    / \
>   9  20
>      /  \
>    15   7
> 返回 true 。
> 示例 2:
> 给定二叉树 [1,2,2,3,3,null,null,4,4]
> 
>        1
>       / \
>      2   2
>     / \
>    3   3
>   / \
>  4   4
> 返回 false 。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/balanced-binary-tree
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题的难点在于不平衡出现的点是不确定的，有可能在叶子节点的父母节点开始出现不平衡，也有可能在根节点才开始出现不平衡
所以这一次的迭代我打算使用先走到叶节点，然后再逐步返回，返回值为当前节点到最远叶节点的距离，然后返回到上一节点就可以利用左右节点返回的值进行比较
为了方便就设置一个全局bool值。
```
class Solution {
bool res=true;
public:
    bool isBalanced(TreeNode* root) {
        preorder(root,0);
        return res;
    }
    
    int preorder(TreeNode* cur,int i){
        if(cur==NULL)
            return i;
        int left=preorder(cur->left,i+1);
        int right=preorder(cur->right,i+1);
        if(abs(left-right)>1)
            res=false;
        return left>right?left+1:right+1;
    }
};
```

 然后来看一下网友题解：
> 从底至顶（提前阻断法）
> 	对二叉树做深度优先遍历DFS，递归过程中：
> 		终止条件：当DFS越过叶子节点时，返回高度0；
> 		返回值：
> 				从底至顶，返回以每个节点root为根节点的子树最大高度(左右子树中最大的高度值加1max(left,right) + 1)；
> 				当我们发现有一例 左/右子树高度差 ＞ 1 的情况时，代表此树不是平衡树，返回-1；
> 		当发现不是平衡树时，后面的高度计算都没有意义了，因此一路返回-1，避免后续多余计算。
> 最差情况是对树做一遍完整DFS，时间复杂度为 O(N)。

```
class Solution {
    public boolean isBalanced(TreeNode root) {
        return depth(root) != -1;
    }

    private int depth(TreeNode root) {
        if (root == null) return 0;
        int left = depth(root.left);
        if(left == -1) return -1;
        int right = depth(root.right);
        if(right == -1) return -1;
        return Math.abs(left - right) < 2 ? Math.max(left, right) + 1 : -1;
    }
}
```

> 从顶至底（暴力法）
> 		构造一个获取当前节点最大深度的方法 depth() ，通过比较左右子树最大高度差abs(self.depth(root.left) - self.depth(root.right))，来判断以此节点为根节点下是否是二叉平衡树；
> 		从顶至底DFS，以每个节点为根节点，递归判断是否是平衡二叉树：
> 				若所有根节点都满足平衡二叉树性质，则返回 True ；
> 				若其中任何一个节点作为根节点时，不满足平衡二叉树性质，则返回False。
> 本方法产生大量重复的节点访问和计算，最差情况下时间复杂度 O(N^2)。
```
class Solution {
    public boolean isBalanced(TreeNode root) {
        if (root == null) return true;
        return Math.abs(depth(root.left) - depth(root.right)) <= 1 && isBalanced(root.left) && isBalanced(root.right);
    }

    private int depth(TreeNode root) {
        if (root == null) return 0;
        return Math.max(depth(root.left), depth(root.right)) + 1;
    }
}
```

网友的想法比较好，其实可以利用res的值提前终止判断，然后的话我发现我忘了在返回值+1了hhh，不过是不影响了，因为是否是平衡树是在叶节点就可以判断的了。





