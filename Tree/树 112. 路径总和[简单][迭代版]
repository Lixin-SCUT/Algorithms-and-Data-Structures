> 给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。
> 说明: 叶子节点是指没有子节点的节点。
> 示例: 
> 给定如下二叉树，以及目标和 sum = 22，
> 
>               5
>              / \
>             4   8
>            /   / \
>           11  13  4
>          /  \      \
>         7    2      1
> 返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/path-sum
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

迭代版实现：
```
    //迭代版 
    bool hasPathSum(TreeNode* root, int sum) {
        stack<TreeNode*> treestack;
        stack<int> tempsum;
        if(root==NULL) return false;
        treestack.push(root);
        tempsum.push(root->val);
        TreeNode *cur;
        int temp;
        while(treestack.size()){
            cur=treestack.top();
            treestack.pop();
            temp=tempsum.top();
            tempsum.pop();
            if(cur->left==NULL&&cur->right==NULL)
                if(temp==sum)
                    return true;
            if(cur->left){
                treestack.push(cur->left);
                tempsum.push(temp+cur->left->val);
            }
            if(cur->right){
                treestack.push(cur->right);
                tempsum.push(temp+cur->right->val);
            }
        }
        return false;
    }
```
   题解用的是不断用sum减去结点的值，最后为0了就返回true，比我的方法节省了一个temp变量，值得学习
