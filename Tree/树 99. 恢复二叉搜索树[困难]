> 二叉搜索树中的两个节点被错误地交换。
> 请在不改变其结构的情况下，恢复这棵树。
> 示例 1:
> 输入: [1,3,null,null,2]
>    1
>   /
>  3
>   \
>    2
> 输出: [3,1,null,null,2]
>    3
>   /
>  1
>   \
>    2
> 示例 2:
> 输入: [3,1,4,null,null,2]
>   3
>  / \
> 1   4
>    /
>   2
> 输出: [2,1,4,null,null,3]
>   2
>  / \
> 1   4
>    /
>   3
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/recover-binary-search-tree
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

```
class Solution {
public:
    TreeNode *tempnode,*tempnode1,*tempnode2;
    void recoverTree(TreeNode* root){
        inorder(root);
        swap(tempnode1->val,tempnode2->val);
        return;
    }
    
    void inorder(TreeNode* cur)    
    {
        if(cur==NULL)
            return;
        inorder(cur->left);
        if(tempnode&&cur->val<tempnode->val){
            if(tempnode1==NULL)
                tempnode1=tempnode;
            tempnode2=cur;
        }
        tempnode=cur;
        inorder(cur->right);
        return;
    }
};
```
1.一开始想着使用中序遍历的vector来交换两个点，但是思路不太对，我的想法是找到后一个值比前一个值小的时候就互换，但是是不对的。比如序列 3，2，1应该交换3和1，但是我的思路会交换3和2，所以应该找到最后一个矛盾点
2.通过草稿纸演算，我发现一般来说会出现一到两个点的矛盾点（亦即前一个值大于后一个值），我打算保存两个指针值然后交换值
3.这下又被坏习惯坑了，比如 TreeNode* temp1,temp2; 其实\*号的位置很重要，这样子的话temp2被定义为TreeNode而是相应的指针
4.终于通过了，主要注意的点是需要保存两个异常值，同时更新异常值的方式很重要，因为可能出现相邻互换的情况，所以第一个异常值指针只需要赋值一次，第二个异常指针值就需要赋值两次
5.看了题解之后发现值得优化的点是因为必须保存前一个指针用于保存第一个异常值，所以完全可以用这个指针来得到pre->val，而不需要一个全局int
6.更改后，直接 99.67%和100%，吓到我了

然后看一下网友题解
> 思路:
这道题难点,是找到那两个交换节点,把它交换过来就行了.
这里我们二叉树搜索树的中序遍历(中序遍历遍历元素是递增的)
如下图所示, 中序遍历顺序是 4,2,3,1,我们只要找到节点4和节点1交换顺序即可!
这里我们有个规律发现这两个节点:
第一个节点,是第一个按照中序遍历时候前一个节点大于后一个节点,我们选取前一个节点,这里指节点4;
第二个节点,是在第一个节点找到之后, 后面出现前一个节点大于后一个节点,我们选择后一个节点,这里指节点1;
对于中序遍历,我们有两种方法.
方法一: 迭代
java
```
class Solution {
    public void recoverTree(TreeNode root) {
        Deque<TreeNode> stack = new LinkedList<>();
        TreeNode firstNode = null;
        TreeNode secondNode = null;
        TreeNode pre = new TreeNode(Integer.MIN_VALUE);
        TreeNode p = root;
        while (p != null || !stack.isEmpty()) {
            while (p != null) {
                stack.push(p);
                p = p.left;
            }
            p = stack.pop();
            if (firstNode == null && pre.val > p.val) firstNode = pre;
            if (firstNode != null && pre.val > p.val) secondNode = p;
            pre = p;
            p = p.right;
        }
        int tmp = firstNode.val;
        firstNode.val = secondNode.val;
        secondNode.val = tmp;
    }
}
```
> 方法二: 递归
```
java
class Solution {
    TreeNode firstNode = null;
    TreeNode secondNode = null;
    TreeNode preNode = new TreeNode(Integer.MIN_VALUE);

    public void recoverTree(TreeNode root) {

        in_order(root);
        int tmp = firstNode.val;
        firstNode.val = secondNode.val;
        secondNode.val = tmp;
    }

    private void in_order(TreeNode root) {
        if (root == null) return;
        in_order(root.left);
        if (firstNode == null && preNode.val > root.val) firstNode = preNode;
        if (firstNode != null && preNode.val > root.val) secondNode = root;
        preNode = root;
        in_order(root.right);
    }
}
```
这位网友的思路和我的一致
> 然后来看看其他解法：
解法一 递归
和 98 题有些像。这里的思路如下：
让我们来考虑交换的位置的可能：
根节点和左子树的某个数字交换 -> 由于根节点大于左子树中的所有数，所以交换后我们只要找左子树中最大的那个数，就是所交换的那个数
根节点和右子树的某个数字交换 -> 由于根节点小于右子树中的所有数，所以交换后我们只要在右子树中最小的那个数，就是所交换的那个数
左子树和右子树的两个数字交换 -> 找左子树中最大的数，右子树中最小的数，即对应两个交换的数
左子树中的两个数字交换
右子树中的两个数字交换
思想有了，代码很好写了。

```
public void recoverTree2(TreeNode root) {
    if (root == null) {
        return;
    }
    //寻找左子树中最大的节点
    TreeNode maxLeft = getMaxOfBST(root.left);
    //寻找右子树中最小的节点
    TreeNode minRight = getMinOfBST(root.right);
    
    if (minRight != null && maxLeft != null) {
        //左边的大于根节点，右边的小于根节点，对应情况 3，左右子树中的两个数字交换
        if ( maxLeft.val > root.val && minRight.val < root.val) {
            int temp = minRight.val;
            minRight.val = maxLeft.val;
            maxLeft.val = temp;
        }
    }

    if (maxLeft != null) {
        //左边最大的大于根节点，对应情况 1，根节点和左子树的某个数做了交换
        if (maxLeft.val > root.val) {
            int temp = maxLeft.val;
            maxLeft.val = root.val;
            root.val = temp;
        }
    }

    if (minRight != null) {
        //右边最小的小于根节点，对应情况 2，根节点和右子树的某个数做了交换
        if (minRight.val < root.val) {
            int temp = minRight.val;
						minRight.val = root.val;
            root.val = temp;
        }
    }
    //对应情况 4，左子树中的两个数进行了交换
    recoverTree(root.left);
    //对应情况 5，右子树中的两个数进行了交换
    recoverTree(root.right);

}
//寻找树中最小的节点
private TreeNode getMinOfBST(TreeNode root) {
    if (root == null) {
        return null;
    }
    TreeNode minLeft = getMinOfBST(root.left);
    TreeNode minRight = getMinOfBST(root.right);
    TreeNode min = root;
    if (minLeft != null && min.val > minLeft.val) {
        min = minLeft;
    }
    if (minRight != null && min.val > minRight.val) {
        min = minRight;
    }
    return min;
}

//寻找树中最大的节点
private TreeNode getMaxOfBST(TreeNode root) {
    if (root == null) {
        return null;
    }
    TreeNode maxLeft = getMaxOfBST(root.left);
    TreeNode maxRight = getMaxOfBST(root.right);
    TreeNode max = root;
    if (maxLeft != null && max.val < maxLeft.val) {
        max = maxLeft;
    }
    if (maxRight != null && max.val < maxRight.val) {
        max = maxRight;
    }
    return max;
}
```

然后是空间复杂度为O（1）的莫里斯遍历
>Morris 版中序遍历
因为之前这个方法中用了 pre 变量，为了方便，这里也需要 pre 变量，我们用 pre_new 代替。具体 Morris 遍历算法参见 94 题 。利用 Morris 的话，我们的空间复杂度终于达到了 O（1）。
```
public void recoverTree(TreeNode root) {
    TreeNode first = null;
    TreeNode second = null;
    TreeNode cur = root;
    TreeNode pre_new = null;
    while (cur != null) {
        // 情况 1
        if (cur.left == null) {
            /*******************************************************/
            if (pre_new != null && cur.val < pre_new.val) {
                if (first == null) {
                    first = pre_new;
                    second = cur;
                } else {
                    second = cur;
                }
            }
            pre_new = cur;
            /*******************************************************/
            cur = cur.right;
        } else {
            // 找左子树最右边的节点
            TreeNode pre = cur.left;
            while (pre.right != null && pre.right != cur) {
                pre = pre.right;
            }
            // 情况 2.1
            if (pre.right == null) {
                pre.right = cur;
                cur = cur.left;
            }
           // 情况 2.2
            if (pre.right == cur) {
                pre.right = null; // 这里可以恢复为 null
                /*******************************************************/
                if (pre_new != null && cur.val < pre_new.val) {
                    if (first == null) {
                        first = pre_new;
                        second = cur;
                    } else {
                        second = cur;
                    }
                }
                pre_new = cur;
                /*******************************************************/
                cur = cur.right;
            }
        }
    }
    
    int temp = first.val;
    first.val = second.val;
    second.val = temp;
}
```



