题目描述
> 输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)
```
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
```

首先这道题的隐藏重点是一定是要叶子结点，不能中途满足条件了就输出
本来打算用传值引用的temp来保存中间的`vector<int>`，但是这样递归起来很耗费内存
所以改用回溯法，可以利用vector的pop_back()来很方便地回溯
注意记得叶节点符合条件也得pop_back来回溯
然后注意题目中索然说明数组长度大的数组靠前，但是实际上测试用例并没有遵循这个规定。。。

```
class Solution {
public:
    vector<vector<int> > FindPath(TreeNode* root,int expectNumber) {
        vector<vector<int>> res;
        if(root==NULL)
            return res;
        vector<int> temp;
        FindPath(root,expectNumber,temp,res);
        return res;
    }
    
    void FindPath(TreeNode* cur,
                  int expectNumber,
                  vector<int> &temp,
                  vector<vector<int>> &res
                 )
    {
        expectNumber-=cur->val;
        temp.push_back(cur->val);
        if(cur->left==NULL&&cur->right==NULL){
            if(expectNumber==0)
                res.push_back(temp);
            temp.pop_back();
            return;
        }
        if(cur->left)
            FindPath(cur->left,expectNumber,temp,res);
        if(cur->right)
            FindPath(cur->right,expectNumber,temp,res);
        temp.pop_back();
        return;
    }
};
```

书本题解：
> 规律：当用前序遍历的方式访问到某一节点时，我们把该节点添加到路径上，并累加该节点的值。
如果该节点为叶节点，并且路径中节点值的和刚好等于输入的整数， 则当前路径符合要求，我们把它打印出来。
如果当前节点不是叶节点，则继续访问它的子节点。
当前节点访问结束后，递归函数将自动回到它的父节点。因此，我们在函数退出之前要在路径上删除当前节点并减去当前节 点的值，以确保返回父节点时路径刚好是从根节点到父节点。
我们不难看出保存路径的数据结构实际上是一个栈，因为路径要与递归调用状态一 致，而递归调用的本质就是一个压栈和出栈的过程。
我们用标准模板库中的vector实现了一个栈来保存路径，每次都用push back在路径的末尾添加节点，用pop back在路径的末尾删除节点，这样就保证了栈的先入后出特性。这里没有直接用STL中 的stack的原因是，在stack中只能得到栈顶元素，而我们打印路径的时候需要得到路径上的所有节点，因此在代码实现的时候std::stack不是最好的选择。
```
void FindPath(BinaryTreeNode* pRoot, int expectedSum)
{
    if(pRoot == nullptr)
        return;

    std::vector<int> path;
    int currentSum = 0;
    FindPath(pRoot, expectedSum, path, currentSum);
}

void FindPath
(
    BinaryTreeNode*   pRoot,        
    int               expectedSum,  
    std::vector<int>& path,         
    int&              currentSum
)
{
    currentSum += pRoot->m_nValue;
    path.push_back(pRoot->m_nValue);

    // 如果是叶结点，并且路径上结点的和等于输入的值
    // 打印出这条路径
    bool isLeaf = pRoot->m_pLeft == nullptr && pRoot->m_pRight == nullptr;
    if(currentSum == expectedSum && isLeaf)
    {
        printf("A path is found: ");
        std::vector<int>::iterator iter = path.begin();
        for(; iter != path.end(); ++ iter)
            printf("%d\t", *iter);
        
        printf("\n");
    }

    // 如果不是叶结点，则遍历它的子结点
    if(pRoot->m_pLeft != nullptr)
        FindPath(pRoot->m_pLeft, expectedSum, path, currentSum);
    if(pRoot->m_pRight != nullptr)
        FindPath(pRoot->m_pRight, expectedSum, path, currentSum);

    // 在返回到父结点之前，在路径上删除当前结点，
    // 并在currentSum中减去当前结点的值
    currentSum -= pRoot->m_nValue;
    path.pop_back();
} 
```
