> 给定一个二叉树，判断其是否是一个有效的二叉搜索树。
假设一个二叉搜索树具有如下特征：
节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
示例 1:
输入:
    2
   / \
  1   3
输出: true
示例 2:
输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/validate-binary-search-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

迭代版：
```
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        stack<TreeNode*> node_stack;
        TreeNode *cur=root;
        int cur_num,pre_num;
        bool first_one=true;
        while(cur||node_stack.size()){
            while(cur)
                node_stack.push(cur),cur=cur->left;
            cur=node_stack.top();
            node_stack.pop();
            cur_num=cur->val;
            if(first_one)
                first_one=false;
            else if(cur_num<=pre_num)
                return false;
            pre_num=cur_num;
            cur=cur->right;
        }
        return true;
    }
};
```

这里其实就是利用二叉搜索树的特性-中序遍历就输出有序数组
复习一下迭代实现中序遍历，写不出来就gg了
还是gg了hhh，主要是不太确定root节点怎么处理，回头看了题解是把cur先赋值root然后放到循环判断里面
然后题解很坏啊，我为了节省空间用了两个int而不是vector 但是pre_num的初值很成问题
