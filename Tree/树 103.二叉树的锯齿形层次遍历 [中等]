> 给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。
> 例如：
> 给定二叉树 [3,9,20,null,null,15,7],
>     3
>    / \
>   9  20
>     /  \
>    15   7
> 返回锯齿形层次遍历如下：
> [
>   [3],
>   [20,9],
>   [15,7]
> ]
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题我是直接看的网友题解，倒不是不会做，只是没有比较好的想法
因为这个和前一题不同，前一题我还可以用deque来处理，这一题着实是比较麻烦了（其实也可以用deque，只是相对比较笨的处理方法）
然后网友题解中有个不错的，利用栈来存储，可以选择不同层的时候的入栈顺序，从而实现交替左右（怎么说着说着感觉又蛮麻烦了hhh
所以直接来看网友题解吧

> 大家的做法大都是list或者queue反转，但是这是耗时操作，特别是queue自身并不支持反转（list在c++是双向链表，可以相当于有反转功能），用reverse我觉得可能是耗时的，我的解法是两个stack各自保存一层数据，然后先进后出的特性加上左右节点先后入栈的顺序细节（具体谁先谁后可以看代码）即可恰好对应zigZag的Z字形访问顺序：
> 
> 我的提交执行用时
> 已经战胜 96.52 % 的 cpp 提交记录

```
vector<vector<int>> zigzagLevelOrder(TreeNode *root) {
		//右往左时右先入栈，左往右时，左先入栈。然后要两个栈分别保存每一层级的。
		//这里借鉴了树的层次遍历的思想，不过那是用队列
		vector<vector<int>> r;
		if (!root) return r;
		stack<TreeNode *> d1, d2;
		d1.push(root);
		TreeNode *curr = nullptr;
		vector<int> tmp;
		while (true) {
				while (!d1.empty()) {
						curr = d1.top();
						d1.pop();
						tmp.push_back(curr->val);
						if (curr->left) d2.push(curr->left);
						if (curr->right) d2.push(curr->right);
				}
				if (!tmp.empty()) {
						r.push_back(tmp);
						tmp.clear();
				} else break;

				while (!d2.empty()) {
						curr = d2.top();
						d2.pop();
						tmp.push_back(curr->val);
						if (curr->right) d1.push(curr->right);
						if (curr->left) d1.push(curr->left);
				}
				if (!tmp.empty()) {
						r.push_back(tmp)
```



