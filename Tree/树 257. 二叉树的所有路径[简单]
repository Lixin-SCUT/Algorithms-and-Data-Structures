> 给定一个二叉树，返回所有从根节点到叶子节点的路径。
> 说明: 叶子节点是指没有子节点的节点。
> 示例:
> 输入:
>    1
>  /   \
> 2     3
>  \
>   5
> 输出: ["1->2->5", "1->3"]
> 解释: 所有根节点到叶子节点的路径为: 1->2->5, 1->3
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/binary-tree-paths
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

整体的架构肯定就是前序遍历的了，主要的点在于需要判断叶节点，我一开始只进行了null的判断，导致多了多余路径1->2，所以必须对叶节点进行判断，同时可以分离->这个讨厌的符号的写入
最终代码如下：
```
class Solution {
    vector<string> vs;
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        if(root==NULL)
            return vs;
        //string s=to_string(root->val);
        string s;
        preorder(root,s);
        //preorder(root->left,s);
        //preorder(root->right,s);
        return vs;
    }
    void preorder(TreeNode* cur,string s){
        if(cur==NULL)
            return;
        if(cur->right==NULL&&cur->left==NULL){
            s=s+to_string(cur->val);
            vs.push_back(s);
            return;
        }
        s=s+to_string(cur->val)+"->";
        preorder(cur->left,s);
        preorder(cur->right,s);
        return;
    }
};
```

老规矩官方题解：
> 方法一：递归
> 最直观的方法是使用递归。在递归遍历二叉树时，需要考虑当前的节点和它的孩子节点。如果当前的节点不是叶子节点，则在当前的路径末尾添加该节点，并递归遍历该节点的每一个孩子节点。如果当前的节点是叶子节点，则在当前的路径末尾添加该节点后，就得到了一条从根节点到叶子节点的路径，可以把该路径加入到答案中。
Java
```
class Solution {
    public void construct_paths(TreeNode root, String path, LinkedList<String> paths) {
        if (root != null) {
            path += Integer.toString(root.val);
            if ((root.left == null) && (root.right == null))  // 当前节点是叶子节点
                paths.add(path);  // 把路径加入到答案中
            else {
                path += "->";  // 当前节点不是叶子节点，继续递归遍历
                construct_paths(root.left, path, paths);
                construct_paths(root.right, path, paths);
            }
        }
    }

    public List<String> binaryTreePaths(TreeNode root) {
        LinkedList<String> paths = new LinkedList();
        construct_paths(root, "", paths);
        return paths;
    }
}
```
> 复杂度分析
> 时间复杂度：每个节点只会被访问一次，因此时间复杂度为 O(N)，其中 N 表示节点数目。
> 空间复杂度：O(N)。这里不考虑存储答案 paths 使用的空间，仅考虑额外的空间复杂度。额外的空间复杂度为递归时使用的栈空间，在最坏情况下，当二叉树中每个节点只有一个孩子节点时，递归的层数为 N，此时空间复杂度为 O(N)。在最好情况下，当二叉树为平衡二叉树时，它的高度为log(N)，此时空间复杂度为 O(log(N))。


> 方法二：迭代
> 上面的算法也可以使用迭代（宽度优先搜索）的方法实现。我们维护一个队列，存储节点以及根到该节点的路径。一开始这个队列里只有根节点。在每一步迭代中，我们取出队列中的首节点，如果它是一个叶子节点，则将它对应的路径加入到答案中。如果它不是一个叶子节点，则将它的所有孩子节点加入到队列的末尾。当队列为空时，迭代结束。
```
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        LinkedList<String> paths = new LinkedList();
        if (root == null)
            return paths;

        LinkedList<TreeNode> node_stack = new LinkedList();
        LinkedList<String> path_stack = new LinkedList();
        node_stack.add(root);
        path_stack.add(Integer.toString(root.val));
        TreeNode node;
        String path;
        while (!node_stack.isEmpty()) {
            node = node_stack.pollLast();
            path = path_stack.pollLast();
            if ((node.left == null) && (node.right == null))
                paths.add(path);
            if (node.left != null) {
                node_stack.add(node.left);
                path_stack.add(path + "->" + Integer.toString(node.left.val));
            }
            if (node.right != null) {
                node_stack.add(node.right);
                path_stack.add(path + "->" + Integer.toString(node.right.val));
            }
        }
        return paths;
    }
}
```
> 复杂度分析
> 时间复杂度：O(N)，每个节点只会被访问一次。
> 空间复杂度：O(N)，在最坏情况下，队列中有 N 个节点。

不出所料递归方法和官方的一样（甚至于空间复杂度还要低一点），迭代方法的话老样子还是得用队列deque

