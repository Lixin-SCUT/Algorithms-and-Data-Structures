> 给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）
例如：
给定二叉树 [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：
[
  [15,7],
  [9,20],
  [3]
]
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

迭代版实现：
```
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        deque<vector<int>> res;
        if(root==NULL) return  vector<vector<int>>(res.begin(),res.end());
        queue<pair<TreeNode*,int>> node_queue;
        TreeNode* cur_node;
        node_queue.push({root,0});
        while(node_queue.size()){
            auto cur=node_queue.front();
            node_queue.pop();
            cur_node=cur.first;
            if(res.size()==cur.second)
                res.push_front(vector<int>({}));
            res.front().push_back(cur_node->val);
            if(cur_node->left)
                node_queue.push({cur_node->left,cur.second+1});
            if(cur_node->right)
                node_queue.push({cur_node->right,cur.second+1});
        }
        return vector<vector<int>>(res.begin(),res.end());
    }
    //这里pair不是必须的，可以记录某一层的size然后再循环
```
