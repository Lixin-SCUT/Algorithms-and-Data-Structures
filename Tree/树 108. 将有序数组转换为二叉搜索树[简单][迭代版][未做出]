> 将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。
本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。
示例:
给定有序数组: [-10,-3,0,5,9],
一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：
       0
      / \
   -3   9
    /   /
 -10  5
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

迭代版实现【未做出】：
```
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.empty()) return NULL;
        queue<pair<TreeNode*,pair<int,int>>> node_queue;
        TreeNode *root=new TreeNode(0);
        node_queue.push({root,{0,nums.size()}}); //注意这里很微妙，传入的是nums.size()而不是nums.size()-1，因为后面的判断中end是不能再纳入考虑的
        while(node_queue.size()){
            TreeNode *cur=node_queue.front().first;
            int beg=node_queue.front().second.first;
            int end=node_queue.front().second.second;
            node_queue.pop();
            int mid=beg+(end-beg)/2;
            cur->val=nums[mid];
            if(beg<mid){
                cur->left=new TreeNode(0);//这里必须是使得它指向cur->left
                node_queue.push({cur->left,{beg,mid}});
            }
            if(mid+1<end){
                cur->right=new TreeNode(0);
                node_queue.push({cur->right,{mid+1,end}});//照应前面的nums.size()
            }
        }
        return root;
    }
};
```
