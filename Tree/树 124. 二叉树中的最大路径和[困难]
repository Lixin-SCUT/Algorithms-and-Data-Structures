> 给定一个非空二叉树，返回其最大路径和。
> 本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。
> 示例 1:
> 输入: [1,2,3]
>        1
>       / \
>      2   3
> 输出: 6
> 示例 2:
> 输入: [-10,9,20,null,null,15,7]
>    -10
>     / \
>   9  20
>      /  \
>    15   7
> 输出: 42
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/binary-tree-maximum-path-sum
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题的难点在于可以从树中的任意节点出发
所以从根节点出发是不太可能的了
我思考了一下，发现可以从叶节点出发。可以先记录一个全局int，然后对于一个普通节点来说，无非四种结果，首先获得左右子节点返回的节点，然后将自身节点相加，然后最最重要的就是【左+右+自身】和【自身】，前者等于将左右节点和自身连接起来形成一条路径，后者等于防止某个节点值特别大的情况，取这四种情况的最大值更新res（只需要res不需要记录特定路径，同时取最大值保证只有一条路径），然后为什么不用将左右子树算入呢，因为递归过程中他们本身也会进行这个判断。
然后记得把res设置为INT_MAX
最终代码如下：
```
class Solution {
    int res=INT_MIN;
public:
    int maxPathSum(TreeNode* root) {
        preorder(root);
        return res;
    }
    
    int preorder(TreeNode* cur){
        if(cur==NULL)
            return 0;
        int left=preorder(cur->left);
        int right=preorder(cur->right);
        res= res>(cur->val+left+right)?res:(cur->val+left+right);
        left=left+cur->val;
        right=right+cur->val;
        int ret= max(left,right);
        ret= max(ret,cur->val);
        res= res>ret?res:ret;
        return ret;
        
    }
};
```

然后来看一下网友题解：
> 解题思路：
> 二叉树 abc，a 是根结点（递归中的 root），bc 是左右子结点（代表其递归后的最优解）。
> 最大的路径，可能的路径情况：
> 
>     a
>    / \
>   b   c
> b + a + c。
> b + a + a 的父结点。
> a + c + a 的父结点。
> 其中情况 1，表示如果不联络父结点的情况，或本身是根结点的情况。
> 这种情况是没法递归的，但是结果有可能是全局最大路径和。
> 情况 2 和 3，递归时计算 a+b 和 a+c，选择一个更优的方案返回，也就是上面说的递归后的最优解啦。
> 
> 另外结点有可能是负值，最大和肯定就要想办法舍弃负值（max(0, x)）（max(0,x)）。
> 但是上面 3 种情况，无论哪种，a 作为联络点，都不能够舍弃。
> 
> 代码中使用 val 来记录全局最大路径和。
> ret 是情况 2 和 3。
> lmr 是情况 1。
> 
> 所要做的就是递归，递归时记录好全局最大和，返回联络最大和。
> 
> 代码：
> C++
```
int maxPathSum(TreeNode* root, int &val)
{
	if (root == nullptr) return 0;
	int left = maxPathSum(root->left, val);
	int right = maxPathSum(root->right, val);
	int lmr = root->val + max(0, left) + max(0, right);
	int ret = root->val + max(0, max(left, right));
	val = max(val, max(lmr, ret));
	return ret;
}

int maxPathSum(TreeNode* root) 
{
	int val = INT_MIN;
	maxPathSum(root, val);
	return val;
}
```
网友的思路比我更清晰一点，利用max(0, left) + max(0, right)其实就包含了判断自身的情况。然后评论中指出可以改进的点是lmr肯定是大于ret的

然后是官方题解：
```
class Solution {
  int max_sum = Integer.MIN_VALUE;

  public int max_gain(TreeNode node) {
    if (node == null) return 0;

    // max sum on the left and right sub-trees of node
    int left_gain = Math.max(max_gain(node.left), 0);
    int right_gain = Math.max(max_gain(node.right), 0);

    // the price to start a new path where `node` is a highest node
    int price_newpath = node.val + left_gain + right_gain;

    // update max_sum if it's better to start a new path
    max_sum = Math.max(max_sum, price_newpath);

    // for recursion :
    // return the max gain if continue the same path
    return node.val + Math.max(left_gain, right_gain);
  }

  public int maxPathSum(TreeNode root) {
    max_gain(root);
    return max_sum;
  }
}
```
> 复杂度分析
> 时间复杂度：O(N) 其中 N 是结点个数。我们对每个节点访问不超过 2 次。
> 空间复杂度：O(log(N))。我们需要一个大小与树的高度相等的栈开销，对于二叉树空间开销是 O(log(N))。

官方题解就可以看作是网友题解的改进版了，确实改进得不错。然后留一下空间复杂度，说不定面试会问起。
