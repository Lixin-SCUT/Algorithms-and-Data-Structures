> 给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。
示例:
输入: [1,2,3,null,5,null,4]
输出: [1, 3, 4]
解释:
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-right-side-view
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

迭代版实现：
```
    vector<int> rightSideView(TreeNode* root){
        queue<TreeNode*> node_queue;
        vector<int> res;
        if(root==NULL) return res;
        node_queue.push(root);
        TreeNode *cur;
        int level=0;
        while(node_queue.size()){
            int len=node_queue.size();
            for(int i=0;i<len;++i){
                cur=node_queue.front(),node_queue.pop();
                if(res.size()==level)
                    res.push_back(cur->val);//注意不能在这里++level,同时不能结束循环，必须把所有节点的子节点push进queue，否则如果当前节点没有子节点的话就木大了
                if(cur->right)  //queue一定要先右后左
                    node_queue.push(cur->right);
                if(cur->left)
                    node_queue.push(cur->left);
            }
            ++level;
        }
        return res;
    }
```
