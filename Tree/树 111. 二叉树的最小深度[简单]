> 给定一个二叉树，找出其最小深度。
> 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。
> 说明: 叶子节点是指没有子节点的节点。
> 示例:
> 给定二叉树 [3,9,20,null,null,15,7],
>     3
>    / \
>   9  20
>     /  \
>    15   7
> 返回它的最小深度  2.
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/minimum-depth-of-binary-tree
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题的要点在于累计当前节点到根节点的距离并检测是否是根节点
和前面的题目还是非常相似的
说实话这一题真的是蛮波折的，一开始不想用全局值了，以为利用min直接返回局部i值就好，结果遇到了++i这个小插曲，然后遇到了严重问题，遇到非叶节点的NULL节点时返回的值是无效的
然后还是得老老实实学习前几题那样先放弃null节点，然后再判断叶子节点进行返回，
同时全局值一开始必须设为int_max，然后必须判断root值是否为null（因为没法把res值设为0）
代码如下：
```
class Solution {
int res=INT_MAX;
public:
    int minDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
        preorder(root,1);
        return res;
    }
    
    void preorder(TreeNode* cur,int i){
        if(cur==NULL)
            return; 
        if(cur->left==NULL&&cur->right==NULL) //这里又傻逼了，直接用了cur==null判断，明显会导致非叶节点的返回
        {
            res=res<i?res:i;
            return;
        } 
        preorder(cur->left,i+1);
        preorder(cur->right,i+1);//这里傻逼了，用++i，导致第二个i疯狂增长
        return;
    }
};
```

然后来看一下网友题解：
思路：
> 很多人写出的代码都不符合 1,2 这个测试用例，是因为没搞清楚题意
> 题目中说明:叶子节点是指没有子节点的节点，这句话的意思是 1 不是叶子节点
> 题目问的是到叶子节点的最短距离，所以所有返回结果为 1 当然不是这个结果
> 另外这道题的关键是搞清楚递归结束条件
> 叶子节点的定义是左孩子和右孩子都为 null 时叫做叶子节点
> 当 root 节点左右孩子都为空时，返回 1
> 当 root 节点左右孩子有一个为空时，返回不为空的孩子节点的深度
> 当 root 节点左右孩子都不为空时，返回左右孩子较小深度的节点值
第一版代码:

```
class Solution {
public int minDepth(TreeNode root) {
if(root == null) return 0;
//这道题递归条件里分为三种情况
//1.左孩子和有孩子都为空的情况，说明到达了叶子节点，直接返回1即可
if(root.left == null && root.right == null) return 1;
//2.如果左孩子和由孩子其中一个为空，那么需要返回比较大的那个孩子的深度        
int m1 = minDepth(root.left);
int m2 = minDepth(root.right);
//这里其中一个节点为空，说明m1和m2有一个必然为0，所以可以返回m1 + m2 + 1;
if(root.left == null || root.right == null) return m1 + m2 + 1;

//3.最后一种情况，也就是左右孩子都不为空，返回最小深度+1即可
return Math.min(m1,m2) + 1; 
}
}
```
> 代码可以进行简化，当左右孩子为空时 m1 和 m2都为 0
> 可以和情况 2 进行合并，即返回 m1+m2+1
> 简化后代码如下:
```
class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        int m1 = minDepth(root.left);
        int m2 = minDepth(root.right);
        //1.如果左孩子和右孩子有为空的情况，直接返回m1+m2+1
        //2.如果都不为空，返回较小深度+1
        return root.left == null || root.right == null ? m1 + m2 + 1 : Math.min(m1,m2) + 1;
    }
}
```

666呀比起我的代码简化了许多，我是一直累计下去，而他是利用递归从尾部到根结点不断地累计。

然后来看一下官方题解：

> 方法 1：递归
> 算法
> 最直接的思路就是递归。
> 我们用深度优先搜索来解决这个问题。

```
class Solution {
  public int minDepth(TreeNode root) {
    if (root == null) {
      return 0;
    }

    if ((root.left == null) && (root.right == null)) {
      return 1;
    }

    int min_depth = Integer.MAX_VALUE;
    if (root.left != null) {
      min_depth = Math.min(minDepth(root.left), min_depth);
    }
    if (root.right != null) {
      min_depth = Math.min(minDepth(root.right), min_depth);
    }

    return min_depth + 1;
  }
}
```
> 复杂度分析
> 时间复杂度：我们访问每个节点一次，时间复杂度为O(N) ，其中 NN 是节点个数。
> 空间复杂度：最坏情况下，整棵树是非平衡的，例如每个节点都只有一个孩子，递归会调用 N （树的高度）次，因此栈的空间开销是O(N) 。但在最好情况下，树是完全平衡的，高度只有 log(N)，因此在这种情况下空间复杂度只有 O(log(N)) 。

> 方法 2：深度优先搜索迭代
> 我们可以利用栈将上述解法中的递归变成迭代。
> 想法是对于每个节点，按照深度优先搜索的策略访问，同时在访问到叶子节点时更新最小深度。
> 我们从一个包含根节点的栈开始，当前深度为 1 。
> 然后开始迭代：弹出当前栈顶元素，将它的孩子节点压入栈中。当遇到叶子节点时更新最小深度。
```
import javafx.util.Pair;
class Solution {
  public int minDepth(TreeNode root) {
    LinkedList<Pair<TreeNode, Integer>> stack = new LinkedList<>();
    if (root == null) {
      return 0;
    }
    else {
      stack.add(new Pair(root, 1));
    }

    int min_depth = Integer.MAX_VALUE;
    while (!stack.isEmpty()) {
      Pair<TreeNode, Integer> current = stack.pollLast();
      root = current.getKey();
      int current_depth = current.getValue();
      if ((root.left == null) && (root.right == null)) {
        min_depth = Math.min(min_depth, current_depth);
      }
      if (root.left != null) {
        stack.add(new Pair(root.left, current_depth + 1));
      }
      if (root.right != null) {
        stack.add(new Pair(root.right, current_depth + 1));
      }
    }
    return min_depth;
  }
}
```
> 复杂度分析
> 时间复杂度：每个节点恰好被访问一遍，复杂度为 O(N)。
> 空间复杂度：最坏情况下我们会在栈中保存整棵树，此时空间复杂度为 O(N)。

> 方法 3：宽度优先搜索迭代
> 深度优先搜索方法的缺陷是所有节点都必须访问到，以保证能够找到最小深度。因此复杂度是 O(N)。
> 一个优化的方法是利用宽度优先搜索，我们按照树的层次去迭代，第一个访问到的叶子就是最小深度的节点，这样就不要遍历所有的节点了。

```
import javafx.util.Pair;
class Solution {
  public int minDepth(TreeNode root) {
    LinkedList<Pair<TreeNode, Integer>> stack = new LinkedList<>();
    if (root == null) {
      return 0;
    }
    else {
      stack.add(new Pair(root, 1));
    }

    int current_depth = 0;
    while (!stack.isEmpty()) {
      Pair<TreeNode, Integer> current = stack.poll();
      root = current.getKey();
      current_depth = current.getValue();
      if ((root.left == null) && (root.right == null)) {
        break;
      }
      if (root.left != null) {
        stack.add(new Pair(root.left, current_depth + 1));
      }
      if (root.right != null) {
        stack.add(new Pair(root.right, current_depth + 1));
      }
    }
    return current_depth;
  }
}
```
> 复杂度分析
> 时间复杂度：最坏情况下，这是一棵平衡树，我们需要按照树的层次一层一层的访问完所有节点，除去最后一层的节点。这样访问了 N/2 个节点，因此复杂度是 O(N)。
> 空间复杂度：和时间复杂度相同，也是 O(N)。






