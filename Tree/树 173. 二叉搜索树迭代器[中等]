> 实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。
调用 next() 将返回二叉搜索树中的下一个最小的数。
示例：
![](file://C:/Users/lab509/Documents/Gridea/post-images/1574991600961.png)
BSTIterator iterator = new BSTIterator(root);
iterator.next();    // 返回 3
iterator.next();    // 返回 7
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 9
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 15
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 20
iterator.hasNext(); // 返回 false
提示：
next() 和 hasNext() 操作的时间复杂度是 O(1)，并使用 O(h) 内存，其中 h 是树的高度。
你可以假设 next() 调用总是有效的，也就是说，当调用 next() 时，BST 中至少存在一个下一个最小的数。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-search-tree-iterator
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

一开始不是很明白题目的意思，我第一想法还是二叉搜索树的中序遍历的结果就是顺序数组
```
class BSTIterator {
public:
    vector<int> res;
    vector<int>::iterator cur_i;
    BSTIterator(TreeNode* root) {
        inorder(root);
        cur_i=res.begin();
    }
    void inorder(TreeNode* cur){
        if(cur==NULL)
            return;
        inorder(cur->left);
        res.push_back(cur->val);
        inorder(cur->right);
        return;    
    }
    /** @return the next smallest number */
    int next() {
        return *(cur_i++);
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        if(cur_i==res.end())
            return false;
        return true;
    }
};
```

但是这个解法是很有问题的，因为不符合空间复杂度o(h)

然后网友的题解比较好，就是使用栈来模仿中序遍历，中序遍历的思想就是1先不断地往左子树走 2.遇到最左后就看看有没有右子树 3.检测该右子树的左子树，重复1和2.
然后在初始化中先执行一次1，将最左边的左子树入栈，然后next中先pop出栈的栈顶值，然后循环执行2和1，然后返回当前结点值。 hasnext最简单，直接判断栈是否为空就ok了

看看网友题解：
> 做这道题， 先把树的中序遍历的迭代写法了解一下
> 94. 二叉树的中序遍历 | 题解链接
对，这道题就是用栈解决，模拟中序遍历过程！
> 使用栈模拟的过程是很清晰的，通过next()在栈中缓存当前左子树的节点，空间复杂度为O(h)。
```
from collections import deque
class BSTIterator:

    def __init__(self, root: TreeNode):
        self.head = root
        self.stack = deque()
        
        while root:
            self.stack.append(root)
            root = root.left

    def next(self) -> int:
        """
        @return the next smallest number
        """       

        cur = self.stack.pop()
        root = cur.right
        while root:   # 使用了循环，复杂度不应该为O(1)?
            self.stack.append(root)
            root = root.left
        
        return cur.val


    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        return len(self.stack) > 0
```
> 但是很多小伙伴会对next()中的循环操作的复杂度感到疑惑，认为既然加入了循环在里面，那时间复杂度肯定是大于O(1)不满足题目要求的。
仔细分析一下，该循环只有在节点有右子树的时候才需要进行，也就是不是每一次操作都需要循环的，循环的次数加上初始化的循环总共会有O(n)次操作，均摊到每一次next()的话平均时间复杂度则是O(n)/n=O(1)，因此可以确定该实现方式满足O(1)的要求。
这种分析方式称为摊还分析，详细的学习可以看看**《算法导论》- 第17章 摊还分析**


