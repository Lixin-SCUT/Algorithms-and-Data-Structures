> 给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。
说明：
你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。
示例 1:
输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 1
示例 2:
输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 3
进阶：
如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化 kthSmallest 函数？
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

迭代版实现，主要是考验中序遍历，这次还是没写出迭代的中序遍历啊。。。。
重点就是这个判断条件 while(cur||node_stack.size())，再配合后面的while(cur)、top()和cur->right
```
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> node_stack;
        TreeNode *cur=root;
        while(cur||node_stack.size()){  //重点就是这个判断条件，再配合后面的while(cur)、top()和cur->right
            while(cur){
                node_stack.push(cur);
                cur=cur->left;
            }
            cur=node_stack.top();node_stack.pop();
            if(--k==0)
                return cur->val;
            cur=cur->right;
        }
        return 0;//虽然循环内保证会返回，但是编译器要求必须设置一个返回。。。
    }
};
```
