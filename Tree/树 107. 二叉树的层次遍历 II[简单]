> 给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）
例如：
给定二叉树 [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：
[
  [15,7],
  [9,20],
  [3]
]
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

本题的难点在于平常的层次遍历从上往下的话可以直接用vector的push_back，从下往上遍历看起来很简单，但是vector没有push_front，并且在头部插入需要整体复制移动，代价非常大
所以思考了一下，决定用双边容器的deque来代替vector，最后再用迭代器范围来初始化vector
`vector<vector<int>> res(dvi.begin(),dvi.end());`
最终代码如下：
```
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        deque<vector<int>> dvi;
        preorder(root,0,dvi);
        vector<vector<int>> res(dvi.begin(),dvi.end());
        return res;
    }
    
    void preorder(TreeNode* cur,int i,deque<vector<int>> &res){
        if(cur==NULL)
            return;
        if(res.size()==i)
            res.push_front(vector<int>());
        res[res.size()-i-1].push_back(cur->val);
        preorder(cur->left,i+1,res);
        preorder(cur->right,i+1,res);
        return;
    }
};
```
做题中出现的问题有：
一开始傻了，忘了是在头部插入，继续用了`res[i].push_back(cur->val);`，结果导致输出`[[],[],[3,9,20,15,7]]`
然后是`res[res.size()-i-1]`，而不是`res[res.size()-i]`，因为此时size增加了1

结果毫无疑问地牺牲了空间复杂度来换了时间复杂度

然后来看一下网友题解吧
大部分都是reverse，这就很没意思了
所以贴个最高赞的队列迭代吧，和递归相对应
```
class Solution:
    def levelOrderBottom(self, root):
        queue = []                                                  # 结果列表
        cur = [root]                                                # 接下来要循环的当前层节点，存的是节点
        while cur:                                                  # 当前层存在结点时
            cur_layer_val = []                                      # 初始化当前层结果列表为空，存的是val
            next_layer_node = []                                    # 初始化下一层结点列表为空
            for node in cur:                                        # 遍历当前层的每一个结点
                if node:                                            # 如果该结点不为空，则进行记录
                    cur_layer_val.append(node.val)                  # 将该结点的值加入当前层结果列表的末尾
                    next_layer_node.extend([node.left, node.right]) # 将该结点的左右孩子结点加入到下一层结点列表
            if cur_layer_val:                                       # 只要当前层结果列表不为空
                queue.insert(0, cur_layer_val)                      # 则把当前层结果列表插入到队列首端
            cur = next_layer_node                                   # 下一层的结点变成当前层，接着循环
        return queue      
```
这个妹纸本来的注释还挺好看的，到了这里全乱了。。。建议直接看原题[妹纸的队列迭代题解](https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/solution/python3-dui-lie-shi-xian-by-yi-xi-4/)

