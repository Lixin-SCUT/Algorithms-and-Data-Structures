> 反转一个单链表。
> 示例:
> 输入: 1->2->3->4->5->NULL
> 输出: 5->4->3->2->1->NULL
> 进阶:
你可以迭代或递归地反转链表。你能否用两种方法解决这道题？

难点要点：
1.如何保证指针改变后还能保存指针之前指向的值？比如1->2->3 将2指向1后，怎么读3的值？
2.注意链表题
我的思路就是利用三个变量分别保存好这三者，然后进行迭代
```
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL)
            return NULL;
        //ListNode *ln=head->next;
        ListNode *ln=head;
        ListNode *lnn=ln->next;
        ListNode *temp=NULL;
        while(lnn!=NULL){
            ln->next=temp;
            temp=ln;
            ln=lnn;
            lnn=lnn->next;         
        }
        ln->next=temp;
        head=ln;
        return head;
    }
};
```

做递归的时候发现一个很严重的问题
```
ListNode* reverse_list(ListNode* head,ListNode* n,ListNode* n_next){
        if(n_next!=NULL){
            reverse_list(head,n_next,n_next->next);
            n_next->next=n;
            cout<<head->val<<endl;
        }    
        else{
            head=n; 
            cout<<head->val<<endl;
        }
 
       return n;
    }


ListNode* reverseList(ListNode* head) {
        if(head==NULL)
            return NULL;
        //ListNode *ln=head->next;
        ListNode*n=reverse_list(head,head,head->next);
        n->next=NULL;
        return head;
    }
    
```
为了改变head的值我把head指针传了进去，但是！在递归回来的途中程序却吧head的值改回原值了？WTF？这个问题弄了一个早上也没弄懂，后面再研究一下

10.27晚上更新：因为所谓的指针形参传递对于指针这个形参本身来说还是值传递！是复制了指针形参过去的！！只有对于指针指向的对象来说才是相当于引用传递，所以head的形参必须改成指针的引用 也就是*（&head）
所以最终代码为
```
class Solution {

public:
    ListNode* reverse_list(ListNode* (&head),ListNode* n,ListNode* n_next){
        
        if(n_next!=NULL){
            reverse_list(head,n_next,n_next->next);
            n_next->next=n;
        }    
        else{
            head=n; 
        }
 
       return n;
    }


ListNode* reverseList(ListNode* head) {
        if(head==NULL)
            return NULL;
        //ListNode *ln=head->next;
        ListNode* n=reverse_list(head,head,head->next);
        n->next=NULL;
        return head;
    }
};
```

先来看一下题解：

> 方法一：迭代
> 假设存在链表 1 → 2 → 3 → Ø，我们想要把它改成 Ø ← 1 ← 2 ← 3。
> 
> 在遍历列表时，将当前节点的 next 指针改为指向前一个元素。由于节点没有引用其上一个节点，因此必须事先存储其前一个元素。在更改引用之前，还需要另一个指针来存储下一个节点。不要忘记在最后返回新的头引用！

```
public ListNode reverseList(ListNode head) {
    ListNode prev = null;
    ListNode curr = head;
    while (curr != null) {
        ListNode nextTemp = curr.next;
        curr.next = prev;
        prev = curr;
        curr = nextTemp;
    }
    return prev;
}
```
> 复杂度分析
> 
> 时间复杂度：O(n)，假设 nn 是列表的长度，时间复杂度是 O(n)。
> 空间复杂度：O(1)

> 方法二：递归
> 递归版本稍微复杂一些，其关键在于反向工作。假设列表的其余部分已经被反转，现在我该如何反转它前面的部分？
> 

![](file://C:/Users/lab509/Documents/Gridea/post-images/1572145652208.png)
```
public ListNode reverseList(ListNode head) {
    if (head == null || head.next == null) return head;
    ListNode p = reverseList(head.next);
    head.next.next = head;
    head.next = null;
    return p;
}
```
> 复杂度分析
> 
> 时间复杂度：O(n)，假设 nn 是列表的长度，那么时间复杂度为O(n)。
> 空间复杂度：O(n)，由于使用递归，将会使用隐式栈空间。递归深度可能会达到 n 层。

然后是比较直观的网友题解
> 迭代：
![](file://C:/Users/lab509/Documents/Gridea/post-images/1572145715655.png)
```
ListNode* reverseList(ListNode* head) {
        if(!head){
            return nullptr;
        }
        ListNode* first = head;//始终指向原链表的首位元素
        ListNode* target = head->next;//始终指向即将要放到当前链表首元素之前的目标元素
        while(target != nullptr){
            first->next = target->next;
            ListNode* temp = target->next;
            target->next = head;
            head = target;
            target = temp;
        }
        return head;
    }
```
递归：
```
ListNode* reverseList(ListNode* head) {
        if(!head){
            return nullptr;
        }
        return reverse(head, head, head->next);        
    }
    
    ListNode* reverse(ListNode* head, ListNode* first, ListNode* target){
        if(!target){
            return head;
        }
        first->next = target->next;
        ListNode* temp = target->next;
        target->next = head;
        return reverse(target, first, temp);
    }
```



