> 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
> 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
> 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
> 
> 示例：
> 输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
> 输出：7 -> 0 -> 8
> 原因：342 + 465 = 807
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/add-two-numbers
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

本题目其实相对不算特别难（因为链表按个位算起的），主要的难点在于
1.如果两链表长度不等的话，存储起来比较麻烦，我本来想原地操作，但是这样子反而比较难操作（因为必须对两个链表同时操作直至其中一个到结尾，同时需要返回正确的那个链表的头结点）
2.当一个链表去到尾部后的处理，以及如何判断两个链表达到结尾退出循环的判断
2.进位其实还是比较好处理的，直接一个int就好
最终代码如下
```
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int flag=0;
        ListNode* ehead=new ListNode(0);
        ListNode* cur=ehead;
        int res,i1,i2;        
        while(l1!=NULL||l2!=NULL){
            i1=l1!=NULL?l1->val:0;
            i2=l2!=NULL?l2->val:0;
            res=(i1+i2+flag)%10;
            flag=(i1+i2+flag)/10;
            ListNode* newnode=new ListNode(res);
            cur->next=newnode;
            cur=newnode;
            if(l1!=NULL)
                l1=l1->next;
            if(l2!=NULL)
                l2=l2->next;
        }
        if(flag){
            ListNode* newnode=new ListNode(1);
            cur->next=newnode;
            cur=newnode;
        }
        cur->next=NULL;
        return ehead->next;
    }
};
```
比较重要的点就是
1 `while(l1!=NULL||l2!=NULL)` 必须是或判断
2 ` i1=l1!=NULL?l1->val:0;` 这里使用条件语句能够节省很多代码

然后先来看一下网友的题解吧
```
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head=new ListNode(-1);//存放结果的链表
        ListNode* h=head;//移动指针
        int sum=0;//每个位的加和结果
        bool carry=false;//进位标志
        while(l1!=NULL||l2!=NULL)
        {
            sum=0;
            if(l1!=NULL)
            {
                sum+=l1->val;
                l1=l1->next;
            }
            if(l2!=NULL)
            {
                sum+=l2->val;
                l2=l2->next;
            }
            if(carry)
                sum++;
            h->next=new ListNode(sum%10);
            h=h->next;
            carry=sum>=10?true:false;
        }
        if(carry)
        {
            h->next=new ListNode(1);
        }
        return head->next;
    }
};
```
这里我没贴上补位的题解，因为补位需要先循环确定长度。主要是第二种做法比较巧妙的是利用一个sum来计算和。

官方题解和我的一毛一样hhh
> 复杂度分析
> 时间复杂度：O(max(m,n))，假设 m 和 n 分别表示 l1 和 l2 的长度，上面的算法最多重复max(m,n) 次。
> 空间复杂度：O(max(m,n))， 新列表的长度最多为 max(m,n)+1。

拓展

如果链表中的数字不是按逆序存储的呢？例如：
(3→4→2)+(4→6→5)=8→0→7

最后这个拓展比较有趣，网友们的想法是利用递归或者栈，这个想法还是比较有趣的。
