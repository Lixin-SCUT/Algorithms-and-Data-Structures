> 编写一个程序，找到两个单链表相交的起始节点。

![](file://C:/Users/lab509/Documents/Gridea/post-images/1573004036742.png)
![](file://C:/Users/lab509/Documents/Gridea/post-images/1573004040961.png)
> 注意：
> 如果两个链表没有交点，返回 null.
> 在返回结果后，两个链表仍须保持原有的结构。
> 可假定整个链表结构中没有循环。
> 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。
> 
> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com/problems/intersection-of-two-linked-lists
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题如果用哈希表的话是没啥难度的，所以重点在于如何满足O(n) 时间复杂度，且仅用 O(1) 内存。
我最后想到的办法是制造一个环，从两个链表的头部同时出发，然后谁先达到尾部就直接把链表接到另一个的尾部
但是在复习完有环链表的判断后才发现最后的相遇点不是一定在交点那里的，GG

纠结了太久了，直接看官方解答吧：

> 方法一: 暴力法
> 对链表A中的每一个结点 a_i	 ，遍历整个链表 B 并检查链表 B 中是否存在结点和 a_i  相同。
> 复杂度分析
> 时间复杂度 : (mn)。
> 空间复杂度 : O(1)。
> 
> 方法二: 哈希表法
> 遍历链表 A 并将每个结点的地址/引用存储在哈希表中。然后检查链表 B 中的每一个结点 b_i 是否在哈希表中。若在，则 b_i为相交结点。
> 复杂度分析
> 时间复杂度 : O(m+n)。
> 空间复杂度 : O(m) 或 O(n)。
> 
> 方法三：双指针法
> 创建两个指针 pA 和 pB，分别初始化为链表 A 和 B 的头结点。然后让它们向后逐结点遍历。
> 当 pA 到达链表的尾部时，将它重定位到链表 B 的头结点 (你没看错，就是链表 B); 类似的，当 pB 到达链表的尾部时，将它重定位到链表 A 的头结点。
> 若在某一时刻 pA 和 pB 相遇，则 pA/pB 为相交结点。
> 想弄清楚为什么这样可行, 可以考虑以下两个链表: A={1,3,5,7,9,11} 和 B={2,4,9,11}，相交于结点 9。 由于 B.length (=4) < A.length (=6)，pB 比 pA 少经过 2 个结点，会先到达尾部。将 pB 重定向到 A 的头结点，pA 重定向到 B 的头结点后，pB 要比 pA 多走 2 个结点。因此，它们会同时到达交点。
> 如果两个链表存在相交，它们末尾的结点必然相同。因此当 pA/pB 到达链表结尾时，记录下链表 A/B 对应的元素。若最后元素不相同，则两个链表不相交。
> 
> 复杂度分析
> 时间复杂度 : O(m+n)。
> 空间复杂度 : O(1)。

妙啊！确实是简单题hhh，我只猜到了开头没猜到结局hhh，两者无论如何走过的路程都是一样的，所以当两者相等时退出循环判断，只需要判断最后的结点是否是NULL就好（甚至于都不用判断，直接返回就好）
自己复现的代码如下：
```
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA==NULL||headB==NULL)
            return NULL;
        ListNode *cur1=headA,*cur2=headB;
        while(cur1!=cur2){
            cur1=cur1==NULL?headB:cur1->next;
            cur2=cur2==NULL?headA:cur2->next;
        }
        return cur1;
    }
```




