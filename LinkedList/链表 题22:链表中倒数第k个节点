> 题目描述
输入一个链表，输出该链表中倒数第k个结点。

第一想法是遍历第一次找出数组长度（记得判断k是否大于N），然后第二次遍历时返回所需的值
第二想法就是双指针，一个指针先走k步，另一个指针再同步向前走，然后第一个指针走到终点时第二个指针所指的位置就是所求

```
class Solution {
public:
    //相隔k的快慢指针法
    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k){
        if(k==0||pListHead==NULL)
            return NULL;
        ListNode *fast_k;
        ListNode *slow_k;
        fast_k=pListHead;
        
        while(k){
            if(fast_k!=NULL)
                fast_k=fast_k->next,--k;
            else
                return NULL;
        }
        slow_k=pListHead;
        while(fast_k!=NULL)
            fast_k=fast_k->next,slow_k=slow_k->next;
        return slow_k;
    }
    /*
    //两次遍历求长度法
    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {
        int len=0;
        ListNode *cur=pListHead;
        while(cur!=NULL){
            ++len;
            cur=cur->next;
        }
        if(k>len||k==0||len==0)
            return NULL;
        int tar=len-k;
        cur=pListHead;
        while(tar)
            cur=cur->next,--tar;
        return cur;
    }
    */
};
```

书本解法：
假设整个链表有n个节点，那么倒数第k个节点就是从头节点开始的 第n-k+1个节点。
如果我们能够得到链表中节点的个数n，那么只要从头节点开始往后走n-k+1步就可以了。如何得到节点数n？这个不难，只需要从头开始遍历链表，每经过一个节点，计数器加1就行了。也就是说我们需要遍历链表两次，第一次统计出链表中节点的个数， 第二次就能找到倒数第k个节点。但是当我们把这种思路解释给面试官之后，他会告诉我们他期待的解法只需要遍历链表一次。
为了实现只遍历链表一次就能找到倒数第k个节点，我们可以定义两个指针。第一个指针从链表的头指针开始遍历向前走k-1步，第二个指针 保持不动；从第k步开始，第二个指针也开始从链表的头指针开始遍历。 由于两个指针的距离保持在k-1，当第一个(走在前面的)指针到达链表的尾节点时，第二个(走在后面的)指针正好指向倒数第k个节点。
需要注意的鲁棒性问题：
（1）	输入的pListHead为空指针。由于代码会试图访问空指针指向的内存，从而造成程序崩溃。
（2）	输入的以pListHead为头节点的链表的节点总数少于k。由于在for循环中会在链表上向前走k-1步，仍然会由于空指针而造成程序崩溃。
（3）	输入的参数k为0。由于k是一个无符号整数，那么在for循环中 k-1得到的将不是-1,而是4294967295 （无符号的OxFFFFFFFF）。因此， for循环执行的次数远远超出我们的预计，同样也会造成程序崩溃。
```
ListNode* FindKthToTail(ListNode* pListHead, unsigned int k)
{
    if(pListHead == nullptr || k == 0)
        return nullptr;

    ListNode *pAhead = pListHead;
    ListNode *pBehind = nullptr;

    for(unsigned int i = 0; i < k - 1; ++ i)
    {
        if(pAhead->m_pNext != nullptr)
            pAhead = pAhead->m_pNext;
        else
        {
            return nullptr;
        }
    }

    pBehind = pListHead;
    while(pAhead->m_pNext != nullptr)
    {
        pAhead = pAhead->m_pNext;
        pBehind = pBehind->m_pNext;
    }

    return pBehind;
```

扩展：
1.求链表的中间节点。如果链表中的节点总数为奇数，则返回中间节点； 如果节点总数是偶数，则返回中间两个节点的任意一个。为了解决这个问 题，我们也可以定义两个指针，同时从链表的头节点出发，一个指针一次走一步，另一个指针一次走两步。当走得快的指针走到链表的末尾时，走 得慢的指针正好在链表的中间。
2.当我们用一个指针遍历链表不能解决问题的时候，可以尝试用两个指针来遍历链表 可以让其中一个指针遍历的速度快一些（比如一次在链表上走两步），或者让它先在链表上走若干步。

