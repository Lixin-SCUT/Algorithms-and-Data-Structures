> 删除链表中等于给定值 val 的所有节点。
> 
> 示例:
> 输入: 1->2->6->3->4->5->6, val = 6
> 输出: 1->2->3->4->5

思路：
1.这道主要是不能单纯地检测当前指针的val，而是应该检查next的val。
2.这道题需要先检查头节点以及头节点之后的结点是否和val相等，如果相等的话需要先删除前面的结点。

```
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        if(head==NULL)
            return head;
        while(head->val==val){
            if(head->next==NULL)
                return NULL;
            head=head->next;
        }
        ListNode* cur=head;
        while(cur!=NULL){
            while(cur->next!=NULL&&cur->next->val==val){
                cur->next=cur->next->next;
            }
            cur=cur->next;
        }
        return head;
    }
};
```

然后看一下网友题解删除结点的步骤

> 找到该结点的前一个结点
> 进行删除操作
> 三种方法：
> 
> 删除头结点时另做考虑（由于头结点没有前一个结点）
> 添加一个虚拟头结点，删除头结点就不用另做考虑
> 递归
> 
> 方法一（删除头结点时另做考虑）
```
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        //删除值相同的头结点后，可能新的头结点也值相等，用循环解决
        while(head!=null&&head.val==val){
            head=head.next;
        }
        if(head==null)
            return head;
        ListNode prev=head;
        //确保当前结点后还有结点
        while(prev.next!=null){
            if(prev.next.val==val){
                prev.next=prev.next.next;
            }else{
                prev=prev.next;
            }
        }
        return head;
    }
}
```
方法二（添加一个虚拟头结点）
```
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        //创建一个虚拟头结点
        ListNode dummyNode=new ListNode(val-1);
        dummyNode.next=head;
        ListNode prev=dummyNode;
        //确保当前结点后还有结点
        while(prev.next!=null){
            if(prev.next.val==val){
                prev.next=prev.next.next;
            }else{
                prev=prev.next;
            }
        }
        return dummyNode.next;
    }
}
```
方法三（递归）
```
class Solution {
    public ListNode removeElements(ListNode head, int val) {
       if(head==null)
           return null;
        head.next=removeElements(head.next,val);
        if(head.val==val){
            return head.next;
        }else{
            return head;
        }
    }
}
```


