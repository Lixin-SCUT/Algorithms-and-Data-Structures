> 给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。
示例 1:
输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:
输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/rotate-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

和数组 189.旋转数组比较像
首先一个指针判断长度len
然后把k和len取余数
然后找到倒数第k个节点
弄一个ehead，截断放到前面，和原head连接起来

细节问题比较重要 比如k=0的情况 还有循环的判断条件等，比如后面应该是找到倒数k+1个数，比如12345，要找到3而不是4，因为需要把ehead接到4

```
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        ListNode *ehead=new ListNode(0);
        ehead->next=head;
        ListNode* cur=ehead;
        int len=0;
        while(cur->next){
            ++len;
            cur=cur->next;
        }     
        if(len==0||len==1) return head;
        k=k%len;
        if(!k) return head;
        int count=len-k;
        ListNode* end=cur;
        cur=ehead;
        while(count--)
            cur=cur->next;
        ehead->next=cur->next;
        cur->next=NULL;
        end->next=head;
        return ehead->next;
    }
};
```

官方题解还是比较有趣的，在计算长度的过程中顺带连接成环，再在相应的位置断开，免去了后面的操作。同时一定要记得设置尾节点的next为null，否则输出时会无限循环打印
官方题解：
方法 1：
直觉
链表中的点已经相连，一次旋转操作意味着：
先将链表闭合成环
找到相应的位置断开这个环，确定新的链表头和链表尾
新的链表头在哪里？
在位置 n-k 处，其中 n 是链表中点的个数，新的链表尾就在头的前面，位于位置 n-k-1。
我们这里假设 k < n
如果 k >= n 怎么处理？
k 可以被写成 k = (k // n) * n + k % n 两者加和的形式，其中前面的部分不影响最终的结果，因此只需要考虑 k%n 的部分，这个值一定比 n 小。
算法
算法实现很直接：
找到旧的尾部并将其与链表头相连 old_tail.next = head，整个链表闭合成环，同时计算出链表的长度 n。
找到新的尾部，第 (n - k % n - 1) 个节点 ，新的链表头是第 (n - k % n) 个节点。
断开环 new_tail.next = None，并返回新的链表头 new_head。
实现
```
class Solution {
  public ListNode rotateRight(ListNode head, int k) {
    // base cases
    if (head == null) return null;
    if (head.next == null) return head;

    // close the linked list into the ring
    ListNode old_tail = head;
    int n;
    for(n = 1; old_tail.next != null; n++)
      old_tail = old_tail.next;
    old_tail.next = head;

    // find new tail : (n - k % n - 1)th node
    // and new head : (n - k % n)th node
    ListNode new_tail = head;
    for (int i = 0; i < n - k % n - 1; i++)
      new_tail = new_tail.next;
    ListNode new_head = new_tail.next;

    // break the ring
    new_tail.next = null;

    return new_head;
  }
}
```
复杂度分析
时间复杂度：O(N)，其中 N 是链表中的元素个数
空间复杂度：O(1)，因为只需要常数的空间
