> 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。
为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。
说明：不允许修改给定的链表。
示例 1：
输入：head = [3,2,0,-4], pos = 1
输出：tail connects to node index 1
解释：链表中有一个环，其尾部连接到第二个节点。
示例 2：
输入：head = [1,2], pos = 0
输出：tail connects to node index 0
解释：链表中有一个环，其尾部连接到第一个节点。
示例 3：
输入：head = [1], pos = -1
输出：no cycle
解释：链表中没有环。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/linked-list-cycle-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

最简单的就是用哈希表了 然后用hash表的时候有点翻车，把指针类型写成了\*ListNode了，应该是ListNode*
然后就是考虑双指针法了，检查是否有环是很简单，但是最后停留的位置是未知的。我觉得应该引入第三个指针
看题解去！
哇好心痛，其实就差一步我就做出来的了，就主要是没了解到一个重点 入环点在的位置一定是 m+aN，此时快指针和慢指针的差刚好（b-a）N，同时也是慢指针的值，等于慢指针总共走的路程还是环长（虽然此时不在环上），离入环点还差m步（理解一下m+aN和（b-a）N之间的差别），那么我引入的第三个指针（也可以用fast代替）刚好可以从头指针走m步
好气啊！

实现注意点：
1.两个指针应该从一个虚拟头节点开始而不是从head开始，否则一开始走过的路程就是1了，所以一般定义fast是head->next，slow就是head，等于预先走了一步
2.fast的判断和两次连续next很重要
2.又忘了判断空链表了。。。

```
class Solution {
public:

    ListNode *detectCycle(ListNode *head) {
        if(head==NULL)return NULL;
        ListNode *fast=head->next,*slow=head;
        while(fast!=slow){
            if(fast!=NULL&&fast->next!=NULL)
                fast=fast->next->next; //注意判断条件和两次连续next，没必要分开两次判断next
            else
                return NULL;
            slow=slow->next;
        }
        fast=head;
        slow=slow->next;//注意这里，因为fast=head;相当于提前走了一步
        while(fast!=slow)
            fast=fast->next,slow=slow->next;
        return slow;     
				/*哈希表解法
        unordered_set<ListNode*> List_set;
        ListNode *cur=head;
        while(true)
            if(cur==NULL)
                return NULL;
            else if(List_set.count(cur))
                return cur;
            else{
                List_set.insert(cur);
                cur=cur->next;
            }
        */
    }
};
```

然后来看看官方题解和网友题解：
> 方法 1：哈希表
想法
如果我们用一个 Set 保存已经访问过的节点，我们可以遍历整个列表并返回第一个出现重复的节点。
算法
首先，我们分配一个 Set 去保存所有的列表节点。我们逐一遍历列表，检查当前节点是否出现过，如果节点已经出现过，那么一定形成了环且它是环的入口。否则如果有其他点是环的入口，我们应该先访问到其他节点而不是这个节点。其他情况，没有成环则直接返回 null 。
算法会在遍历有限个节点后终止，这是因为输入列表会被分成两类：成环的和不成环的。一个不成欢的列表在遍历完所有节点后会到达 null - 即链表的最后一个元素后停止。一个成环列表可以想象成是一个不成环列表将最后一个 null 元素换成环的入口。
如果 while 循环终止，我们返回 null 因为我们已经将所有的节点遍历了一遍且没有遇到重复的节点，这种情况下，列表是不成环的。对于循环列表， while 循环永远不会停止，但在某个节点上， if 条件会被满足并导致函数的退出。
```
public class Solution {
    public ListNode detectCycle(ListNode head) {
        Set<ListNode> visited = new HashSet<ListNode>();

        ListNode node = head;
        while (node != null) {
            if (visited.contains(node)) {
                return node;
            }
            visited.add(node);
            node = node.next;
        }

        return null;
    }
}
```
> 复杂度分析
时间复杂度：O(n)
不管是成环还是不成环的输入，算法肯定都只会访问每个节点一次。对于非成环列表这是显而易见的，因为第 n 个节点指向 null ，这会让循环退出。对于循环列表， if 条件满足时会导致函数的退出，因为它指向了某个已经访问过的节点。两种情况下，访问的节点数最多都是 n 个，所以运行时间跟节点数目成线性关系。
空间复杂度：O(n)
不管成环或者不成欢的输入，我们都需要将每个节点插入 Set 中一次。两者唯一的区别是最后访问的节点后是 null 还是一个已经访问过的节点。因此，由于 Set 包含 n 个不同的节点，所需空间与节点数目也是线性关系的。

> 方法 1：Floyd
解题思路：
这类链表题目一般都是使用双指针法解决的，例如寻找距离尾部第K个节点、寻找环入口、寻找公共尾部入口等。
算法流程：
双指针第一次相遇： 设两指针 fast，slow 指向链表头部 head，fast 每轮走 22 步，slow 每轮走 11 步；

> 第一种结果： fast 指针走过链表末端，说明链表无环，直接返回 null；
TIPS: 若有环，两指针一定会相遇。因为每走 1 轮，fast 与 slow 的间距 +1，fast 终会追上 slow；
第二种结果： 当fast == slow时， 两指针在环中 第一次相遇 。下面分析此时fast 与 slow走过的 步数关系 ：
设链表共有 a+b 个节点，其中 链表头部到链表入口 有 a 个节点（不计链表入口节点）， 链表环 有 b 个节点（这里需要注意，a 和 b 是未知数，例如图解上链表 a=4 , b=5）；设两指针分别走了f，s 步，则有：
fast 走的步数是slow步数的 2 倍，即 f=2s；（解析： fast 每轮走 2 步）
fast 比 slow多走了 n 个环的长度，即f=s+nb；（ 解析： 双指针都走过 a 步，然后在环内绕圈直到重合，重合时 fast 比 slow 多走 环的长度整数倍 ）；
以上两式相减得：f=2nb，s=nb，即fast和slow 指针分别走了 2n，n个环的周长 （注意： n 是未知数，不同链表的情况不同）。
目前情况分析：
如果让指针从链表头部一直向前走并统计步数k，那么所有 走到链表入口节点时的步数 是：k=a+nb（先走 a 步到入口节点，之后每绕 1 圈环（ b 步）都会再次到入口节点）。
而目前，slow 指针走过的步数为 nb 步。因此，我们只要想办法让 slow 再走 a 步停下来，就可以到环的入口。
但是我们不知道 a 的值，该怎么办？依然是使用双指针法。我们构建一个指针，此指针需要有以下性质：此指针和slow 一起向前走 a 步后，两者在入口节点重合。那么从哪里走到入口节点需要 a 步？答案是链表头部head。
双指针第二次相遇：
slow指针位置不变 ，将fast指针重新 指向链表头部节点 ；slow和fast同时每轮向前走 1 步；
TIPS：此时 f=0，s=nb ；
当 fast 指针走到f=a 步时，slow 指针走到步s=a+nb，此时 两指针重合，并同时指向链表环入口 。
返回slow指针指向的节点。
复杂度分析：
时间复杂度 O(N) ：第二次相遇中，慢指针须走步数 a<a+b；第一次相遇中，慢指针须走步数a+b−x<a+b，其中 x 为双指针重合点与环入口距离；因此总体为线性复杂度；
空间复杂度 O(1) ：双指针使用常数大小的额外空间。
```
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast = head, slow = head;
        while (true) {
            if (fast == null || fast.next == null) return null;
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) break;
        }
        fast = head;
        while (slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }
        return fast;
    }
}
```

