> 题目描述
输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。

```
class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        ListNode *virHead=new ListNode(-1);
        ListNode *cur=virHead;
        while(pHead1&&pHead2){
            if(pHead1->val<=pHead2->val)
                cur->next=pHead1,pHead1=pHead1->next;
            else
                cur->next=pHead2,pHead2=pHead2->next;
            cur=cur->next;
        }
        cur->next=pHead1?pHead1:pHead2;//这里很重要，配合判断条件能够避免输入NULL指针的情况
        return virHead->next;
    }
};
```

书本题解：
> 最容易犯两种错误：一是在写代码之前没有想清楚合并的过程，最终合并出来的链表要么中间断开了、要么并没有做到递增排序；二是代码在鲁棒性方面存在问题，程序一旦有特殊的输入（如空链表）就会崩溃。
首先分析合并两个链表的过程。我们的分析从合并两个链表的头节点 开始。链表1的头节点的值小于链表2的头节点的值，因此链表1的头节点将是合并后链表的头节点
我们继续合并两个链表中剩余的节点。在 两个链表中剩下的节点依然是排序的，因此合并这两个链表的步骤和前面 的步骤是一样的。我们还是比较两个头节点的值。此时链表2的头节点的 值小于链表1的头节点的值，因此链表2的头节点的值将是合并剩余节点 得到的链表的头节点。我们把这个节点和前面合并链表时得到的链表的尾节点
当我们得到两个链表中值较小的头节点并把它链接到已经合并的链表 之后，两个链表剩余的节点依然是排序的，因此合并的步骤和之前的步骤是一样的。这就是典型的递归过程，我们可以定义递归函数完成这一合并过程
每当代码试图访问空指针指向的内 存时程序就会崩溃，从而导致鲁棒性问题。在本题中一旦输入空的链表就 会引入空的指针，因此我们要对空链表单独处理。当第一个链表是空链表, 也就是它的头节点是一个空指针时，那么把它和第二个链表合并，显然合 并的结果就是第二个链表。同样，当输入的第二个链表的头节点是空指针 的时候，我们把它和第一个链表合并得到的结果就是第一个链表。如果两个链表都是空链表，则合并的结果是得到一个空链表。
```
ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
{
    if(pHead1 == nullptr)
        return pHead2;
    else if(pHead2 == nullptr)
        return pHead1;

    ListNode* pMergedHead = nullptr;

    if(pHead1->m_nValue < pHead2->m_nValue)
    {
        pMergedHead = pHead1;
        pMergedHead->m_pNext = Merge(pHead1->m_pNext, pHead2);
    }
    else
    {
        pMergedHead = pHead2;
        pMergedHead->m_pNext = Merge(pHead1, pHead2->m_pNext);
    }

    return pMergedHead;
}
```

我感觉我的程序更加精简，同时兼顾了鲁棒性，然后书本的题解使用了递归思想，非常巧妙，但是需要额外的判断条件。
