> 你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。
假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。
你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。
示例:
给定 n = 5，并且 version = 4 是第一个错误的版本。
调用 isBadVersion(3) -> false
调用 isBadVersion(5) -> true
调用 isBadVersion(4) -> true
所以，4 是第一个错误的版本。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/first-bad-version
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//这题应该是最简单的二分法了吧，然后可以试试插值查找之类的
//最值得注意的还是mid的计算,注意这个是int不是double啊，会自动向0取整的
//突然发现问题没那么简单啊，因为需要找到第一个出错的
//重点还是在于判断后first和last的赋值是mid还是mid+1
//最后才发现读错题目了，我的想法是true到false的转换找出第一个false，题目的意思是false到true的转换找出最后一个false，尴尬，幸好改一下flag就完成了
//然后发现flag是多余的(what!去除flag之后空间复杂度还变高了！)

```
// Forward declaration of isBadVersion API.
bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
      int first=1,last=n,mid;
        while(first<last){
            mid=first+(last-first)/2;
            if(!isBadVersion(mid))
                first=mid+1;
            else
                last=mid;
        }
        return first;
    }

};
```

> 来看一下官方题解
这是一道较为简单的题目，但是有一个小陷阱。除此之外，这道题的算法是比较显然的。
方法一：线性扫描 [超出时间限制]
最直接的方法是进行一次线性扫描，即对 [1..n][1..n] 都调用一次isBadVersion。
```
Java
public int firstBadVersion(int n) {
    for (int i = 1; i < n; i++) {
        if (isBadVersion(i)) {
            return i;
        }
    }
    return n;
}
```
> 复杂度分析
时间复杂度：O(n)。在最坏的情况下，最多可能会调用 isBadVersion n-1n−1 次，因此总的时间复杂度为 O(n)。
空间复杂度：O(1)。

> 方法二：二分查找 [通过]
不难看出，这道题可以用经典的二分查找算法求解。我们通过一个例子，来说明二分查找如何在每次操作中减少一半的搜索空间，以此减少时间复杂度。
场景一：isBadVersion(mid) => false
 1  2 3  4 5  6 7 8 9
 G G G G G G B B B       G = 正确版本，B = 错误版本
 |             |           |
left       mid      right
场景一中，isBadVersion(mid) 返回 false，因此我们知道 mid 左侧（包括自身）的所有版本都是正确的。所以我们令 left=mid+1，把下一次的搜索空间变为 [mid+1,right]。
场景二：isBadVersion(mid) => true
 1 2  3 4  5 6 7 8 9
 G G G B B B B B B       G = 正确版本，B = 错误版本
 |            |           |
left       mid     right
场景二中，isBadVersion(mid) 返回 true，因此我们知道mid 右侧（不包括自身）的所有版本的不可能是第一个错误的版本。所以我们令 right=mid，把下一次的搜索空间变为 [left,mid]。
在二分查找的每次操作中，我们都用left 和right 表示搜索空间的左右边界，因此在初始化时，需要将left 的值设置为 1，并将 right 的值设置为 n。当某一次操作后，left 和 right 的值相等，此时它们就表示了第一个错误版本的位置。可以用数学归纳法 证明 二分查找算法的正确性。
在二分查找中，选取mid 的方法一般为mid=⌊(right+left)/2⌋。如果使用的编程语言会有整数溢出的情况（例如 C++，Java），那么可以用 mid=left+⌊
 (right−left)/2⌋代替前者。
```
Java
public int firstBadVersion(int n) {
    int left = 1;
    int right = n;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (isBadVersion(mid)) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }
    return left;
}
```
> 复杂度分析
时间复杂度：O(logn)。搜索空间每次减少一半，因此时间复杂度为 O(logn)。
空间复杂度：O(1)。

