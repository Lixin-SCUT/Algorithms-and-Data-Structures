> 给定两个数组，编写一个函数来计算它们的交集。
示例 1:
输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2,2]
示例 2:
输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出: [4,9]
说明：
输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。
我们可以不考虑输出结果的顺序。
进阶:
如果给定的数组已经排好序呢？你将如何优化你的算法？
如果 nums1 的大小比 nums2 小很多，哪种方法更优？
如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/intersection-of-two-arrays-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题其实就是349的进化版，我把插入的判断条件去掉了，
然后其实还是没有符合进阶条件的要求
一是如果两数组相差较大的时候怎么处理
如果大小相差很大，我就想特别是如果num2无法全部插入内存的情况，好好看看题解

```
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        int len1=nums1.size(),len2=nums2.size();
        vector<int> res;
        if(len1==0||len2==0) return res;
        quicksort(nums1,nums1.begin(),nums1.end()-1);
        quicksort(nums2,nums2.begin(),nums2.end()-1);
        for(int i=0,j=0;i<len1&&j<len2;){
            if(nums1[i]==nums2[j]){
                //if(res.empty()||res.back()!=nums1[i])
                    res.push_back(nums1[i]);
                ++i,++j;
            }
            else if(nums1[i]<nums2[j])
                ++i;
            else
                ++j;
        }
        return res;
    }
		
		    void quicksort(vector<int> &vi,vector<int>::iterator low,vector<int>::iterator high){
        vector<int>::iterator middle;
        if(low<high){
            middle=partition(vi,low,high);
            quicksort(vi,low,middle);
            quicksort(vi,++middle,high);
        }
    }
    
    vector<int>::iterator partition(vector<int> &vi, vector<int>::iterator low, vector<int>::iterator high){
        int pivotkey;
        if(low<high){
            pivotkey=*low;
            while(low<high){
                while(low<high&&pivotkey<=*high)
                    --high;
                iter_swap(low,high);
                while(low<high&&*low<=pivotkey)
                    ++low;
                iter_swap(low,high);
            }
        }
        return low;
    }
};
```

然后来看看网友题解：
第一个就是我想到的349的set演化为map，主要是用于存储某个数的出现次数，我觉得可以用这个方法来优化2和3，就是把长度更短的存进map或者set，这样子就不需要较长的序列进行排序或者一次性读取到内存了。
> 解法一：哈希表
时间复杂度O(n)
先用Hashmap记录第一个数组中的元素【放在key】，和出现的次数【放在value】。
然后再遍历第二个数组，如果找到对应元素，则添加这个元素到返回数组里。
如果value值大于1，HashMap中的value值减 1，表示已经找到一个相同的了。
如果value值等于1，则删除该元素。
```
//代码我换成另一位作者的C++代码了
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int>rec;
        unordered_map<int,int>map;
        for(int i =0;i<nums1.size();i++)
            map[nums1[i]]+=1;
        for(int i =0;i<nums2.size();i++)
           if(map[nums2[i]]>0)
           {
               rec.push_back(nums2[i]);
               map[nums2[i]]-=1;
           }
               
        return rec;

    }
};
```

我自己的复现：
```
class Solution {
public:
    //优化条件2 3 的hashmap方法
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        int len1=nums1.size(),len2=nums2.size();
        unordered_map<int,int> elem;
        vector<int> res;
        if(len1<len2){
            add_elem(elem,nums1);
            find_intersect(elem,nums2,res);
        }else{
            add_elem(elem,nums2);
            find_intersect(elem,nums1,res);
        }
        return res;  
    }
    
    void add_elem(unordered_map<int,int> &elem,vector<int> &nums){
        for(auto i:nums)
            if(elem.count(i))
                ++elem[i];
            else
                elem.insert({i,1});
        
    }
    
    void find_intersect(unordered_map<int,int> &elem,vector<int> &nums,vector<int> &res){
        for(auto i:nums)
            if(elem.count(i)&&elem[i]>0){
                res.push_back(i);
                --elem[i];
            }
        
    }
};

```

昨天看面经说大公司很注重变量的命名和代码的面向过程性，所以特地查了一下字典并特地写了两个函数
