> 假设按照升序排序的数组在预先未知的某个点上进行了旋转。
( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
请找出其中最小的元素。
注意数组中可能存在重复的元素。
示例 1：
输入: [1,3,5]
输出: 1
示例 2：
输入: [2,2,2,0,1]
输出: 0
说明：
这道题是 寻找旋转排序数组中的最小值 的延伸题目。
允许重复会影响算法的时间复杂度吗？会如何影响，为什么？
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题我也只想到如果边界和mid一样的话就往中间靠拢直至只有一边是异常的
然后处理过程中有点小问题，因为上一题81题的判断条件是(nums[mid]==nums[first]&&nums[mid]==nums[last]) 
这里有个与逻辑保证了避开mid和first或者mid和last相等时把自身去掉的情况
然后一开始我忽略了这点导致失败了，比如[1,3]会导致1把自己去掉
所以需要加上判断mid!=first和mid!=last才行
时间复杂度和空间复杂度都不堪入目啊，好好看看题解用了啥方法吧

```
class Solution {
public:
    int findMin(vector<int>& nums) {
        if(nums.empty()) return -1;
        int first=0,last=nums.size()-1,mid;
        while(first<last){
            mid=first+(last-first)/2;
            if(mid!=first&&nums[mid]==nums[first])
                ++first;
            else if(mid!=last&&nums[mid]==nums[last])
                --last;
            else if(nums[mid]<nums[first])
                last=mid;
            else if(nums[mid]>nums[last])
                first=mid+1;
            else
                return nums[first];
        }
        return nums[first];
    }
};
```

来看看网友题解吧
![](file://C:/Users/lab509/Documents/Gridea/post-images/1576377717081.png)
```
class Solution {
    public int findMin(int[] nums) {
        int left = 0, right = nums.length - 1;
        while (left < right) {
            int mid = (left + right) / 2;
            if (nums[mid] > nums[right]) left = mid + 1;
            else if (nums[mid] < nums[right]) right = mid;
            else right = right - 1;
        }
        return nums[left];
    }
}
```
其实思路还是一样的，只能通过缩减边界来处理，最坏情况就等同于顺序搜索了
