> 假设按照升序排序的数组在预先未知的某个点上进行了旋转。
( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
请找出其中最小的元素。
你可以假设数组中不存在重复元素。
示例 1:
输入: [3,4,5,1,2]
输出: 1
示例 2:
输入: [4,5,6,7,0,1,2]
输出: 0
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

我一开始的想法是把mid和first last做比较，如果有异常的话说明当前序列有问题，最小值应该处于有异常的一端
没有异常的话就照常处理
判断条件是重点
异常判断分为两个 if(nums[mid]<nums[first])和else if(nums[mid]>nums[last])
最后如果没有异常的话，可以直接返回nums[first]
遇到的小坑就是习惯性返回了first，其实应该是nums[first]

```
class Solution {
public:
    int findMin(vector<int>& nums) {
        if(nums.empty()) return -1;
        int first=0,last=nums.size()-1,mid;
        while(first<last){
            mid=first+(last-first)/2;
            if(nums[mid]<nums[first])
                last=mid;
            else if(nums[mid]>nums[last])
                first=mid+1;
            else
                return nums[first];
        }
        return nums[first];
    }
};
```

然后来看看官方题解：
方法 1：二分搜索
想法
一种暴力的解法是搜索整个数组，找到其中的最小元素，这样的时间复杂度是 O(N)其中 N 是给定数组的大小。
一个非常棒的解决该问题的办法是使用二分搜索。在二分搜索中，我们找到区间的中间点并根据某些条件决定去区间左半部分还是右半部分搜索。
由于给定的数组是有序的，我们就可以使用二分搜索。然而，数组被旋转了，所以简单的使用二分搜索并不可行。
在这个问题中，我们使用一种改进的二分搜索，判断条件与标准的二分搜索有些不同。
我们希望找到旋转排序数组的最小值，如果数组没有被旋转呢？如何检验这一点呢？
如果数组没有被旋转，是升序排列，就满足 last element > first element。
![](file://C:/Users/lab509/Documents/Gridea/post-images/1576292058115.png)
在这个改进版本的二分搜索算法中，我们需要找到这个点。下面是关于变化点的特点：
所有变化点左侧元素 > 数组第一个元素
所有变化点右侧元素 < 数组第一个元素
算法
找到数组的中间元素 mid。
如果中间元素 > 数组第一个元素，我们需要在 mid 右边搜索变化点。
如果中间元素 < 数组第一个元素，我们需要在 mid 做边搜索变化点。
![](file://C:/Users/lab509/Documents/Gridea/post-images/1576292147178.png)
```
class Solution {
  public int findMin(int[] nums) {
    // If the list has just one element then return that element.
    if (nums.length == 1) {
      return nums[0];
    }

    // initializing left and right pointers.
    int left = 0, right = nums.length - 1;

    // if the last element is greater than the first element then there is no rotation.
    // e.g. 1 < 2 < 3 < 4 < 5 < 7. Already sorted array.
    // Hence the smallest element is first element. A[0]
    if (nums[right] > nums[0]) {
      return nums[0];
    }
    
    // Binary search way
    while (right >= left) {
      // Find the mid element
      int mid = left + (right - left) / 2;

      // if the mid element is greater than its next element then mid+1 element is the smallest
      // This point would be the point of change. From higher to lower value.
      if (nums[mid] > nums[mid + 1]) {
        return nums[mid + 1];
      }

      // if the mid element is lesser than its previous element then mid element is the smallest
      if (nums[mid - 1] > nums[mid]) {
        return nums[mid];
      }

      // if the mid elements value is greater than the 0th element this means
      // the least value is still somewhere to the right as we are still dealing with elements
      // greater than nums[0]
      if (nums[mid] > nums[0]) {
        left = mid + 1;
      } else {
        // if nums[0] is greater than the mid value then this means the smallest value is somewhere to
        // the left
        right = mid - 1;
      }
    }
    return -1;
  }
｝
```
复杂度分析
时间复杂度：和二分搜索一样O(logN)
空间复杂度：O(1)
