> 我们正在玩一个猜数字游戏。 游戏规则如下：
我从 1 到 n 选择一个数字。 你需要猜我选择了哪个数字。
每次你猜错了，我会告诉你这个数字是大了还是小了。
你调用一个预先定义好的接口 guess(int num)，它会返回 3 个可能的结果（-1，1 或 0）：
-1 : 我的数字比较小
 1 : 我的数字比较大
 0 : 恭喜！你猜对了！
示例 :
输入: n = 10, pick = 6
输出: 6
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/guess-number-higher-or-lower
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题其实才应该放到第一题吧。。。那个刷题顺序说实话不算特别严谨
然后其实没啥难的，就是把二分法复现了一下，主要就是mid=first+(last-first)/2;是左倾还是右倾，从而影响后面是first=mid+1还是last=mid-1;
然后吐槽一下题目的语文水平，题目中的我的数字是指要猜的数字而不是mid

```
// Forward declaration of guess API.
// @param num, your guess
// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0
int guess(int num);

class Solution {
public:
    int guessNumber(int n) {
       int first=1,last=n, mid;
        while(first<last){
            //mid=first+(last-first)/2;
            mid=first+(last-first+1)/2;
            int res=guess(mid);
            if(res==0)
                return mid;
            else if(res==-1)
                //last=mid;
                last=mid-1;
            else
                //first=mid+1;  
                first=mid;
        }
        return first;
    }
};
```

这道题就没太多值得讨论的地方了，二分查找基本题
建议看一下[二分查找法模板](https://lixin-ee.github.io/post/er-fen-cha-zhao-fa-mo-ban/)

然后就是官方题解中的三分查找法
方法 3：三分查找
算法
在二分查找中，我们选择中间元素作为分隔点。而在三分查找中，我们选择两个分隔点（比方记作 m1 和 m2），那么给定范围会被分成 3 个相等长度的部分。如果答案 num 比 m1 小，那么我们对 m1 左边的区间做三分查找。如果 num 在 m1 和 m2 中间，我们对中间区域进行三分查找。否则我们对 m2 右边的区域进行三分查找。
```
public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int low = 1;
        int high = n;
        while (low <= high) {
            int mid1 = low + (high - low) / 3;
            int mid2 = high - (high - low) / 3;
            int res1 = guess(mid1);
            int res2 = guess(mid2);
            if (res1 == 0)
                return mid1;
            if (res2 == 0)
                return mid2;
            else if (res1 < 0)
                high = mid1 - 1;
            else if (res2 > 0)
                low = mid2 + 1;
            else {
                low = mid1 + 1;
                high = mid2 - 1;
            }
        }
        return -1;
    }
}
```

复杂度分析

时间复杂度： O(log_3 n)为三分查找所需的时间复杂度。
空间复杂度： O(1) 。没有使用额外的空间。

