> 峰值元素是指其值大于左右相邻值的元素。
给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。
数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。
你可以假设 nums[-1] = nums[n] = -∞。
示例 1:
输入: nums = [1,2,3,1]
输出: 2
解释: 3 是峰值元素，你的函数应该返回其索引 2。
示例 2:
输入: nums = [1,2,1,3,5,6,4]
输出: 1 或 5 
解释: 你的函数可以返回索引 1，其峰值元素为 2；
     或者返回索引 5， 其峰值元素为 6。
说明:
你的解法应该是 O(logN) 时间复杂度的。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-peak-element
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

这道题又和普通的二分查找有区别
我一开始的想法是递归调用二分查找，因为数组是无序的，所以需要两边都继续查找下去，相当于树的每个节点都要搜索到。

突然发现又读错题了，因为示例2中说明其实返回其中一个峰值就好，不需要返回最大的峰值

不过我还是没想到比较好的方法，还是继续老方法

似乎在序列的右边一定会出现峰值（错误 3 7 6 5 0 就不符合）

尝试向递增那一边移动（最后证明这个是正确的，因为相邻两节点不相同，而且两边有负无穷，所以只要一直向递增的方向移动一定会到达峰值，可以把3 7 6 5 0化为连续函数就清楚了）

边界条件着实是麻烦啊，注意(mid!=0&&nums[mid-1]>nums[mid])中的mid!=0不可缺少
幸好边界比较明显，所以最后边界判断也不算特别复杂

主要是：
一开始不小心把三个if分开了，导致一直mid[0-1]错误
然后用else连起来后发现自己在if else和&&的组合判断上犯了一个很严重的错误
            if(mid==0&&nums[mid]>nums[mid+1])
                return mid;
            else if(mid==nums.size()-1&&nums[mid]>nums[mid-1])
                return mid;
            else if(nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1])
在这里如果mid==0但是不符合nums[mid]>nums[mid+1]的话！是会继续判断下一个if而不是跳出判断的！！！

```
class Solution {
public:
    int max=-1;
    int findPeakElement(vector<int>& nums) {
        int first=0,last=nums.size()-1,mid;
        while(first<last){
            mid=first+(last-first)/2;
            if(mid==0){
                if(nums[mid]>nums[mid+1])
                return mid;
            }
            else if(mid==nums.size()-1){
                if(nums[mid]>nums[mid-1])
                return mid;
            }
            else if(nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1])
                return mid;
             if(mid!=0&&nums[mid-1]>nums[mid])
                 last=mid;
            else
                first=mid+1;
        }
        return first;
    }
};
```

然后来看一下题解
> 思路
标签：二分查找
过程：
首先要注意题目条件，在题目描述中出现了 nums[-1] = nums[n] = -∞，这就代表着 只要数组中存在一个元素比相邻元素大，那么沿着它一定可以找到一个峰值
根据上述结论，我们就可以使用二分查找找到峰值
查找时，左指针 l，右指针 r，以其保持左右顺序为循环条件
根据左右指针计算中间位置 m，并比较 m 与 m+1 的值，如果 m 较大，则左侧存在峰值，r = m，如果 m + 1 较大，则右侧存在峰值，l = m + 1
时间复杂度：O(logN)
代码
```
Java
class Solution {
    public int findPeakElement(int[] nums) {
        int left = 0, right = nums.length - 1;
        for (; left < right; ) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > nums[mid + 1]) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}
```

看完这个题解才发现自己搞复杂了 我的主判断是nums[mid-1]>nums[mid]，但是我的mid计算是左倾的，明显用nums[mid]>nums[mid+1]更加方便，就不会出现超出下标范围的情况了，果然还是欠缺考虑啊
修改代码如下：
```
class Solution {
public:
    int max=-1;
    int findPeakElement(vector<int>& nums) {
        int first=0,last=nums.size()-1,mid;
        while(first<last){
            mid=first+(last-first)/2;
             if(nums[mid]>nums[mid+1])
                 last=mid;
            else
                first=mid+1;
        }
        return first;
    }
};
```
代码简洁了超级多，时间复杂度和空间复杂度也下降了

然后是官方题解解释：
[寻找峰值](https://leetcode-cn.com/problems/find-peak-element/solution/xun-zhao-feng-zhi-by-leetcode/)
其实方法一致，而且比较难复制，我就不贴了
