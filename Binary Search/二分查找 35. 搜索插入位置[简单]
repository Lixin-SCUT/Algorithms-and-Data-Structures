> 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
你可以假设数组中无重复元素。
示例 1:
输入: [1,3,5,6], 5
输出: 2
示例 2:
输入: [1,3,5,6], 2
输出: 1
示例 3:
输入: [1,3,5,6], 7
输出: 4
示例 4:
输入: [1,3,5,6], 0
输出: 0
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/search-insert-position
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//本来以为挺简单的，但是边界条件略麻烦啊
//这道题难点就在于会出现边界问题，这两个点我单独提取出来判断
//然后就是插入点的问题，是从0开始算的下标，所以必须取右半边
//注意即使取右半边也不会出现大于size()-1的情况，所以两个边界条件最好还是单独判断

```
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int first=0,last=nums.size()-1,mid;
        if(target>nums.back())
            return nums.size();
        if(target<nums.front())
            return 0;
        while(first<last){
            mid=first+(last-first)/2;
            if(target==nums[mid])
                return mid;
            if(target>nums[mid])
                first=mid+1;
            else
                last=mid;
        }
        return first;
    }
};
```

先来看看网友题解
一个是dalao给出的二分查找法模板，我会新开一篇文章转发
二是针对这道题的解法，我写得代码其实通用性高了一点，因为题目保证没有重复的元素，所有可以在边界条件上更宽松一点，主要的难点也是头和尾两个点之一了
```
解法1：循环搜索
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int len=nums.size();
        if(len==0) return 0;
        for(int i=0;i<len;i++)
        {
            if(nums[i]>=target) return i;
        }
        return len;
    }
};
解法2：二分查找
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int mid=0;
        int head=0;
        int last=nums.size()-1;
        while(head<last)
        {
            mid=(last-head)/2+head;
            if(target>nums[mid])
            {
                head=mid+1;
            }
            else if(target<nums[mid])
            {
                last=mid-1;
            }
            else return mid;
        }
        if(target<=nums[head])//插入位置在开头的情况
            return head;
        return head+1;//插入位置在结尾的情况
    }
};
```
